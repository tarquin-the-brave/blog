
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>tarquin-the-brave</title>
   <link>https://tarquin-the-brave.github.io/blog/</link>
   <description>Recent content on tarquin-the-brave</description>
   <generator>Hugo -- gohugo.io</generator>
   <copyright>Copyright &amp;copy; 2020 - Tom Steavenson</copyright>
   <lastBuildDate>Thu, 27 Aug 2020 12:29:17 +0100</lastBuildDate>
   
       <atom:link href="https://tarquin-the-brave.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>Is it time to Stop Referring to things as Functional?</title>
       <link>https://tarquin-the-brave.github.io/blog/posts/new_name_for_functional/</link>
       <pubDate>Thu, 27 Aug 2020 12:29:17 +0100</pubDate>
       
       <guid>https://tarquin-the-brave.github.io/blog/posts/new_name_for_functional/</guid>
       <description>&lt;p&gt;Language is transient.  It evolves through a cascade of misappropriations.
&amp;ldquo;Correct&amp;rdquo; usage is only ever as strongly defined as &amp;ldquo;the current generally
accepted usage&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s many words that in the past meant something quite different&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;,
&amp;ldquo;silly&amp;rdquo; used to mean &amp;ldquo;blessed&amp;rdquo;. Current common misappropriations of words are
the beginning of that process. Even if by today&amp;rsquo;s reckoning, everything Alanis
Morissette claims to be &amp;ldquo;ironic&amp;rdquo;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; is instead just &amp;ldquo;unfortunate&amp;rdquo;, one
day that might be what &amp;ldquo;ironic&amp;rdquo; is taken to mean&amp;hellip; Literally!&lt;/p&gt;
&lt;p&gt;Now consider the word &amp;ldquo;function&amp;rdquo;.  To a mathematician, or a programmer talking
in the context of what we know as &amp;ldquo;functional languages&amp;rdquo;, it&amp;rsquo;s a referentially
transparent description of how some data maps from some other data.  To a
programmer thinking in a procedural paradigm (OOP included), it&amp;rsquo;s a
sub-routine.&lt;/p&gt;
&lt;p&gt;This difference in understanding of what a &amp;ldquo;function&amp;rdquo; is causes a chasm between
programmers.  Whether we like it or not, the software community has rather
strongly misappropriated the word &amp;ldquo;function&amp;rdquo; to the extent that it&amp;rsquo;s taken on a
different meaning.&lt;/p&gt;
&lt;p&gt;This then makes it less meaningful to refer to concepts or languages as
&amp;ldquo;functional&amp;rdquo;.  With the majority of programmers not having the same
understanding of what a &amp;ldquo;function&amp;rdquo; is as the understanding that underpins
&amp;ldquo;functional&amp;rdquo; being a meaningful description, the description of &amp;ldquo;functional&amp;rdquo;
loses its meaning and value.&lt;/p&gt;
&lt;p&gt;If not &amp;ldquo;functional&amp;rdquo;, what should we call it?  &lt;del&gt;I quite like &amp;ldquo;data oriented&amp;rdquo;.&lt;/del&gt;
&lt;em&gt;UPDATE: Since first writing this I&amp;rsquo;ve found out that &lt;a href=&#34;https://en.wikipedia.org/wiki/Data-oriented_design&#34;&gt;&amp;ldquo;Data Oriented
Design&amp;rdquo;&lt;/a&gt; is already a thing, and means something completely
different. I then thought perhaps &amp;ldquo;value oriented&amp;rdquo; would be a good name for
it&amp;hellip; but it turns out that&amp;rsquo;s already a thing too.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Rich Hickey does a great job&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; of explaining the difference between
&amp;ldquo;data&amp;rdquo;/&amp;ldquo;values&amp;rdquo; and &amp;ldquo;places&amp;rdquo;.  &amp;ldquo;Data&amp;rdquo;/&amp;ldquo;values&amp;rdquo; representing observed facts
about the world, and &amp;ldquo;places&amp;rdquo; being those bits of computer memory that we use
to temporarily store those facts or other things.  Hickey coins the term &amp;ldquo;PLOP&amp;rdquo;
(Place Oriented Programming) to describe languages where the programmer is,
knowingly or not, making statements about the places in memory that the program
will use to process its data.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Functional&amp;rdquo; languages aren&amp;rsquo;t PLOP.  You don&amp;rsquo;t tell the program to create a
location in memory, put data in, change that data (mutation), etc.  In a
&amp;ldquo;functional&amp;rdquo; language you describe data.  You describe how the data you want
maps from the data you have with &amp;ldquo;functions&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;If instead of describing things as &amp;ldquo;functional&amp;rdquo; we &lt;del&gt;described them as &amp;ldquo;data
oriented&amp;quot;&lt;/del&gt; &lt;em&gt;UPDATE: find some other name for it&lt;/em&gt;, I wonder if that would help
with programmers being introduced to the concepts and distinguish them from
what they already know. I think it would also help to the value and simplicity
of a &amp;ldquo;functional&amp;rdquo;/&lt;del&gt;&amp;quot;data oriented&amp;quot;&lt;/del&gt; approach. You describe how data flows
through your program.  You don&amp;rsquo;t need to worry about all the moving parts that
PLOP brings that can ruin your abstractions at any moment.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Instead of &amp;ldquo;functional&amp;rdquo;, should we say &lt;del&gt;&amp;quot;data oriented&amp;quot;&lt;/del&gt; UPDATE: open to
suggestions on this one?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;But then what should we call &amp;ldquo;functions&amp;rdquo;?&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;BBC article on: &lt;a href=&#34;https://www.bbc.co.uk/bitesize/articles/znbct39&#34;&gt;&amp;ldquo;Five words that have changed meaning over time&amp;rdquo;&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;I can&amp;rsquo;t see anything in &lt;a href=&#34;https://www.google.com/search?q=alanis+morissette+ironic+lyrics&#34;&gt;the lyrics&lt;/a&gt; to &amp;ldquo;Ironic&amp;rdquo; that&amp;rsquo;s actually ironic.
&amp;ldquo;Rain on your wedding day&amp;rdquo;.  If you&amp;rsquo;d gone to the effort of arranging a wedding
in the Atacama desert, specifically to avoid being rained on, then yes, it&amp;rsquo;s
ironic.  But in places where it rains, weddings get rained on. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Rich Hickey talk: &lt;a href=&#34;https://www.youtube.com/watch?v=-6BsiVyC1kM&#34;&gt;&amp;ldquo;The Value of Values&amp;rdquo;&lt;/a&gt; &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
     </item>
   
     <item>
       <title>Re-Learning Haskell with Advent of Code - Part 3</title>
       <link>https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell-3/</link>
       <pubDate>Sun, 14 Jun 2020 12:35:26 +0100</pubDate>
       
       <guid>https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell-3/</guid>
       <description>&lt;p&gt;After &lt;a href=&#34;https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell-2/&#34;&gt;Part 2&lt;/a&gt;, I wanted to go and do some reading. I felt like I could
crack on with the Advent of Code problems with the tools I had at my disposal,
but felt if I learned more Haskell I could be doing better.  I wanted to learn
some more about monad transformers and anything else that could improve my
solutions.&lt;/p&gt;
&lt;p&gt;So I started search around to see what resources I could find.&lt;/p&gt;
&lt;h1 id=&#34;re-relearning-haskell-without-advent-of-code&#34;&gt;(Re-)&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;Learning Haskell with(out) Advent of Code&lt;/h1&gt;
&lt;p&gt;After looking around a little, I stumbled upon &lt;a href=&#34;https://tech.fpcomplete.com/haskell/learn&#34;&gt;the Haskell learning
resources shared by FP Complete&lt;/a&gt;. There&amp;rsquo;s so many goodies here!&lt;/p&gt;
&lt;p&gt;I ran through tutorials on:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Applicative Syntax,&lt;/li&gt;
&lt;li&gt;String Types,&lt;/li&gt;
&lt;li&gt;Strictness,&lt;/li&gt;
&lt;li&gt;lenses,&lt;/li&gt;
&lt;li&gt;The RIO library,&lt;/li&gt;
&lt;li&gt;Monad Transformers, and&lt;/li&gt;
&lt;li&gt;Vectors&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This only scratched the surface of what&amp;rsquo;s available there.  It&amp;rsquo;s definitely a
resource I will be revisiting.&lt;/p&gt;
&lt;p&gt;Armed with these newly learnt learnings, I went back to my Advent of Code
solutions to see how I could improve them. 👷 🔧&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;small-improvements&#34;&gt;Small Improvements&lt;/h1&gt;
&lt;p&gt;Some small improvements I picked up as handy tips or on a 2nd look saw as
obvious and trivial.&lt;/p&gt;
&lt;h2 id=&#34;writing-stack-scripts&#34;&gt;Writing Stack Scripts&lt;/h2&gt;
&lt;p&gt;For the simpler problems, I didn&amp;rsquo;t need the overhead of generating a full
project with &lt;code&gt;stack new&lt;/code&gt; and opted to replace that with a single &lt;code&gt;dayX.hs&lt;/code&gt;
script which starts like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env stack
-- stack --resovler lts-15.4 script
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I&amp;rsquo;d gone with the full project structure, given by the default template used by
&lt;code&gt;stack new&lt;/code&gt;, to get used to importing and exporting and to find the namespacing
control I was happy with.  I&amp;rsquo;ve done that now, so I can reduce some of the
problems to simple scripts and &amp;ldquo;get things done!&amp;quot;.&lt;/p&gt;
&lt;h2 id=&#34;using-where-more&#34;&gt;Using &lt;code&gt;where&lt;/code&gt; More&lt;/h2&gt;
&lt;p&gt;As I elucidated on in &lt;a href=&#34;https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell-2/&#34;&gt;Part 2&lt;/a&gt;, my earlier solutions were plagued with
the proliferation of small functions that don&amp;rsquo;t really mean a huge amount on
their own and are only called as part of another function.  &lt;code&gt;where&lt;/code&gt; helps to
clean this up by putting them inside the namespace of the function they&amp;rsquo;re
really part of and de-cluttering the namespace of the module.&lt;/p&gt;
&lt;h2 id=&#34;use-foldl-over-foldl&#34;&gt;Use &lt;code&gt;foldl&#39;&lt;/code&gt; Over &lt;code&gt;foldl&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;&amp;ldquo;For strict application of the operator&amp;rdquo; - &lt;a href=&#34;https://hackage.haskell.org/package/base-4.14.0.0/docs/Data-Foldable.html#v:foldl-39-&#34;&gt;the docs say&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As I understand it, a lazy fold would build up a giant chain of thunks which,
if the folding operation were cheap, would be more costly than strict
evaluation.&lt;/p&gt;
&lt;h2 id=&#34;where-a-list-was-very-slow&#34;&gt;Where a List Was Very Slow&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://adventofcode.com/2019/day/3&#34;&gt;Day 3&lt;/a&gt;, which was the first real problem I tackled in this exercise to
re-learn Haskell, has you drawing wires on a grid and finding where they cross.&lt;/p&gt;
&lt;p&gt;I was using a long &lt;code&gt;List&lt;/code&gt; for each &amp;ldquo;wire&amp;rdquo; to store the coordinates it passed
through, then finding where two wires had crossed by putting a function that
matches the coordinates in an applicative functor across the two lists.  This
ends up scaling with order &lt;code&gt;m * n&lt;/code&gt; as the wires get longer.&lt;/p&gt;
&lt;p&gt;Essentially &lt;code&gt;List&lt;/code&gt; was a terrible choice of data structure for this.  Lists
provide an ordering of their data, and allow you to express duplicates.  We
want the answer to the question: &amp;ldquo;what points has a path visited?&amp;quot;, we don&amp;rsquo;t
care about the answers to &amp;ldquo;what order did the path visit those points in?&amp;quot;, and
&amp;ldquo;were any points visited more than once?&amp;quot;.  But by choosing &lt;code&gt;List&lt;/code&gt;, or any
other ordered collection that allows duplicates, we pay for the answers to
those questions.&lt;/p&gt;
&lt;p&gt;A simple refactor to store this data in &lt;a href=&#34;https://hackage.haskell.org/package/unordered-containers-0.2.10.0/docs/Data-HashSet.html#t:HashSet&#34;&gt;&lt;code&gt;HashSet&lt;/code&gt;s&lt;/a&gt;, and finding the
&lt;a href=&#34;https://hackage.haskell.org/package/unordered-containers-0.2.10.0/docs/Data-HashSet.html#v:intersection&#34;&gt;intersection&lt;/a&gt; to get the points where the wires crossed reduced the
runtime of my solution from over 8 minutes, to 0.8 seconds.&lt;/p&gt;
&lt;h2 id=&#34;deriving-instances&#34;&gt;Deriving Instances&lt;/h2&gt;
&lt;p&gt;In Rust, I use the &lt;a href=&#34;https://doc.rust-lang.org/reference/attributes/derive.html&#34;&gt;&lt;code&gt;#[derive()]&lt;/code&gt;&lt;/a&gt; attribute &lt;em&gt;a lot&lt;/em&gt;. More often
than not, defining some &lt;code&gt;struct&lt;/code&gt;s and &lt;code&gt;emun&lt;/code&gt;s to declare what aggregates of
data matter becomes the cornerstone of any program I write.  Derive macros, via
&lt;a href=&#34;https://serde.rs/&#34;&gt;&lt;code&gt;serde&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://docs.rs/structopt/0.3.14/structopt/&#34;&gt;&lt;code&gt;structopt&lt;/code&gt;&lt;/a&gt;, are &amp;ldquo;how we do&amp;rdquo; serializing and
deserializing data, and building CLIs.  I&amp;rsquo;ve even written my own derive macros
recently. It&amp;rsquo;s fair to say: Rust would be a very different language without
derive macros.  I was going to say &amp;ldquo;completely fucking unusable&amp;rdquo;, but I started
to imagine a world where defining your own types was significantly more
expensive, where people defined their data aggregates in a more anonymous, ad
hoc manner, using generally available collection types, with a smattering of
type aliases.  Perhaps there&amp;rsquo;s some advantages to that style.  At least it
would stop people writing reams of code to build spaghetti-like systems of
entirely entangled &amp;ldquo;objects&amp;rdquo; that go right round the houses, dig holes, fill
them back up again, pull in some state from who knows where or when, all just
to &amp;ldquo;do a thing&amp;rdquo;, espousing virtues of &amp;ldquo;encapsulation&amp;rdquo; and &lt;a href=&#34;https://tarquin-the-brave.github.io/blog/posts/dry-not-a-goal/&#34;&gt;&amp;ldquo;DRY&amp;rdquo; (at all
costs)&lt;/a&gt;.  I&amp;rsquo;ve seen code like that in Rust.  Defining your own types
provides a lot of control and correctness to your program, as you can lean hard
on the type system, but as with anything, there are costs as well.&lt;/p&gt;
&lt;p&gt;Anyway, while writing Haskell I&amp;rsquo;ve been trying to use &lt;code&gt;deriving&lt;/code&gt; as much as
possible. One thing I picked up from &lt;a href=&#34;https://tech.fpcomplete.com/haskell/learn&#34;&gt;FP Complete&amp;rsquo;s tutorials&lt;/a&gt; was the
&lt;code&gt;DeriveFunctor&lt;/code&gt; language extension. In &lt;a href=&#34;https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell-2/&#34;&gt;Part 2&lt;/a&gt; I refactored my Intcode
Computer solution to define and use my own Monad instance.  It was good to go
back and delete the 5 lines of code that defined the Functor instance.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prog&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Running&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AwaitInput&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Crashed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;deriving&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;Show&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Eq&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Functor&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prog&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
  fmap &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Crashed&lt;/span&gt; e) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Crashed&lt;/span&gt; e
  fmap f (&lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt; a) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt; (f a)
  fmap f (&lt;span style=&#34;color:#66d9ef&#34;&gt;Running&lt;/span&gt; a) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Running&lt;/span&gt; (f a)
  fmap f (&lt;span style=&#34;color:#66d9ef&#34;&gt;AwaitInput&lt;/span&gt; a) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AwaitInput&lt;/span&gt; (f a)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;became:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{-&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# LANGUAGE DerivingFunctor #&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prog&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Running&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AwaitInput&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Crashed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;deriving&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;Show&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Eq&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Functor&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Little victories. No code, no bugs. 🐛&lt;/p&gt;
&lt;h2 id=&#34;using-git-dependencies-with-stack&#34;&gt;Using Git Dependencies with Stack&lt;/h2&gt;
&lt;p&gt;As part of my refactored Intcode Computer solution in &lt;a href=&#34;https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell-2/&#34;&gt;Part 2&lt;/a&gt; I had to
fork and update the &lt;code&gt;base&lt;/code&gt; version in &lt;a href=&#34;http://hackage.haskell.org/package/tasty-laws&#34;&gt;a library that provided testing of
Monad, Applicative, Functor, and Monoid Laws&lt;/a&gt;.  I then included my
fork as a &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Submodules&#34;&gt;git submodule&lt;/a&gt; and pointed Stack at the dependency in the
local file system.  This was a good bit of practice with git submodules.  I&amp;rsquo;ve
found git submodules to be something that you never use, until you have to, and
then you get it all spectacularly wrong and end up very confused.  But as the
theme of this post is about tidying up and refactoring, I changed this to tell
stack to get my fork &lt;a href=&#34;https://docs.haskellstack.org/en/stable/yaml_configuration/#extra-deps&#34;&gt;from git&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;big-changes&#34;&gt;Big Changes&lt;/h1&gt;
&lt;p&gt;For me, the biggest difference coming back to my solutions was more down to
having more experience and confidence in the language, and coming at the code,
with a view to cleaning up the expressions and abstractions rather than wanting
to get the answer to plug into Advent of Code so it&amp;rsquo;ll give me a gold star.
⭐&lt;/p&gt;
&lt;p&gt;Looking past the general code tidying, there were some specific things I&amp;rsquo;d
learned from doing some of &lt;a href=&#34;https://tech.fpcomplete.com/haskell/learn&#34;&gt;FP Complete&amp;rsquo;s tutorials&lt;/a&gt; that I was able to apply to
my refactored solutions.&lt;/p&gt;
&lt;h2 id=&#34;stop-matching-maybes---more-monad-transformers&#34;&gt;Stop Matching Maybes - More Monad Transformers&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Not a great first example, as it&amp;rsquo;s very much a &amp;ldquo;Big Not-Change&amp;rdquo;, but I thought
it was worth a mention.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;After going through some of FP Complete&amp;rsquo;s tutorials on monad transformers, I
thought that I&amp;rsquo;d go back to my solutions finding vast swathes of code, matching
on &lt;code&gt;Maybe&lt;/code&gt;s and rip it all out in favour of monad transformer stacks.&lt;/p&gt;
&lt;p&gt;That didn&amp;rsquo;t actually happen. There was actually relatively few cases where I
was matching &lt;code&gt;Maybe&lt;/code&gt;s and they were quite tidily cleaned up by making the
function generic over &lt;code&gt;MonadFail&lt;/code&gt; in stead, see below.&lt;/p&gt;
&lt;p&gt;It could be that there weren&amp;rsquo;t lots places where monad transformers could have
been used to really clean up my code.  Or perhaps the concept hasn&amp;rsquo;t sunk in
enough for me to spot those places.  I had used &lt;code&gt;StateT&lt;/code&gt; in one of my solutions
already so I could print out the state to terminal as it was evolving (covered
in &lt;a href=&#34;https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell-2/&#34;&gt;Part 2&lt;/a&gt;).  It might be easier to spot where they could be used when
I&amp;rsquo;m writing something fresh, rather than revisiting and refactoring code that
was to some extent written around not knowing to use them.&lt;/p&gt;
&lt;h2 id=&#34;alternatively-use-monadfail&#34;&gt;Alternatively, Use MonadFail&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&#34;https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell-2/&#34;&gt;Part 2&lt;/a&gt; I discussed a pattern I found of defining functions who&amp;rsquo;s
result could represent a failure, as being generic over &lt;a href=&#34;https://hackage.haskell.org/package/base-4.14.0.0/docs/Prelude.html#t:MonadFail&#34;&gt;&lt;code&gt;MonadFail&lt;/code&gt;&lt;/a&gt;
and allowing the calling code to choose the instance of &lt;a href=&#34;https://hackage.haskell.org/package/base-4.14.0.0/docs/Prelude.html#t:MonadFail&#34;&gt;&lt;code&gt;MonadFail&lt;/code&gt;&lt;/a&gt; to
represent the failure.&lt;/p&gt;
&lt;p&gt;My solution to &lt;a href=&#34;https://adventofcode.com/2019/day/6&#34;&gt;day 6&lt;/a&gt; involved loading some data into a Tree, and at a
one point, finding the path to a given node. Trouble was, the code assumed the
given node existed in the tree, and if it didn&amp;rsquo;t, the code didn&amp;rsquo;t crash, it
gave a nonsensical answer. 😟&lt;/p&gt;
&lt;p&gt;Using this pattern, this code was surprisingly easy to fix.  My function
&lt;code&gt;orbitalHops&lt;/code&gt; which told you how many hops there were between two nodes of a
tree was fixed up to look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.Tree &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; T

&lt;span style=&#34;color:#a6e22e&#34;&gt;orbitalHops&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MonadFail&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Tree&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;orbitalHops&lt;/span&gt; orbs node1 node2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; orbs `contains` node1
  &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; orbs `contains` node2
  return &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;-- previous logic that assumed nodes were in tree&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    contains &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MonadFail&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Tree&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m ()
    contains tree node &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; node `elem` &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;flatten tree &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt; return () &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; fail &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Could not find element: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In my example of using this pattern with &lt;code&gt;MonadFail&lt;/code&gt; in &lt;a href=&#34;https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell-2/&#34;&gt;Part 2&lt;/a&gt;, there
was a top level function who&amp;rsquo;s type gave &lt;code&gt;m&lt;/code&gt; a concrete type.  This time, I
used the fact that &lt;code&gt;IO&lt;/code&gt; implements &lt;code&gt;MonadFail&lt;/code&gt; and passed the non-concrete &lt;code&gt;m&lt;/code&gt;
up to &lt;code&gt;main&lt;/code&gt; to let the script fail with the error above if a node given was
not in the data.&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;main&lt;/code&gt; I had:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;orbitalHops&lt;/span&gt; orbitTree &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;YOU&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;SAN&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; print
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Causing the script to either print the number of orbital hops between &lt;code&gt;&amp;quot;YOU&amp;quot;&lt;/code&gt; &amp;amp;
&lt;code&gt;&amp;quot;SAN&amp;quot;&lt;/code&gt; or fail with the error above, provided by the call to &lt;code&gt;fail&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;no-more-strings&#34;&gt;No More Strings&lt;/h2&gt;
&lt;p&gt;The wisdom appears to be:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t use &lt;code&gt;String&lt;/code&gt;, use &lt;code&gt;Text&lt;/code&gt; (or &lt;code&gt;ByteString&lt;/code&gt; for raw data)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;which a quick google will provide pretty solid justification for, so I&amp;rsquo;ll not
repeat it here.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://adventofcode.com/2019/day/6&#34;&gt;Day 6&lt;/a&gt; was also the first problem where the input data remained as a
string throughout the program and some string manipulation was performed.&lt;/p&gt;
&lt;p&gt;I was bracing myself for a bit of a fight to update the solution from using
&lt;code&gt;String&lt;/code&gt; to using &lt;code&gt;Text&lt;/code&gt;, but actually found I could do an almost like for like
replacement.&lt;/p&gt;
&lt;p&gt;I made some new imports:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.Text &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; Txt  &lt;span style=&#34;color:#f92672&#34;&gt;//&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;I&lt;/span&gt; was already importing &lt;span style=&#34;color:#66d9ef&#34;&gt;Data&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Tree&lt;/span&gt; as &lt;span style=&#34;color:#66d9ef&#34;&gt;T&lt;/span&gt;, so went with &lt;span style=&#34;color:#66d9ef&#34;&gt;Txt&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.Text.Encoding &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; TE
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.ByteString &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; B
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Data.Monoid ((&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and removed another: &lt;code&gt;import Data.List.Split (splitOn)&lt;/code&gt;, then:&lt;/p&gt;
&lt;p&gt;Swapped &lt;code&gt;String&lt;/code&gt; for &lt;code&gt;Txt.Text&lt;/code&gt; where it appeared in type statements.&lt;/p&gt;
&lt;p&gt;Prepended &lt;code&gt;Txt.&lt;/code&gt; to all the functions acting on strings.&lt;/p&gt;
&lt;p&gt;Swapped the use of Prelude&amp;rsquo;s &lt;code&gt;readFile&lt;/code&gt; with &lt;code&gt;fmap TE.decodeUtf8 . B.readFile&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And Replaced usages of &lt;code&gt;++&lt;/code&gt; with &lt;code&gt;&amp;lt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The compiler picked up a couple of places I&amp;rsquo;d missed and voilà, the script ran
as it did before.&lt;/p&gt;
&lt;p&gt;I was able to completely remove &lt;code&gt;String&lt;/code&gt; from the program, with one exception:
the &lt;a href=&#34;https://hackage.haskell.org/package/base-4.14.0.0/docs/Prelude.html#v:fail&#34;&gt;&lt;code&gt;fail&lt;/code&gt;&lt;/a&gt; function from &lt;a href=&#34;https://hackage.haskell.org/package/base-4.14.0.0/docs/Prelude.html#t:MonadFail&#34;&gt;&lt;code&gt;MonadFail&lt;/code&gt;&lt;/a&gt; takes a &lt;code&gt;String&lt;/code&gt;.  This
required a call to &lt;a href=&#34;https://hackage.haskell.org/package/text-1.2.4.0/docs/Data-Text.html#v:unpack&#34;&gt;&lt;code&gt;unpack&lt;/code&gt;&lt;/a&gt; to turn &lt;code&gt;Text&lt;/code&gt; into &lt;code&gt;String&lt;/code&gt;.  So:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fail&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Could not find element: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;became:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fail&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Txt&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unpack &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Could not find element: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&amp;gt;&lt;/span&gt; node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;strictness&#34;&gt;Strictness&lt;/h3&gt;
&lt;p&gt;One of the reasons touted for &lt;code&gt;String&lt;/code&gt;, a singly linked lazy list of &lt;code&gt;Char&lt;/code&gt;s,
being a bad representation of textual data is that it&amp;rsquo;s lazy.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://adventofcode.com/2019/day/8&#34;&gt;Day 8&lt;/a&gt; was a good problem to experiment with as my solution involved
manipulating lists of characters, &lt;code&gt;[Char]&lt;/code&gt;, a.k.a: &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After refactoring the solution into a once page script and having a bit of a
tidy up, but otherwise leaving the substance of the code the same, I built
and ran the solution, in file &lt;code&gt;day8string.hs&lt;/code&gt;, like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack --resolver lts-15.4 ghc -- day8string.hs -O2 &amp;amp;&amp;amp; ./day8string +RTS -s
[1 of 1] Compiling Main             ( day8string.hs, day8string.o )
Linking day8string ...
...
[solution output]
...
       4,892,080 bytes allocated in the heap
         848,552 bytes copied during GC
         394,736 bytes maximum residency (2 sample(s))
          36,256 bytes maximum slop
               0 MB total memory in use (0 MB lost due to fragmentation)

                                     Tot time (elapsed)  Avg pause  Max pause
  Gen  0         3 colls,     0 par    0.000s   0.001s     0.0002s    0.0002s
  Gen  1         2 colls,     0 par    0.000s   0.000s     0.0002s    0.0003s

  INIT    time    0.000s  (  0.000s elapsed)
  MUT     time    0.000s  (  0.001s elapsed)
  GC      time    0.000s  (  0.001s elapsed)
  EXIT    time    0.000s  (  0.000s elapsed)
  Total   time    0.000s  (  0.002s elapsed)

  %GC     time       0.0%  (0.0% elapsed)

  Alloc rate    0 bytes per MUT second

  Productivity 100.0% of total user, 55.5% of total elapsed
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This gets some statistics out of the garbage collector. &lt;a href=&#34;https://downloads.haskell.org/~ghc/8.4.2/docs/html/users_guide/runtime_control.html#rts-flag--s%20%5B%E2%9F%A8file%E2%9F%A9%5D&#34;&gt;These docs&lt;/a&gt;
tells you what they all mean. The memory usage stats at the top are what&amp;rsquo;s
interesting to us here.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#no-more-strings&#34;&gt;As with my Day 6 solution&lt;/a&gt;, I went through and replaced all the
usages of &lt;code&gt;[Char]&lt;/code&gt; with &lt;code&gt;Text&lt;/code&gt;, and functions acting on them with their
counterparts from &lt;a href=&#34;https://hackage.haskell.org/package/text-1.2.4.0/docs/Data-Text.html&#34;&gt;Data.Text&lt;/a&gt;, using
&lt;a href=&#34;https://hackage.haskell.org/package/bytestring-0.10.10.0/docs/Data-ByteString.html#v:readFile&#34;&gt;&lt;code&gt;Data.ByteString.readFile&lt;/code&gt;&lt;/a&gt; to read the data from file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack --resolver lts-15.4 ghc -- day8.hs -O2 &amp;amp;&amp;amp; ./day8 +RTS -s
...
       1,464,056 bytes allocated in the heap
          10,264 bytes copied during GC
          44,512 bytes maximum residency (1 sample(s))
          29,216 bytes maximum slop
               0 MB total memory in use (0 MB lost due to fragmentation)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;These numbers appear to significantly reduced, which is good.  I was interest
how much of this was attributable to laziness alone and not other reasons why
&lt;code&gt;Text&lt;/code&gt; might be more efficient than &lt;code&gt;String&lt;/code&gt;. I made another copy of the
script, this time using the lazy counterparts of the &lt;code&gt;Text&lt;/code&gt; libraries:
&lt;a href=&#34;https://hackage.haskell.org/package/text-1.2.4.0/docs/Data-Text-Lazy.html&#34;&gt;Data.Text.Lazy&lt;/a&gt;, and &lt;a href=&#34;https://hackage.haskell.org/package/text-1.2.4.0/docs/Data-Text-Lazy-IO.html&#34;&gt;Data.Text.Lazy.IO&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack --resolver lts-15.4 ghc -- day8lazy.hs -O2 &amp;amp;&amp;amp; ./day8lazy +RTS -s
...
       3,566,680 bytes allocated in the heap
          34,224 bytes copied during GC
          86,824 bytes maximum residency (2 sample(s))
          36,056 bytes maximum slop
               0 MB total memory in use (0 MB lost due to fragmentation)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The numbers went back up a bit, but nowhere near the level of the solution
using &lt;code&gt;String&lt;/code&gt; and the &lt;a href=&#34;https://hackage.haskell.org/package/base-4.14.0.0/docs/Prelude.html#v:readFile&#34;&gt;&lt;code&gt;readFile&lt;/code&gt; from Prelude&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I imagine there&amp;rsquo;s a few ways in which &lt;code&gt;Text&lt;/code&gt; has been made to be more efficient
than &lt;code&gt;String&lt;/code&gt;.  It&amp;rsquo;s good to know that in the rarer case where you might want
to evaluate text lazily, lazy &lt;code&gt;Text&lt;/code&gt; is still &lt;em&gt;that much more efficient&lt;/em&gt; than
&lt;code&gt;String&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;lenses&#34;&gt;Lenses&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Lenses are awesome.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In my intcode computer code, which the building of and using was the focus of
&lt;a href=&#34;https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell-2/&#34;&gt;Part 2&lt;/a&gt;, I had defined the core &amp;ldquo;intcode data&amp;rdquo; in its own module, that
consisted of an &lt;code&gt;Intcode&lt;/code&gt; type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt; {
  input&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;],
  code&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;],
  &lt;span style=&#34;color:#75715e&#34;&gt;-- ip: Instruction Pointer&lt;/span&gt;
  ip&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;,
  &lt;span style=&#34;color:#75715e&#34;&gt;-- rb: Relative Base&lt;/span&gt;
  rb&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;,
  output&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;]
} &lt;span style=&#34;color:#66d9ef&#34;&gt;deriving&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;Show&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Eq&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and some functions that edit the subfields, such as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;moveIp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;moveIp&lt;/span&gt; i ic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; setIp (i &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; ip ic) ic

&lt;span style=&#34;color:#a6e22e&#34;&gt;setIp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;setIp&lt;/span&gt; i ic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt;{
    input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input ic,
    code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code ic,
    ip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; i,
    rb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rb ic,
    output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output ic
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;changeRb&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;changeRb&lt;/span&gt; b ic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt;{
    input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input ic,
    code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code ic,
    ip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ip ic,
    rb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (rb ic) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; b,
    output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; output ic
}

&lt;span style=&#34;color:#a6e22e&#34;&gt;consOutput&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;consOutput&lt;/span&gt; o ic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt;{
    input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; input ic,
    code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; code ic,
    ip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ip ic,
    rb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; rb ic,
    output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; o&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;(output ic)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the exception of some like &lt;code&gt;moveIp&lt;/code&gt; that called other functions,
they all followed the same pattern of &amp;ldquo;make a new &lt;code&gt;Intcode&lt;/code&gt; with one
field different.&lt;/p&gt;
&lt;p&gt;The full list of them could be seen in export statement of the module:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Intcode.Data
    ( &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;)
    , &lt;span style=&#34;color:#a6e22e&#34;&gt;newIC&lt;/span&gt;
    , &lt;span style=&#34;color:#a6e22e&#34;&gt;moveIp&lt;/span&gt;
    , &lt;span style=&#34;color:#a6e22e&#34;&gt;setIp&lt;/span&gt;
    , &lt;span style=&#34;color:#a6e22e&#34;&gt;changeRb&lt;/span&gt;
    , &lt;span style=&#34;color:#a6e22e&#34;&gt;updateCode&lt;/span&gt;
    , &lt;span style=&#34;color:#a6e22e&#34;&gt;tailInput&lt;/span&gt;
    , &lt;span style=&#34;color:#a6e22e&#34;&gt;setInput&lt;/span&gt;
    , &lt;span style=&#34;color:#a6e22e&#34;&gt;consInput&lt;/span&gt;
    , &lt;span style=&#34;color:#a6e22e&#34;&gt;appendInput&lt;/span&gt;
    , &lt;span style=&#34;color:#a6e22e&#34;&gt;setOutput&lt;/span&gt;
    , &lt;span style=&#34;color:#a6e22e&#34;&gt;consOutput&lt;/span&gt;
    , &lt;span style=&#34;color:#a6e22e&#34;&gt;scrubOutput&lt;/span&gt;
    ) &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;A lot of copy pasting and Vim macros were used when I first wrote this out.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I did later find out that Haskell has a built-in way for dealing with this
boiler plate as an instance of a record type can be referred to with respect to another,
only mentioning the records that change.  E.g. &lt;code&gt;consOutput&lt;/code&gt; from above could have been
written:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;consOutput&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;consOutput&lt;/span&gt; o ic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ic { output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; o&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;(output ic) }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And these can be chained, so you could have something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ic&lt;/span&gt; { output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; o&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;(output ic) } { ip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ip ic &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This would have massively reduced the boilerplate in this module on its own.  But
we can go one better with lenses.&lt;/p&gt;
&lt;p&gt;Using the &lt;a href=&#34;http://hackage.haskell.org/package/microlens-platform&#34;&gt;&lt;code&gt;microlens-platform&lt;/code&gt;&lt;/a&gt; package, to also get auto generation
of lenses with Template Haskell as well as the functions from &lt;code&gt;microlens&lt;/code&gt;, I was
able to refactor these functions to simple single liners such as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;consInput&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;consInput&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; over input (&lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;inp &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; i&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;inp)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And the &amp;ldquo;set&amp;rdquo; functions became entirely trivial:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;setIp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;setIp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set ip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As the functions had become so trivial I decided to remove them entirely and in stead
export the lenses for calling code to use.&lt;/p&gt;
&lt;p&gt;The previously 130+ lines of code module became:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{-&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# LANGUAGE TemplateHaskell #&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-}&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Intcode.Data
    ( &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;-- Intcode Lenses&lt;/span&gt;
    , &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;
    , &lt;span style=&#34;color:#a6e22e&#34;&gt;code&lt;/span&gt;
    , &lt;span style=&#34;color:#a6e22e&#34;&gt;ip&lt;/span&gt;
    , &lt;span style=&#34;color:#a6e22e&#34;&gt;rb&lt;/span&gt;
    , &lt;span style=&#34;color:#a6e22e&#34;&gt;output&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;-- init&lt;/span&gt;
    , &lt;span style=&#34;color:#a6e22e&#34;&gt;newIC&lt;/span&gt;
    ) &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Lens.Micro.Platform (&lt;span style=&#34;color:#a6e22e&#34;&gt;makeLenses&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;over&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.Sequence &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; S

&lt;span style=&#34;color:#75715e&#34;&gt;--&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;-- Intcode data&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;--&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt;
  { _input&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;]
  , _code &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Seq&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;-- ip: Instruction Pointer&lt;/span&gt;
  , _ip&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;-- rb: Relative Base&lt;/span&gt;
  , _rb&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
  , _output&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;]
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;deriving&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;Show&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Eq&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;makeLenses&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&amp;#39;Intcode&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;newIC&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Seq&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;newIC&lt;/span&gt; newCode newInput &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt;{
  _input &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newInput,
  _code &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newCode,
  _ip &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
  _rb &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
  _output &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;[]&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(I also &lt;a href=&#34;#using-sequence-to-model-intcode&#34;&gt;refactored the intcode data to be held in a Sequence&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;This basic use of lenses with: auto-generation, getting, setting, and modifying
seems an obvious win for whenever I&amp;rsquo;m defining my own data aggregate like this.
When I have types nested inside types, lenses&amp;rsquo; composability will come in
handy.  I think it&amp;rsquo;s going to be my default approach in future.&lt;/p&gt;
&lt;p&gt;I looked through a couple of my other solutions to see where I had defined some
non-trivial aggregation of data where I could clean up the code with lenses.
My solutions to &lt;a href=&#34;https://adventofcode.com/2019/day/11&#34;&gt;Day 11&lt;/a&gt; and &lt;a href=&#34;https://adventofcode.com/2019/day/13&#34;&gt;Day 13&lt;/a&gt; both followed the same
pattern:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Defined the state that matters in a type, &lt;code&gt;s&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;Write a &amp;ldquo;step function&amp;rdquo; to progress that state, of the form &lt;code&gt;s -&amp;gt; (a, s)&lt;/code&gt;,
where &lt;code&gt;a&lt;/code&gt; is some output of the computation,&lt;/li&gt;
&lt;li&gt;Wrap that in &lt;a href=&#34;https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-State-Lazy.html&#34;&gt;the State Monad&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;And recurse, until some condition is met.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell-2/&#34;&gt;Part 2&lt;/a&gt; covers these solutions in more detail.&lt;/p&gt;
&lt;p&gt;I started to look at refactoring these solutions to use lenses.  But the &amp;ldquo;step
functions&amp;rdquo; were pretty much the only places lenses could be applied, and these
functions did a &amp;ldquo;bulk update&amp;rdquo; of the state where every record is being changed.
In this cases, I think the record syntax looked clearer than a long chain of
lenses.&lt;/p&gt;
&lt;h2 id=&#34;deriving-default&#34;&gt;Deriving Default&lt;/h2&gt;
&lt;p&gt;While I was &lt;a href=&#34;#lenses&#34;&gt;refactoring the intcode solution to use lenses&lt;/a&gt; to
access fields in the &lt;code&gt;Intcode&lt;/code&gt; type, I also wanted to refactor the &amp;ldquo;new&amp;rdquo;
function, so it wasn&amp;rsquo;t calling the record functions, now prepended with an
underscore, directly.&lt;/p&gt;
&lt;p&gt;In Rust I&amp;rsquo;d do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#[&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;derive(Default)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;SomeData&lt;/span&gt; {
    foo: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;,
    bar: String,
    baz: Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;impl&lt;/span&gt; SomeData {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;new&lt;/span&gt;(bar: String) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Self&lt;/span&gt; {
        Self {
            bar,
            ..Default::default()
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(&lt;a href=&#34;https://play.rust-lang.org/?version=stable&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=b15e306d979834af9ca6fe13d48aacc4&#34;&gt;This code in Rust playground&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;I was hoping to achieve this for my &lt;code&gt;Intcode&lt;/code&gt; type, with something similar in
Haskell like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;--&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;-- DOES NOT COMPILE&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;--&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;{-&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# LANGUAGE TemplateHaskell #&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-}&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Lens.Micro.Platform (&lt;span style=&#34;color:#a6e22e&#34;&gt;makeLenses&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.Sequence &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; S
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Data.Default

&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt;
  { _input&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;]
  , _code &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Seq&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
  , _ip&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
  , _rb&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
  , _output&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;]
  } &lt;span style=&#34;color:#66d9ef&#34;&gt;deriving&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;Show&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Eq&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Default&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;makeLenses&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&amp;#39;Intcode&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;newIC&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Seq&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;newIC&lt;/span&gt; c i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set code c &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; set input i &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; def
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This failed to compile with:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;error:
    • Can&#39;t make a derived instance of ‘Default Intcode’:
        ‘Default’ is not a stock derivable class (Eq, Show, etc.)
        Try enabling DeriveAnyClass
    • In the data declaration for ‘Intcode’
   |
29 |   } deriving(Show, Eq, Default)
   |                        ^^^^^^^
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So I included the &lt;code&gt;DeriveAnyClass&lt;/code&gt; language extension, then:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; error:
    • No instance for (GHC.Generics.Generic Intcode)
        arising from the &#39;deriving&#39; clause of a data type declaration
      Possible fix:
        use a standalone &#39;deriving instance&#39; declaration,
          so you can specify the instance context yourself
    • When deriving the instance for (Default Intcode)
   |
29 |   } deriving(Show, Eq, Default)
   |                        ^^^^^^^
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;GHC.Generics.Generic&lt;/code&gt;, I can &amp;ldquo;hoogle&amp;rdquo; that. Following a few links lead me to
the &lt;a href=&#34;http://hackage.haskell.org/package/generic-deriving-1.13.1/docs/Generics-Deriving-Default.html&#34;&gt;Generics.Deriving.Default&lt;/a&gt; module.&lt;/p&gt;
&lt;p&gt;After some fighting with the compiler and adding a bunch of language extensions
that it was asking me to, one by one, I realised this isn&amp;rsquo;t what I want.  This
module appears to be a way to derive a default implementation of some class
instances rather than deriving the ability to default the value of type
&lt;code&gt;Intcode&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Going back to the last error I tried also deriving &lt;code&gt;Generic&lt;/code&gt;, as that was shown
in the examples in &lt;a href=&#34;http://hackage.haskell.org/package/generic-deriving-1.13.1/docs/Generics-Deriving-Default.html&#34;&gt;Generics.Deriving.Default&lt;/a&gt;, and examples on the
homepage of the &lt;a href=&#34;https://hackage.haskell.org/package/data-default-extra&#34;&gt;data-default-extra&lt;/a&gt; which I also looked at while
googling around.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;error:
    • Can&#39;t make a derived instance of ‘Generic Intcode’:
        You need DeriveGeneric to derive an instance for this class
    • In the data declaration for ‘Intcode’
   |
32 |   deriving(Generic, Default, Show, Eq)
   |
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I was anticipating another merry-go-round of the compiler telling me to add
language extensions one by one, but adding &lt;code&gt;DeriveGeneric&lt;/code&gt; made this work.&lt;/p&gt;
&lt;p&gt;The finished article looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{-&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# LANGUAGE TemplateHaskell #&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;{-&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# LANGUAGE DeriveGeneric, DeriveAnyClass #&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Lens.Micro.Platform (&lt;span style=&#34;color:#a6e22e&#34;&gt;makeLenses&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;set&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.Sequence &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; S
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; GHC.Generics (&lt;span style=&#34;color:#66d9ef&#34;&gt;Generic&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Data.Default (&lt;span style=&#34;color:#66d9ef&#34;&gt;Default&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;def&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt;
  { _input&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;]
  , _code &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Seq&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;-- ip: Instruction Pointer&lt;/span&gt;
  , _ip&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;-- rb: Relative Base&lt;/span&gt;
  , _rb&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
  , _output&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;]
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;deriving&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;Generic&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Default&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Show&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Eq&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;makeLenses&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#39;&amp;#39;Intcode&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;newIC&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Seq&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;newIC&lt;/span&gt; c i &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; set code c &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; set input i &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; def
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So deriving a &lt;code&gt;Default&lt;/code&gt; instance isn&amp;rsquo;t quite as easy as in Rust, and took a bit
of playing around, but I&amp;rsquo;m happy that it was reasonably simple once I worked it
out.&lt;/p&gt;
&lt;h2 id=&#34;replacing-lists-with-vectors&#34;&gt;Replacing Lists with Vectors&lt;/h2&gt;
&lt;p&gt;My solution to &lt;a href=&#34;https://adventofcode.com/2019/day/10&#34;&gt;Day 10&lt;/a&gt; involved &lt;em&gt;a lot&lt;/em&gt; of manipulating lists.  There
were &lt;code&gt;fmap&lt;/code&gt;s, zips, folds, concats, all over the place.  Chances are, as with
the rest of the solutions I&amp;rsquo;ve revisited, this logic could be simplified
somewhat.  But with it as it was, I saw it as a good exercise to convert to
using Vectors and see what the result was.&lt;/p&gt;
&lt;p&gt;Firstly: which Vector? The elements are of type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Point&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Point&lt;/span&gt;
  { px &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
  , py &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
  , pAst &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Bool&lt;/span&gt;
  }
  &lt;span style=&#34;color:#66d9ef&#34;&gt;deriving&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;Show&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Eq&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Ord&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;which isn&amp;rsquo;t a member of &lt;code&gt;Prim&lt;/code&gt; or &lt;code&gt;Storable&lt;/code&gt;, so we need a &lt;a href=&#34;https://hackage.haskell.org/package/vector-0.12.1.2/docs/Data-Vector.html&#34;&gt;boxed Vector&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Importing boxed vectors:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.Vector &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; V
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I set out making a copy of each function, &lt;code&gt;functionName&#39;&lt;/code&gt;, which worked on
Vectors instead of Lists. Once they all compiled, I switched &lt;code&gt;main&lt;/code&gt; over to
using Vectors.&lt;/p&gt;
&lt;p&gt;As the boxed &lt;code&gt;Vector&lt;/code&gt; is a member of a lot of the same typeclasses, &lt;code&gt;Funtor&lt;/code&gt;,
&lt;code&gt;Monad&lt;/code&gt;, &lt;code&gt;Foldable&lt;/code&gt;, etc, a fair amount of the code could stay the same.&lt;/p&gt;
&lt;p&gt;For the cases where it couldn&amp;rsquo;t, there was generally a function from
&lt;a href=&#34;https://hackage.haskell.org/package/vector-0.12.1.2/docs/Data-Vector.html&#34;&gt;Data.Vector&lt;/a&gt; that did the job.&lt;/p&gt;
&lt;p&gt;Where I was previously providing some data with coordinates by zipping the List
with integers:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;zip&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I was able to instead call &lt;a href=&#34;https://hackage.haskell.org/package/vector-0.12.1.2/docs/Data-Vector.html#v:indexed&#34;&gt;&lt;code&gt;indexed&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;indexed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There was another place where I was putting a single value, &lt;code&gt;p&lt;/code&gt;, in a List:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;[p]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I went with &lt;a href=&#34;https://hackage.haskell.org/package/vector-0.12.1.2/docs/Data-Vector.html#v:singleton&#34;&gt;&lt;code&gt;singleton&lt;/code&gt;&lt;/a&gt; for the vector case:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;singleton p
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I could have also leveraged &lt;code&gt;Vector&lt;/code&gt;&#39;s &lt;code&gt;Applicative&lt;/code&gt; or &lt;code&gt;Monad&lt;/code&gt; instances with
&lt;code&gt;pure p&lt;/code&gt; or &lt;code&gt;return p&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;There were a few places where I&amp;rsquo;d made use of &lt;a href=&#34;https://wiki.haskell.org/List_comprehension&#34;&gt;List comprehensions&lt;/a&gt;.
Replacing their usage with &lt;code&gt;fmap&lt;/code&gt; and &lt;code&gt;filter&lt;/code&gt; was fairly straight forward.  In
once case it made the code much simpler.  I had a function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;ps &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [p&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;p&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt;ps, pAst p])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;which instead could be:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;(filter pAst)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;When I learned a bit of Haskell a few years ago I absolutely lived off List
comprehensions.  Perhaps because I was coming from Python at the time, and it
was a point of familiarity.  These days Rust is my primary language and I&amp;rsquo;m
much more comfortable with maps and filters and the like.  I&amp;rsquo;ve hardly used
List comprehensions this time around and I haven&amp;rsquo;t really missed them.  In fact
when I first started writing Rust I came across the &lt;a href=&#34;https://crates.io/crates/cute&#34;&gt;cute&lt;/a&gt; crate that
lets you write Python style list comprehensions in Rust via a macro.  I liked
this, but after some code review feedback saying &amp;ldquo;just get good at the Rust way
of doing it&amp;rdquo;, I realised I was only holding onto this as a safety blanket,
so let it go.&lt;/p&gt;
&lt;p&gt;I was thinking that I was mostly over List comprehensions and wouldn&amp;rsquo;t use them
a huge amount going forward.  But then I found this on the internet: &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/-/wikis/monad-comprehensions&#34;&gt;Monad
comprehensions&lt;/a&gt;! I&amp;rsquo;ve got to give these a spin at some point!&lt;/p&gt;
&lt;p&gt;As with &lt;a href=&#34;#no-more-strings&#34;&gt;converting usages of &lt;code&gt;String&lt;/code&gt; to &lt;code&gt;Text&lt;/code&gt;&lt;/a&gt;, this went fairly
smoothly.  A lot of things work the same and for what isn&amp;rsquo;t the same &lt;a href=&#34;https://hackage.haskell.org/package/vector-0.12.1.2/docs/Data-Vector.html&#34;&gt;the
documentation&lt;/a&gt; is pretty good. My one complaint with the docs are that I
wish related modules&amp;rsquo; docs linked to each other by default. I found myself
re-finding the package page on &lt;a href=&#34;https://hackage.haskell.org/&#34;&gt;Hackage&lt;/a&gt; and following the link to the
other module&amp;rsquo;s docs from there.&lt;/p&gt;
&lt;h3 id=&#34;performance&#34;&gt;Performance&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s see what effect this change had on memory usage.  Running the solution
using Lists:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack --resolver lts-15.4 ghc --package diagrams-lib --package statistics -- day10.hs -O2 &amp;amp;&amp;amp; ./day10 +RTS -s
...
problem output
...
     344,585,704 bytes allocated in the heap
      22,319,112 bytes copied during GC
         333,584 bytes maximum residency (2 sample(s))
          29,216 bytes maximum slop
               0 MB total memory in use (0 MB lost due to fragmentation)

                                     Tot time (elapsed)  Avg pause  Max pause
  Gen  0       329 colls,     0 par    0.015s   0.015s     0.0000s    0.0002s
  Gen  1         2 colls,     0 par    0.000s   0.000s     0.0002s    0.0002s

  INIT    time    0.000s  (  0.000s elapsed)
  MUT     time    0.121s  (  0.121s elapsed)
  GC      time    0.015s  (  0.015s elapsed)
  EXIT    time    0.000s  (  0.000s elapsed)
  Total   time    0.136s  (  0.136s elapsed)

  %GC     time       0.0%  (0.0% elapsed)

  Alloc rate    2,849,888,381 bytes per MUT second

  Productivity  88.8% of total user, 88.9% of total elapsed
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And then the solution refactored to use Vectors:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack --resolver lts-15.4 ghc --package diagrams-lib --package statistics -- day10vec.hs -O2 &amp;amp;&amp;amp; ./day10vec +RTS -s
...
problem output
...
     509,421,528 bytes allocated in the heap
      38,949,152 bytes copied during GC
         298,760 bytes maximum residency (4 sample(s))
          29,320 bytes maximum slop
               0 MB total memory in use (0 MB lost due to fragmentation)

                                     Tot time (elapsed)  Avg pause  Max pause
  Gen  0       487 colls,     0 par    0.027s   0.029s     0.0001s    0.0008s
  Gen  1         4 colls,     0 par    0.001s   0.001s     0.0003s    0.0008s

  INIT    time    0.000s  (  0.000s elapsed)
  MUT     time    0.166s  (  0.172s elapsed)
  GC      time    0.028s  (  0.030s elapsed)
  EXIT    time    0.000s  (  0.000s elapsed)
  Total   time    0.195s  (  0.203s elapsed)

  %GC     time       0.0%  (0.0% elapsed)

  Alloc rate    3,065,812,448 bytes per MUT second

  Productivity  85.3% of total user, 84.9% of total elapsed
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So it performed worse with Vectors.  Taking a look at the code, I saw two
reasons why this might be.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://adventofcode.com/2019/day/10&#34;&gt;The problem&lt;/a&gt; deals with line of sight between points on a
grid.  Part of my solution sorted the points of interest into the rays they
are on from a certain point, defined by their angle from the vertical.  It
did this by folding over a &lt;code&gt;Set&lt;/code&gt; of the points of interest to construct
a &lt;code&gt;Map&lt;/code&gt; of points on each ray.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;raysFromPoint&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Point&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Set&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Set&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Point&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Rays&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;raysFromPoint&lt;/span&gt; p0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; foldl (&lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;rays p &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;insertWith (&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;) (angleFromPoints p0 p) [p] rays) &lt;span style=&#34;color:#66d9ef&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;empty
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and in the Vector implementation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;raysFromPoint&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Point&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Set&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Set&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Point&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Rays&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;raysFromPoint&lt;/span&gt; p0 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Set&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;foldl (&lt;span style=&#34;color:#a6e22e&#34;&gt;\&lt;/span&gt;rays p &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;insertWith (&lt;span style=&#34;color:#66d9ef&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.++&lt;/span&gt;) (angleFromPoints p0 p) (&lt;span style=&#34;color:#66d9ef&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;singleton p) rays) &lt;span style=&#34;color:#66d9ef&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;empty
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;where &lt;code&gt;angleFromPoints&lt;/code&gt; gives the angle between the vertical and the line between
two points.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;angleFromPoints&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Point&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Point&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Angle&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Float&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the List case the &lt;code&gt;(++)&lt;/code&gt; is quite efficient.  The left hand side is always a
list with a single element, so Haskell only needs to allocate a new element
which points to the existing list as its tail.&lt;/p&gt;
&lt;p&gt;For Vectors, &lt;code&gt;(++)&lt;/code&gt; is &lt;a href=&#34;https://hackage.haskell.org/package/vector-0.12.1.2/docs/Data-Vector.html#v:-43--43-&#34;&gt;of order O(m + n)&lt;/a&gt; as the whole new combined
vector has to be allocated.  Granted, &lt;code&gt;m&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt; in this case, but that leaves
us with an operation of order &lt;code&gt;n&lt;/code&gt; where previously it was constant complexity.&lt;/p&gt;
&lt;p&gt;I also had to convert the Vector to a List in two places using &lt;a href=&#34;https://hackage.haskell.org/package/vector-0.12.1.2/docs/Data-Vector.html#v:toList&#34;&gt;&lt;code&gt;toList&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I couldn&amp;rsquo;t see a way to directly turn a Vector into a Set so resorted to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Set&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;fromList &lt;span style=&#34;color:#66d9ef&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;toList
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I wanted to flatten a &lt;code&gt;Vector Vector Points&lt;/code&gt; to &lt;code&gt;Vector Points&lt;/code&gt;, but
&lt;a href=&#34;https://hackage.haskell.org/package/vector-0.12.1.2/docs/Data-Vector.html#v:concat&#34;&gt;&lt;code&gt;V.concat&lt;/code&gt;&lt;/a&gt; has signature &lt;code&gt;[ Vector a ] =&amp;gt; Vector a&lt;/code&gt;.  I couldn&amp;rsquo;t
find another way of doing that so went with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;concat &lt;span style=&#34;color:#66d9ef&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;toList
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;UPDATE: It looks as if using &lt;a href=&#34;https://hackage.haskell.org/package/vector-0.12.1.2/docs/Data-Vector.html#v:concatMap&#34;&gt;&lt;code&gt;V.concatMap&lt;/code&gt;&lt;/a&gt; would have avoided the
need to use the second of these &lt;code&gt;V.formList&lt;/code&gt;s.  What effect that would have on
performance, I don&amp;rsquo;t know.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Looking at the input data, non of the rays are going to have more than around
10 points on them, so these Vectors aren&amp;rsquo;t going to ever be that large, but
both of these things are work that isn&amp;rsquo;t being done in the solution with Lists
and will come at a cost.&lt;/p&gt;
&lt;p&gt;Are there any real savings? There might be some savings from Vector&amp;rsquo;s
strictness, but from what I can tell, Vector&amp;rsquo;s really out perform Lists when
they&amp;rsquo;re being indexed.  This solution wasn&amp;rsquo;t doing any indexing.&lt;/p&gt;
&lt;h2 id=&#34;using-sequence-to-model-intcode&#34;&gt;Using Sequence to Model Intcode&lt;/h2&gt;
&lt;p&gt;From the offset, when I first implemented a solution to &lt;a href=&#34;https://adventofcode.com/2019/day/2&#34;&gt;Day 2&lt;/a&gt;, which
introduces the problem of implementing an intcode computer, I knew storing the
intcode data in a List was going to be bad for performance as the intcode data
needed to be reference by index &lt;em&gt;a lot&lt;/em&gt; and have values at specific indices
updated.&lt;/p&gt;
&lt;p&gt;I made a note to come back to it later, figuring that as the intcode computer
implementation is built up over days 2, 5, 7, and 9, after implementing them
I know all the things I need to do with the data, and choose a replacement for
List then.  This did mean that I&amp;rsquo;d built up a solution around using Lists,
but I backed myself to keeps things modular.&lt;/p&gt;
&lt;p&gt;After considering a few options, I decided I liked what I saw in &lt;a href=&#34;https://hackage.haskell.org/package/containers-0.6.2.1/docs/Data-Sequence.html&#34;&gt;&lt;code&gt;Data.Sequence&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Logarithmic-time access to any element&amp;rdquo;,&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Logarithmic-time concatenation&amp;rdquo;,&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Constant-time access to both the front and the rear&amp;rdquo; - appending and prepending,&lt;/li&gt;
&lt;li&gt;The ability to change a value at an index with &lt;code&gt;update&lt;/code&gt;, and&lt;/li&gt;
&lt;li&gt;A List-like interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The refactor went pretty smoothly.  The List-like interface meant a lot of
functions could be replaced like-for-like and those that couldn&amp;rsquo;t had a fairly
obvious replacement found in &lt;a href=&#34;https://hackage.haskell.org/package/containers-0.6.2.1/docs/Data-Sequence.html&#34;&gt;the docs&lt;/a&gt;.  It having instances of
&lt;code&gt;Functor&lt;/code&gt;, &lt;code&gt;Foldable&lt;/code&gt;, and &lt;code&gt;Monad&lt;/code&gt; meant a lot of the code could stay the same.&lt;/p&gt;
&lt;p&gt;The part of the code that looked after updating values in the intcode,
according to the rules set in the problem, ended up looking a lot cleaner.&lt;/p&gt;
&lt;p&gt;Where in the implementation with lists we had:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;replaceNth&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Integral&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MonadFail&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m [a]
&lt;span style=&#34;color:#a6e22e&#34;&gt;replaceNth&lt;/span&gt; n newVal xs
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fail &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Cannot replace element with negative index&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; length xs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; return &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; replaceNthInner n newVal xs
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; length xs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; return &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; xs &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; [newVal]
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; length xs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; return &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; xs &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;(n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; length xs)]] &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; [newVal]

&lt;span style=&#34;color:#a6e22e&#34;&gt;replaceNthInner&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [a]
&lt;span style=&#34;color:#a6e22e&#34;&gt;replaceNthInner&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;[]&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;replaceNthInner&lt;/span&gt; n newVal (x&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;xs)
   &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; newVal&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;xs
   &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; otherwise &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x&lt;span style=&#34;color:#66d9ef&#34;&gt;:&lt;/span&gt;replaceNthInner (n&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) newVal xs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This was cleaned up, and made to match the sequence nomenclature:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Integral&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MonadFail&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Seq&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m (&lt;span style=&#34;color:#66d9ef&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Seq&lt;/span&gt; a)
&lt;span style=&#34;color:#a6e22e&#34;&gt;update&lt;/span&gt; n newVal xs
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fail &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Cannot replace element with negative index&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;length xs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; return &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;update n newVal xs
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;length xs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; return &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; xs &lt;span style=&#34;color:#66d9ef&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.|&amp;gt;&lt;/span&gt; newVal
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;length xs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; return &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; flip (&lt;span style=&#34;color:#66d9ef&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.|&amp;gt;&lt;/span&gt;) newVal &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; xs &lt;span style=&#34;color:#66d9ef&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&amp;gt;&amp;lt;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;replicate (n &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;S&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;length xs) &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;S.update&lt;/code&gt; brought a lot of this clean up as it removed the need for
&lt;code&gt;replaceNthInner&lt;/code&gt;.  The first class ability to append, with &lt;code&gt;S.|&amp;gt;&lt;/code&gt;, also got
rid of the &lt;code&gt;++ [newVal]&lt;/code&gt; which I&amp;rsquo;ve always found a bit nasty.&lt;/p&gt;
&lt;p&gt;I didn&amp;rsquo;t examine what the performance effect was of this refactor. It&amp;rsquo;s on
my bucket list to read up on proper performance profiling.  When I do, this
would be a good test case to come back to and benchmark.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;some-failed-attempts&#34;&gt;Some Failed Attempts&lt;/h1&gt;
&lt;p&gt;There were some things that I had a go at, but after realising I&amp;rsquo;d bitten off
more than I wanted to chew at that moment, left them as something to come back
to, or tried something else.&lt;/p&gt;
&lt;h2 id=&#34;generalising-over-vectors&#34;&gt;Generalising over Vectors&lt;/h2&gt;
&lt;p&gt;After converting my &lt;a href=&#34;https://adventofcode.com/2019/day/10&#34;&gt;Day 10&lt;/a&gt; solution from using Lists to boxed Vectors,
and finding the &lt;a href=&#34;#performance&#34;&gt;performance to be worse&lt;/a&gt;, I was going to see
what the effect of refactoring the solution to use &lt;a href=&#34;https://hackage.haskell.org/package/vector-0.12.1.2/docs/Data-Vector-Unboxed.html&#34;&gt;unboxed Vectors&lt;/a&gt;
would be.&lt;/p&gt;
&lt;p&gt;My plan for this was to refactor the solution to be generic over vector types
by writing it in terms of &lt;a href=&#34;https://hackage.haskell.org/package/vector-0.12.1.2/docs/Data-Vector-Generic.html&#34;&gt;Data.Vector.Generic&lt;/a&gt;, and then swapping
the concrete vector type used, at (hopefully) the single point where that was
defined.&lt;/p&gt;
&lt;p&gt;I made a start on this, and I&amp;rsquo;m reasonably happy with a process of swapping out
the module behind the qualified import, and where there are compile errors,
using &lt;a href=&#34;https://hackage.haskell.org/package/vector-0.12.1.2/docs/Data-Vector-Generic.html&#34;&gt;the documentation&lt;/a&gt; to find an equivalent function.  The
only issue was there was a lot of this to do, and I lost the will to do it somewhat.
I think a better approach will be: next time I&amp;rsquo;m writing something to use
Vectors, try to write it with generic Vectors and see where that leads.&lt;/p&gt;
&lt;p&gt;There was one specific thing I hit, that I fixed, but didn&amp;rsquo;t fully
understand. In the boxed Vector solution I defined the &amp;ldquo;rays&amp;rdquo; that different
grid points lived on with a map of angle from the vertical to a Vector of
grid points (&lt;code&gt;Point&lt;/code&gt;).  I had the type alias:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Rays&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Map&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Angle&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Float&lt;/span&gt;) (&lt;span style=&#34;color:#66d9ef&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Vector&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Point&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In making this generic over vectors, I changed this to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Rays&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Vector&lt;/span&gt; v &lt;span style=&#34;color:#66d9ef&#34;&gt;Point&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Map&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Angle&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Float&lt;/span&gt;) (v &lt;span style=&#34;color:#66d9ef&#34;&gt;Point&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;which worked just fine in all but 3 functions&amp;rsquo; type signatures. I had some functions
to wrap these &amp;ldquo;rays&amp;rdquo; in the &lt;a href=&#34;https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-State-Lazy.html&#34;&gt;State monad&lt;/a&gt;, with one function providing
the &lt;code&gt;s -&amp;gt; (a, s)&lt;/code&gt;, where &lt;code&gt;s&lt;/code&gt; is &amp;ldquo;the rays&amp;rdquo; and another to wrap that in &lt;code&gt;state&lt;/code&gt;,
and a third to recursively evolve the state until a condition is met.&lt;/p&gt;
&lt;p&gt;Taking a look at the &amp;ldquo;&lt;code&gt;s -&amp;gt; (a, s)&lt;/code&gt; function&amp;rdquo;, called &lt;code&gt;shootInner&lt;/code&gt;, the compiler
complained about the type signature:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;shootInner&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Vector&lt;/span&gt; v &lt;span style=&#34;color:#66d9ef&#34;&gt;Point&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Rays&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;  ((&lt;span style=&#34;color:#66d9ef&#34;&gt;Point&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;Rays&lt;/span&gt; v)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;error:
    • Illegal qualified type:
        V.Vector v Point =&amp;gt; Map.Map (Angle Float) (v Point)
      GHC doesn&#39;t yet support impredicative polymorphism
    • In the expansion of type synonym ‘Rays’
      In the type signature:
        shootInner :: V.Vector v Point =&amp;gt;
                      Int -&amp;gt; Rays v -&amp;gt; ((Point, Int), Rays v)
   |
66 | shootInner ::  V.Vector v Point =&amp;gt; Int -&amp;gt; Rays v -&amp;gt;  ((Point, Int), Rays v)
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The same complaint was levied against the other two functions with signatures:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;shoot&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Vector&lt;/span&gt; v &lt;span style=&#34;color:#66d9ef&#34;&gt;Point&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;State&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Rays&lt;/span&gt; v) (&lt;span style=&#34;color:#66d9ef&#34;&gt;Point&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;shootUntil&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Vector&lt;/span&gt; v &lt;span style=&#34;color:#66d9ef&#34;&gt;Point&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;State&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Rays&lt;/span&gt; v) &lt;span style=&#34;color:#66d9ef&#34;&gt;Point&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(you can read &lt;a href=&#34;https://adventofcode.com/2019/day/10&#34;&gt;the problem description&lt;/a&gt; for the context behind the names,
basically you spin round and shoot asteroids that are located on the rays).&lt;/p&gt;
&lt;p&gt;I reduced the script around the error to it&amp;rsquo;s simplest form to try and
isolate the source of the error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;#!/&lt;/span&gt;usr&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;bin&lt;span style=&#34;color:#f92672&#34;&gt;/&lt;/span&gt;env stack
&lt;span style=&#34;color:#75715e&#34;&gt;-- stack --resolver lts-15.4 script --package containers --package vector&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;{-&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# LANGUAGE RankNTypes #&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-}&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;{-&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# LANGUAGE FlexibleContexts #&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-}&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.Map.Strict          &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; Map
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.Vector.Generic      &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; V

&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IO&lt;/span&gt; ()
&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; print &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Hello&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Foo&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Vector&lt;/span&gt; v &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Map&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; (v &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Vector&lt;/span&gt; v &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Foo&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Foo&lt;/span&gt; v
&lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; undefined

&lt;span style=&#34;color:#a6e22e&#34;&gt;baz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;V&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Vector&lt;/span&gt; v &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Foo&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt;  ((&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;), &lt;span style=&#34;color:#66d9ef&#34;&gt;Foo&lt;/span&gt; v)
&lt;span style=&#34;color:#a6e22e&#34;&gt;baz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; undefined
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I hit the same error about &amp;ldquo;impredicative polymorphism&amp;rdquo; here a well.&lt;/p&gt;
&lt;p&gt;After a bit of changing things to see what happens, I found that removing
the constraint from the type alias allowed this to compile:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Foo&lt;/span&gt; v &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Map&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Map&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; (v &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I did a bit of googling around &amp;ldquo;&lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc/-/wikis/impredicative-polymorphism&#34;&gt;impredicative polymorphism&lt;/a&gt;&amp;rdquo; and it looks like
I&amp;rsquo;ve got a bit of reading to do before I understand this one, and why it was
hit for these functions but not others that both take and return &lt;code&gt;Rays v&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For now my take away is: &amp;ldquo;don&amp;rsquo;t put constraints in type aliases&amp;rdquo;.&lt;/p&gt;
&lt;h2 id=&#34;mutable-vector-to-model-intcode&#34;&gt;Mutable Vector to Model Intcode&lt;/h2&gt;
&lt;p&gt;Before I settled on &lt;a href=&#34;#using-sequence-to-model-intcode&#34;&gt;choosing a Sequence to represent the intcode
program&lt;/a&gt;, I was looking into representing it in a &lt;a href=&#34;https://hackage.haskell.org/package/vector-0.12.1.2/docs/Data-Vector-Mutable.html&#34;&gt;mutable Vector&lt;/a&gt;
as elements have to be changed a lot, I thought that might be more efficient.&lt;/p&gt;
&lt;p&gt;But unlike with Sequence, where I was able to pretty much swap out Lists for
Sequences, changing a few function calls, but otherwise hardly changing the
surrounding functions or structure of the program, with mutable Vectors I&amp;rsquo;d
need a fair amount of refactoring.  The &lt;a href=&#34;https://hackage.haskell.org/package/vector-0.12.1.2/docs/Data-Vector-Mutable.html#g:10&#34;&gt;functions that access
elements&lt;/a&gt; all return a monad that would need handling.&lt;/p&gt;
&lt;p&gt;In this case as well I thought a better approach would be to earmark mutable
vectors as something to try when attempting a future problem, rather than
trying to do a big refactor of an existing solution.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;future-improvements&#34;&gt;Future Improvements&lt;/h1&gt;
&lt;h2 id=&#34;no-prelude-and-rio&#34;&gt;No Prelude and RIO&lt;/h2&gt;
&lt;p&gt;Now that I&amp;rsquo;ve refactored a fair few of my solutions to not use &lt;code&gt;String&lt;/code&gt; and
&lt;code&gt;List&lt;/code&gt;, I&amp;rsquo;m hardly using Prelude at all in some of them.&lt;/p&gt;
&lt;p&gt;I think in next Advent of Code problem I attempt, I&amp;rsquo;ll start by putting&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;{-&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# LANGUAGE NoImplicitPrelude #&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;at the top of the file and using &lt;a href=&#34;https://hackage.haskell.org/package/rio&#34;&gt;RIO&lt;/a&gt; as a Prelude replacement and
build the solution inside the RIO monad.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;what-next&#34;&gt;What Next?&lt;/h1&gt;
&lt;p&gt;More Advent of Code I guess&amp;hellip;&lt;/p&gt;
&lt;p&gt;Now I&amp;rsquo;ve done a &amp;ldquo;big refactor&amp;rdquo; of my existing solutions, the next thing to do
would be to crack on with some new Advent of Code problems.  I&amp;rsquo;m not in any
particular rush to get through them.  I&amp;rsquo;m finding them a decent backdrop to
learn things with, and the sooner I finish them, the sooner I have to look
elsewhere for fresh problems.  I&amp;rsquo;m definitely in the state of mind of seeing
how much I can learn from doing a solution before moving onto the next one.&lt;/p&gt;
&lt;p&gt;In the process of attempting more problems I&amp;rsquo;m definitely going to return to &lt;a href=&#34;https://tech.fpcomplete.com/haskell/learn&#34;&gt;FP
Complete&amp;rsquo;s Tutorials&lt;/a&gt;, both for when I&amp;rsquo;m looking to learn something
specific that they cover, and for when I&amp;rsquo;m speculating on what might be useful
for an Advent of Code problem. I see they have a tutorial on performance
profiling which I&amp;rsquo;m keen to look into.  In this blog post I&amp;rsquo;ve not been
particularly rigorous when commenting on performance, and at some point I&amp;rsquo;d
like to do some proper benchmarking on the choice of types in some solutions.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;All the changes I&amp;rsquo;ve made are recorded in &lt;a href=&#34;https://github.com/tarquin-the-brave/aoc-19-haskell/pull/1/files&#34;&gt;this monster pull request&lt;/a&gt;
(which seems to have done a decent job of following when I changed entire Stack
project directories into single page scripts).&lt;/em&gt; 💃&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;By this stage, and really by the time I got to &lt;a href=&#34;https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell-2/&#34;&gt;Part 2&lt;/a&gt;, I&amp;rsquo;m no
longer &amp;ldquo;Re-learning&amp;rdquo; Haskell as I&amp;rsquo;ve gone far beyond the level I got to when I
learned some Haskell a few years ago.  I started this blog series with
&amp;ldquo;re-learning&amp;rdquo;, so for continuity&amp;rsquo;s sake I&amp;rsquo;ll keep the title as it is. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
     </item>
   
     <item>
       <title>Collecting All the Errors - Rust</title>
       <link>https://tarquin-the-brave.github.io/blog/posts/collecting-all-the-errors/</link>
       <pubDate>Sat, 09 May 2020 19:00:00 +0100</pubDate>
       
       <guid>https://tarquin-the-brave.github.io/blog/posts/collecting-all-the-errors/</guid>
       <description>&lt;p&gt;A common way to handle iterating over results, &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt;, in Rust is to
use &lt;code&gt;collect()&lt;/code&gt; to collect an iterator of results into a result.  To borrow the
&lt;a href=&#34;https://doc.rust-lang.org/stable/rust-by-example/error/iter_result.html#fail-the-entire-operation-with-collect&#34;&gt;example from Rust by Example&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; strings &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vec&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;42&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; numbers: Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,_&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string
    .into_iter()
    .map(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; s.parse::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;())
    .collect::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,_&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You only need either the type hint on &lt;code&gt;numbers&lt;/code&gt; or the turbofish on &lt;code&gt;collect&lt;/code&gt;
to coerce the iterator of results into a result.  I prefer the turbofish on
&lt;code&gt;collect&lt;/code&gt; as I feel it makes the code flow better when reading, and is what you
would do when chaining further computations.  In fact, if you&amp;rsquo;re going to use
&lt;code&gt;?&lt;/code&gt; on the collected result, you wouldn&amp;rsquo;t &lt;em&gt;need&lt;/em&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; either.&lt;/p&gt;
&lt;p&gt;I use this pattern a lot, and it&amp;rsquo;s great. It makes mapping over collections
with operations that can fail as ergonomic as applying that operation to a
single value.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You can use the &lt;code&gt;?&lt;/code&gt; operator to make the error handling almost automatic.&lt;/li&gt;
&lt;li&gt;You can use any of the other result combinators like &lt;a href=&#34;https://doc.rust-lang.org/std/result/enum.Result.html#method.and_then&#34;&gt;&lt;code&gt;and_then&lt;/code&gt;&lt;/a&gt;,
and &lt;a href=&#34;https://doc.rust-lang.org/std/result/enum.Result.html#method.map&#34;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You can chain further computations on the end of the expression.  In the
above example we could have done:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;    .collect()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;
    .into_iter()
    .map(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;n&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; n &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)
    .collect()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This pattern basically says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Go try these things, if one of them fails we&amp;rsquo;ll fail ourselves,
reporting the first error that we encounter.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Which, most of the time, is all you need.&lt;/p&gt;
&lt;p&gt;But what about when it&amp;rsquo;s not? What about when you want to collect all of the
errors when there are some?&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/rust-lang/rust-by-example/blob/master/src/error/iter_result.md#collect-all-valid-values-and-failures-with-partition&#34;&gt;very next section of Rust by Example&lt;/a&gt; shows how you can use
&lt;code&gt;partition(Result::is_ok)&lt;/code&gt; to separate the &lt;code&gt;Ok&lt;/code&gt; &amp;amp; &lt;code&gt;Err&lt;/code&gt; variants in your
iterator of results.  You could then go onto write some logic so your function
tests that the collection of errors is empty, and if not returns a result with
a collection of errors in its &lt;code&gt;Err&lt;/code&gt; variant: &lt;code&gt;Result&amp;lt;Vec&amp;lt;T&amp;gt;, Vec&amp;lt;E&amp;gt;&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;But then your entire function stack up to the point where you terminate the
need for expressing a collection of errors has to deal with returning a
collection of errors.  If you&amp;rsquo;re writing a CLI tool, that termination point
would be the point where you write all the error messages to stderr and exit,
so your whole program is likely to need this error handling. This ruins a lot
of the ergonomics of &lt;code&gt;?&lt;/code&gt; for dealing with calls to foreign methods that return
a normal &lt;code&gt;Result&amp;lt;T, E&amp;gt;&lt;/code&gt; (&lt;code&gt;where E: std::err::Error&lt;/code&gt;). Ok, you could replace all
&lt;code&gt;?&lt;/code&gt; with &lt;code&gt;.map_err(|e| vec![e])?&lt;/code&gt;, but that&amp;rsquo;s still clunky to deal with.&lt;/p&gt;
&lt;p&gt;An alternative could be to use an error type such as
&lt;a href=&#34;https://docs.rs/valid/0.3.0/valid/struct.ValidationError.html&#34;&gt;&lt;code&gt;valid::ValidationError&lt;/code&gt;&lt;/a&gt; that can model a collection of errors,
or build your own.  This is probably a better approach, but is still going to
be a bit of work to define your own error type, or integrate another crates&amp;rsquo;
error type into your application.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re building a library, this alternative is probably the right way to go
as your library will be able to return a well-typed expression of &amp;ldquo;many
errors&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;With both of these, you&amp;rsquo;re still going to be missing the ergonomics of
&lt;code&gt;collect()&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In much the same way as when building a library you might use
&lt;a href=&#34;https://docs.rs/thiserror/1.0.16/thiserror/&#34;&gt;&lt;code&gt;thiserror&lt;/code&gt;&lt;/a&gt; to define your own error types, whereas in an
application you&amp;rsquo;d be happy raising add-hoc errors with
&lt;a href=&#34;https://docs.rs/anyhow/1.0.28/anyhow/macro.anyhow.html&#34;&gt;&lt;code&gt;anyhow::anyhow&lt;/code&gt;&lt;/a&gt;: if you&amp;rsquo;re writing an application you might find
defining your own error type(s) to handle &amp;ldquo;many errors&amp;rdquo; a bit heavy weight.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve recently found myself in this exact situation while writing a CLI tool.
The tool needs to tell the user all the errors they&amp;rsquo;ve made in the file they&amp;rsquo;ve
provided, rather than just one at a time&amp;hellip; as that would be super annoying.
It doesn&amp;rsquo;t need to do any real processing of the collected errors, it only
needs to print them all to the terminal in a way that&amp;rsquo;s reasonably readable to
the user, ideally with writing as little special code as possible.&lt;/p&gt;
&lt;p&gt;To keep things as simple as possible: I wanted the ergonomics of &lt;code&gt;collect()&lt;/code&gt;;
and for my representation of &amp;ldquo;many errors&amp;rdquo; to be &amp;ldquo;nothing special&amp;rdquo;, so I can
use all the existing error handling goodies out of the box.&lt;/p&gt;
&lt;p&gt;Enter &lt;a href=&#34;https://docs.rs/beau_collector/0.2.1/beau_collector/index.html&#34;&gt;&lt;code&gt;BeauCollector&lt;/code&gt;&lt;/a&gt;.  Trait &lt;code&gt;BeauCollector&lt;/code&gt; provides method
&lt;code&gt;bcollect&lt;/code&gt; which will collect an iterator of errors into an
&lt;a href=&#34;https://docs.rs/anyhow/1.0.28/anyhow/type.Result.html&#34;&gt;&lt;code&gt;anyhow::Result&lt;/code&gt;&lt;/a&gt; with an &lt;code&gt;Err&lt;/code&gt; variant containing an ad-hoc
&lt;a href=&#34;https://docs.rs/anyhow/1.0.28/anyhow/struct.Error.html&#34;&gt;&lt;code&gt;anyhow::Error&lt;/code&gt;&lt;/a&gt; with the messages from each error in the
collection of results on a new line in the error message.&lt;/p&gt;
&lt;p&gt;Looking at our example above:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; beau_collector::BeauCollector &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; _;

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; strings &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; vec&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;7&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;42&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;one&amp;#34;&lt;/span&gt;];
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; numbers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; string
    .into_iter()
    .map(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; s.parse::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;i32&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;())
    .bcollect::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Vec&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;_&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Errors with chains of causes, have their causal chains retained by being
formatted with the &lt;a href=&#34;https://docs.rs/anyhow/1.0.28/anyhow/struct.Error.html#display-representations&#34;&gt;inline representation&lt;/a&gt; where causes are separated
by &lt;code&gt;:&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;One of the results you&amp;rsquo;re iterating over might have been the result of running
&lt;code&gt;bcollect&lt;/code&gt;.  As string concatenation is basically what we&amp;rsquo;re doing here,
&lt;code&gt;bcollect&lt;/code&gt; will represent them alongside any new errors from this layer in the
error message.  You can collect errors with &lt;code&gt;bcollect&lt;/code&gt; at various layers within
you application and they&amp;rsquo;ll all be represented in one large error at the top
level.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;bcollect&lt;/code&gt; at multiple levels and having a &lt;code&gt;main&lt;/code&gt; that returns a result:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;anyhow&lt;/span&gt;::Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; anyhow::Context &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; _;

    input_file &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; ...;

    some_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; process_input(input_file)
        .with_context(&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; format&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Errors found while processing {}&amp;#34;&lt;/span&gt;, input_file))&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

    run_application(some_data)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Can have an error output that looks like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./my-cli-tool input_file.yaml
Errors found while processing input_file.yaml

Caused by:
  &amp;quot;foo_bar&amp;quot; is not a valid name for X: underscores are not permitted

  field &amp;quot;baz&amp;quot; is missing from input data

  errors processing scale data
  :
  54 is too high for field_y
  values must be positive: value -3 given for field_z is negative.

  some other error because of: another error because of: specific problem.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The error in the &lt;code&gt;Err&lt;/code&gt; variant of the result returned by &lt;code&gt;main&lt;/code&gt; is an
&lt;a href=&#34;https://docs.rs/anyhow/1.0.28/anyhow/struct.Error.html&#34;&gt;&lt;code&gt;anyhow::Error&lt;/code&gt;&lt;/a&gt; with a message being the block seen below &amp;ldquo;Caused
by:&amp;rdquo; and a context of &amp;ldquo;Errors found while&amp;hellip;&amp;quot;.&lt;/p&gt;
&lt;p&gt;Using &lt;a href=&#34;https://docs.rs/beau_collector/0.2.1/beau_collector/index.html&#34;&gt;&lt;code&gt;BeauCollector&lt;/code&gt;&lt;/a&gt; in this way has the advantages that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Functions can return a &lt;a href=&#34;https://docs.rs/anyhow/1.0.28/anyhow/type.Result.html&#34;&gt;normal &lt;code&gt;Result&lt;/code&gt;&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;?&lt;/code&gt; can be used normally on all other &lt;code&gt;Results&lt;/code&gt; in functions,&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;main&lt;/code&gt; returns &lt;code&gt;Result&lt;/code&gt;, no special error handling is needed and the full
collection of results will appear in stderr.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are some limitations too:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Beyond placing each collected error on a newline, &lt;code&gt;bcollect&lt;/code&gt; doesn&amp;rsquo;t do any
further formatting, or reformatting when different layers&amp;rsquo; errors are
combined.  It&amp;rsquo;s left up to the error messages raised to add in some
whitespace to appear more readable than a solid block of text.&lt;/li&gt;
&lt;li&gt;While the messages from the causal chain of an error are retained you loose
some other error handling like getting the backtrace or downcasting to get
the original error back.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are currently the price you pay for the ergonomics of &lt;code&gt;bcollect&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For writing applications, you&amp;rsquo;re likely to be happy with this trade off and
find the limitations of &lt;code&gt;bcollect&lt;/code&gt; a small price to pay.&lt;/p&gt;
&lt;p&gt;For a library you might want the caller to have more options on what to do with
the many errors than building up an error message, maybe not.  Perhaps
&lt;code&gt;bcollect&lt;/code&gt; could be enhanced to return an error type that can represent a tree
of errors that can be added to as errors propagate back up the stack.  By all
means &lt;a href=&#34;https://github.com/tarquin-the-brave/beau-collector/&#34;&gt;send in a pull request or raise an issue&lt;/a&gt;.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;When I say you don&amp;rsquo;t &lt;em&gt;need&lt;/em&gt; the type hints, that is to say that the
compiler won&amp;rsquo;t need them to infer the type.  HUman readers of the code
might prefer it is there so they can more easily infer the type.  Type
hinting is also helpful when refactoring as it can catch errors. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
     </item>
   
     <item>
       <title>We All Write Monads, Whether We Know It or Not</title>
       <link>https://tarquin-the-brave.github.io/blog/posts/we-all-write-monads/</link>
       <pubDate>Mon, 04 May 2020 04:46:31 +0100</pubDate>
       
       <guid>https://tarquin-the-brave.github.io/blog/posts/we-all-write-monads/</guid>
       <description>&lt;p&gt;Recently I&amp;rsquo;ve been rebooting my Haskell by working through &lt;a href=&#34;https://adventofcode.com/2019/&#34;&gt;Advent of
Code&lt;/a&gt;, and bogging about it:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell/&#34;&gt;Re-learning Haskell with Advent of Code - Part 1&lt;/a&gt;,&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell-2/&#34;&gt;Re-learning Haskell with Advent of Code - Part 2&lt;/a&gt;,&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and it&amp;rsquo;s got me thinking.  I was quickly re-introduced to the concepts of:
Functors, Applicative Functors, Monoids, Monads, a strong type system, higher
kinded types, and functional purity, and straight away, started spotting these
patterns in the code I write every day at work (predominantly Rust with some
Bash, Python, and C++ thrown in for good measure).&lt;/p&gt;
&lt;p&gt;I find myself thinking about code I&amp;rsquo;m working with, and saying to myself, or
anyone who will listen, things like:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Ah well, this works because string concatenation behaves monoidally&amp;hellip;&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;or:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;What we&amp;rsquo;ve got here is a computational context for our data that we want to
map over&amp;hellip;&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;What this has made me realise is there&amp;rsquo;s nothing special about Haskell that
means these concepts exist where they don&amp;rsquo;t exist in other languages.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Haskell formalises data manipulation patterns that exist wherever there is
data to manipulate.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Have you ever had a &amp;ldquo;container type&amp;rdquo; for your data that you&amp;rsquo;ve iterated over?
You&amp;rsquo;ve used a functor.&lt;/p&gt;
&lt;p&gt;Have you ever encoded error handling in the data you&amp;rsquo;re using?  You&amp;rsquo;ve used
something resembling a monad.&lt;/p&gt;
&lt;p&gt;Rust&amp;rsquo;s ownership model is a formalisation of a set of memory management
patterns that a C developer might employ to attempt to write memory safe and
thread safe code.&lt;/p&gt;
&lt;p&gt;Regardless of the language we&amp;rsquo;re writing in, these data manipulation patterns
are there. The language may formalise them, it may not. By formalising data
manipulation patterns in a language, there&amp;rsquo;s the opportunity for the compiler
to tell you if you&amp;rsquo;re using them right, otherwise you&amp;rsquo;re performing these
patterns by hand.&lt;/p&gt;
&lt;p&gt;What it comes down to is:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoiZ3JhcGggVERcbiAgQVtEb2VzIHlvdXIgbGFuZ3VhZ2UgZm9ybWFsaXNlIHRoZXNlIHBhdHRlcm5zP11cbiAgQyhbVGhlIGNvbXBpbGVyIGtlZXBzIHlvdWggcmlnaHQgZmE6ZmEtdGh1bWJzLXVwXSlcbiAgQltBcmUgeW91IGF3YXJlIHlvdSdyZSB3cml0aW5nIHRoZW0gYnkgaGFuZD9dXG4gIEQoW1lvdSdsbCB3cml0ZSBtb3JlIGNvbnNpc3RlbnQsIGNvcnJlY3QsIGFuZCBtYWludGluYWJsZSBjb2RlIGZhOmZhLXRodW1icy11cF0pXG4gIEUoW0J1Z3Mgd2lsbCBoYXBwZW4gZmE6ZmEtYnVnXSlcbiAgQSAtLT58WWVzfCBDXG4gIEEgLS0-fE5vfCBCXG4gIEIgLS0-fFllc3wgRFxuICBCIC0tPiB8Tm98IEVcblx0XHQiLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ&#34;&gt;&lt;img src=&#34;https://mermaid.ink/img/eyJjb2RlIjoiZ3JhcGggVERcbiAgQVtEb2VzIHlvdXIgbGFuZ3VhZ2UgZm9ybWFsaXNlIHRoZXNlIHBhdHRlcm5zP11cbiAgQyhbVGhlIGNvbXBpbGVyIGtlZXBzIHlvdWggcmlnaHQgZmE6ZmEtdGh1bWJzLXVwXSlcbiAgQltBcmUgeW91IGF3YXJlIHlvdSdyZSB3cml0aW5nIHRoZW0gYnkgaGFuZD9dXG4gIEQoW1lvdSdsbCB3cml0ZSBtb3JlIGNvbnNpc3RlbnQsIGNvcnJlY3QsIGFuZCBtYWludGluYWJsZSBjb2RlIGZhOmZhLXRodW1icy11cF0pXG4gIEUoW0J1Z3Mgd2lsbCBoYXBwZW4gZmE6ZmEtYnVnXSlcbiAgQSAtLT58WWVzfCBDXG4gIEEgLS0-fE5vfCBCXG4gIEIgLS0-fFllc3wgRFxuICBCIC0tPiB8Tm98IEVcblx0XHQiLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCJ9LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;When I first learned some Haskell a few years ago, the idea of spending my time
doing that was sold to me as &amp;ldquo;it&amp;rsquo;ll make you better at every other language&amp;rdquo;.
That was enough to sell it to me at the time, and I believe it had that effect.
It&amp;rsquo;s true of every language to some extent.  Every language formalises some
number of data manipulation patterns, the question is: to what extent? And are
they good patterns to be using to get correct and maintainable code?&lt;/p&gt;
&lt;p&gt;I hear so much from developers who would answer &amp;ldquo;No&amp;rdquo; to both of the above, that
learning the concepts that formalise patterns of data manipulation is overly
esoteric and not pragmatic.  To try to understand these things makes you a
&amp;ldquo;purist&amp;rdquo;, and gets in the way of &amp;ldquo;getting things done&amp;rdquo;.  I think the reality is
that the software industry, as a whole, is not under enough commercial pressure
to write software that works with enough efficiency.  Developers can get away
with not needing to really understand what they&amp;rsquo;re doing, unknowingly
handwriting attempts at the data manipulation patterns, and producing code
that&amp;rsquo;s inefficient to write, expensive to maintain, and inevitably bugged.&lt;/p&gt;
&lt;p&gt;As software becomes more prevalent in all industries, every professional is
writing code, and every child learns coding in school (which they already are):
this situation is going to change.  Software developers will no longer be able
to deliver broken things and convince everyone else that that&amp;rsquo;s OK. In the
meantime let us hope that the bugs that we inevitably write due to this willful
negligence won&amp;rsquo;t cost someone their life.&lt;/p&gt;
&lt;p&gt;This isn&amp;rsquo;t to say that there won&amp;rsquo;t always be bugs in software.  No matter how
solid the tools you use are, you could have just missed the mark on
requirements and built the wrong thing.  But there are whole classes of bugs
and errors that can be eliminated by formalising these patterns and encoding
them into the fundamental tools with which we build things.&lt;/p&gt;
&lt;p&gt;I work with Rust most working days.  While it&amp;rsquo;s missing higher kinded types,
it&amp;rsquo;s got a lot going for it with its strong type system, its state ownership
model, and generally how it makes you be explicit about what you&amp;rsquo;re doing.
People say with Rust that &amp;ldquo;if it compiles it works&amp;rdquo;, and provided you&amp;rsquo;ve
written code that leverages the type system, there&amp;rsquo;s some truth to that. It
makes me hopeful for the future, and I believe that Rust will stand as one of
the cornerstones of a new generation of software that works.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Re-Learning Haskell with Advent of Code - Part 2</title>
       <link>https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell-2/</link>
       <pubDate>Wed, 29 Apr 2020 20:36:28 +0100</pubDate>
       
       <guid>https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell-2/</guid>
       <description>&lt;p&gt;&lt;em&gt;In &lt;a href=&#34;https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell/&#34;&gt;Part 1&lt;/a&gt;, I skipped the day 2, 5, &amp;amp; 7 problems that get you to build
and use a Intcode computer.  Each problem provides an Intcode program to run: A
series of integers that can each either represent an instruction or data, and
can mutate itself.  Looking forward, every odd number day from day 5 onwards
uses the Intcode program.  So I decided to come back to them, and make a
concerted effort at a few of them in a row.&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;intcode-computer---stateful-computation&#34;&gt;Intcode computer - Stateful Computation&lt;/h1&gt;
&lt;h2 id=&#34;an-intcode-program&#34;&gt;An Intcode Program&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://adventofcode.com/2019/day/2&#34;&gt;Day 2&lt;/a&gt; introduces an intcode program that&amp;rsquo;s essentially a series of
integers where you start at the beginning and perform some operation depending
on the integer (instruction) you find which may read or write another element
in the list, take an input, or produce an output, and you then move along the
sequence to the next instruction, which is a number of elements along depending
on the instruction you just ran.  Eventually you reach an instruction to
terminate the intcode program, or the program crashes from some operation failing,
finding an unrecognised instruction, or reaching the end without terminating.
The explanation in &lt;a href=&#34;https://adventofcode.com/2019/day/2&#34;&gt;the problem description&lt;/a&gt; goes into more detail with
examples.&lt;/p&gt;
&lt;p&gt;It looks like the general problem here is we&amp;rsquo;ve got some state that mutates
during computation (a run of the program) and we may need to keep the current
state around while we do some other calculation (calculating the next input
of the program).&lt;/p&gt;
&lt;p&gt;With mutation not really being a feature in functional languages I looked
around for how this can be modelled in Haskell.  From the looks of it, it
sounded like the &lt;a href=&#34;https://wiki.haskell.org/State_Monad&#34;&gt;State Monad&lt;/a&gt; would be needed at some point.&lt;/p&gt;
&lt;h3 id=&#34;initial-implementation&#34;&gt;Initial Implementation&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://adventofcode.com/2019/day/2&#34;&gt;day 2 problem&lt;/a&gt; asks you to build something that will run a simple
intcode program with instructions &lt;code&gt;1&lt;/code&gt; &amp;amp; &lt;code&gt;2&lt;/code&gt; that each take the next three
integers as parameters and mutate an element of the intcode, and &lt;code&gt;99&lt;/code&gt; that
terminates the program.  The problem asks you to run the intcode it gives &amp;lsquo;til
it terminates and give the first value in the intcode.&lt;/p&gt;
&lt;p&gt;For this simple case, we&amp;rsquo;re not concerned about inputs or outputs of the
intcode program and we can run in once and throw it away.&lt;/p&gt;
&lt;p&gt;Roughly following the approach I used in the problems tackled in &lt;a href=&#34;https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell/&#34;&gt;Part 1&lt;/a&gt;,
I started by thinking about what data matters.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Program&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Program&lt;/span&gt; {
  intCode&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;],
  status&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Status&lt;/span&gt;,
  &lt;span style=&#34;color:#75715e&#34;&gt;-- Instruction Pointer: ip&lt;/span&gt;
  ip&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
} &lt;span style=&#34;color:#66d9ef&#34;&gt;deriving&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;Show&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Status&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Running&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Terminated&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Crashed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;deriving&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;Show&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So we&amp;rsquo;ve got: the index that the current instruction is at, &lt;code&gt;ip&lt;/code&gt;; the status of
the program, whether it&amp;rsquo;s &lt;code&gt;Running&lt;/code&gt;, &lt;code&gt;Terminated&lt;/code&gt; (by a &lt;code&gt;99&lt;/code&gt;), or &lt;code&gt;Crashed&lt;/code&gt; for
some reason; and the &lt;code&gt;intCode&lt;/code&gt; itself.&lt;/p&gt;
&lt;p&gt;I could have done less than this on a first pass, only modelling the &lt;code&gt;intCode&lt;/code&gt;
and &lt;code&gt;ip&lt;/code&gt;, and letting the code crash if an operation failed, but I was keen
write safe code by using safe operations, such as those from
&lt;a href=&#34;http://hackage.haskell.org/package/listsafe-0.1.0.1/docs/Data-List-Safe.html&#34;&gt;&lt;code&gt;Data.List.Safe&lt;/code&gt;&lt;/a&gt; handling errors, hence the &lt;code&gt;Crashed&lt;/code&gt; variant of
&lt;code&gt;Status&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve modelled the intcode as a list, &lt;code&gt;[Int]&lt;/code&gt;. lists aren&amp;rsquo;t efficient for
looking up values by index, which is done a lot in the solution, but for now,
I&amp;rsquo;m not hugely worried about performance at this stage.  If it becomes an issue
in later problems, I can look into alternative representations.  If not, I&amp;rsquo;ll
cycle back through at some point and try to optimise performance as an
exercise.&lt;/p&gt;
&lt;p&gt;From here I was able to write a function that takes the above state and evolves
it by one instruction, and running an entire intcode program by recursing until
the status is no longer &lt;code&gt;Running&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;runProgram&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Program&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Program&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;runProgram&lt;/span&gt; prog &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; status prog &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;Running&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; runProgram &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; runStep &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; prog
   &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; prog

&lt;span style=&#34;color:#a6e22e&#34;&gt;runStep&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Program&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Program&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;runStep&lt;/span&gt; prog &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;runStep&lt;/code&gt; matches the instruction found at the instruction pointer index in the
intcode and runs the appropriate operation to produce a new &lt;code&gt;Program&lt;/code&gt;, with a
mutated intcode and the instruction pointer moved along.&lt;/p&gt;
&lt;h3 id=&#34;introducing-the-state-monad&#34;&gt;Introducing the State Monad&lt;/h3&gt;
&lt;p&gt;The above recursive function proved to be enough to get the answers to both
parts of &lt;a href=&#34;https://adventofcode.com/2019/day/2&#34;&gt;day 2&lt;/a&gt;.  As I didn&amp;rsquo;t need to keep track of the program state,
the State Monad wasn&amp;rsquo;t needed.&lt;/p&gt;
&lt;p&gt;Anticipating I&amp;rsquo;d need it later, I tried wrapping the computation in the State
Monad to see how it works.&lt;/p&gt;
&lt;p&gt;From reading the &lt;a href=&#34;https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-State-Lazy.html&#34;&gt;State Monad docs&lt;/a&gt;, and with some help for the
&lt;a href=&#34;http://learnyouahaskell.com/for-a-few-monads-more#state&#34;&gt;chapter in Learn You a Haskell&lt;/a&gt;, I&amp;rsquo;ve understood it as: you have
your state, &lt;code&gt;s&lt;/code&gt;; the output of a computation on that state, &lt;code&gt;a&lt;/code&gt;; and a function
that takes the state and returns the output and the state evolved, &lt;code&gt;s -&amp;gt; (a, s)&lt;/code&gt;.  You then use &lt;code&gt;state&lt;/code&gt; to put the function into the State Monad, denoted
&lt;code&gt;State s a&lt;/code&gt;.  Then it can be manipulated with functions &lt;a href=&#34;https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-State-Lazy.html&#34;&gt;that act upon the State
Monad&lt;/a&gt;, and inside &lt;code&gt;do&lt;/code&gt; notation.&lt;/p&gt;
&lt;p&gt;In this case the state type, &lt;code&gt;s&lt;/code&gt;, is &lt;code&gt;Program&lt;/code&gt;, and the output type, &lt;code&gt;a&lt;/code&gt;, is
&lt;code&gt;()&lt;/code&gt;, as we&amp;rsquo;re not concerned about the output.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;runProgram&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;State&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Program&lt;/span&gt; ()
&lt;span style=&#34;color:#a6e22e&#34;&gt;runProgram&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  prog &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; get
  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; programState prog &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;Running&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
      runStep&amp;#39;
      runProgram
    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; return ()

&lt;span style=&#34;color:#a6e22e&#34;&gt;runStep&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;State&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Program&lt;/span&gt; ()
&lt;span style=&#34;color:#a6e22e&#34;&gt;runStep&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state runStep

&lt;span style=&#34;color:#a6e22e&#34;&gt;runStep&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Program&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; ((), &lt;span style=&#34;color:#66d9ef&#34;&gt;Program&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;runStep&lt;/span&gt; prog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I was then able to create a &lt;code&gt;Program&lt;/code&gt; with the intcode provided, pass it to
&lt;code&gt;runProgram&lt;/code&gt; and use &lt;a href=&#34;https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-State-Lazy.html&#34;&gt;&lt;code&gt;execState&lt;/code&gt;&lt;/a&gt; to get the final &lt;code&gt;Program&lt;/code&gt; state.&lt;/p&gt;
&lt;p&gt;The fact that I&amp;rsquo;ve used &lt;code&gt;()&lt;/code&gt; for the output type is a sign that the State Monad
was not required here, a function of &lt;code&gt;s -&amp;gt; s&lt;/code&gt; would suffice,  but it was good
to do as an exercise.&lt;/p&gt;
&lt;h3 id=&#34;expanding-the-intcode-computer&#34;&gt;Expanding the Intcode Computer&lt;/h3&gt;
&lt;p&gt;Over days &lt;a href=&#34;https://adventofcode.com/2019/day/5&#34;&gt;5&lt;/a&gt;, &lt;a href=&#34;https://adventofcode.com/2019/day/7&#34;&gt;7&lt;/a&gt;, &amp;amp; &lt;a href=&#34;https://adventofcode.com/2019/day/9&#34;&gt;9&lt;/a&gt; you&amp;rsquo;re asked to build up the
intcode computer with a host of new instructions and the ability to take inputs
and give outputs.&lt;/p&gt;
&lt;p&gt;Now there was a potential opportunity to use the State Monad in the intcode
computer, changing the output type and having the functions that return the
State Monad take a parameter.  E.g. if our input and output were both &lt;code&gt;Int&lt;/code&gt; we
might have:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;runProgram&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;State&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Program&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In the case of these problems we need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A list of inputs, &lt;code&gt;[Int]&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;A list of outputs, &lt;code&gt;[Int]&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;Inputs are called one by one, not necessarily by the first instruction in the
program,&lt;/li&gt;
&lt;li&gt;Outputs build up over the course of the program running.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As the program runs each instruction, we want to keep track of the remaining
inputs and the outputs thus far.  So I decided to include input and output in
the &lt;code&gt;Program&lt;/code&gt; type, and not use my State Monad implementation.&lt;/p&gt;
&lt;p&gt;Including these in the type that tracks the state, along with a &amp;ldquo;Relative Base&amp;rdquo;
which the Instruction Pointer is taken as being relative to, we get:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Program&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Program&lt;/span&gt; {
  input&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;],
  intCode&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;],
  status&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Status&lt;/span&gt;,
  &lt;span style=&#34;color:#75715e&#34;&gt;-- ip: Instruction Pointer&lt;/span&gt;
  ip&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;,
  &lt;span style=&#34;color:#75715e&#34;&gt;-- rb: Relative Base&lt;/span&gt;
  rb&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;,
  output&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;]
} &lt;span style=&#34;color:#66d9ef&#34;&gt;deriving&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;Show&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Eq&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Status&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Running&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AwaitInput&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Terminated&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Crashed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;deriving&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;Show&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Eq&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;runProgram&lt;/code&gt; mostly stayed the same, with the case statement adding a match
for the &lt;code&gt;AwaitInput&lt;/code&gt; variant of &lt;code&gt;Status&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;runProgram&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Program&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Program&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;runProgram&lt;/span&gt; prog &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; status prog &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt;
   &lt;span style=&#34;color:#66d9ef&#34;&gt;Running&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; runProg &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; runStep &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; prog
   &lt;span style=&#34;color:#66d9ef&#34;&gt;AwaitInput&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; (length &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; input &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; prog) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
     &lt;span style=&#34;color:#66d9ef&#34;&gt;then&lt;/span&gt; runProg &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; runStep &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; prog
     &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; prog
   &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; prog

&lt;span style=&#34;color:#a6e22e&#34;&gt;runStep&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Program&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Program&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;runStep&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;adding-tests&#34;&gt;Adding Tests&lt;/h3&gt;
&lt;p&gt;As every odd day from 5 onwards uses this intcode computer, I defined it in
it&amp;rsquo;s own module in a different directory and wrote some tests for it.&lt;/p&gt;
&lt;p&gt;Looking around I found all sorts of testing libraries with different goals:
&lt;a href=&#34;https://hackage.haskell.org/package/HUnit&#34;&gt;hUnit&lt;/a&gt; for unit testing, &lt;a href=&#34;https://hackage.haskell.org/package/smallcheck&#34;&gt;SmallCheck&lt;/a&gt; &amp;amp;
&lt;a href=&#34;http://hackage.haskell.org/package/QuickCheck&#34;&gt;QuickCheck&lt;/a&gt; for property based testing, to name a few.  The
&lt;a href=&#34;https://hackage.haskell.org/package/tasty&#34;&gt;tasty&lt;/a&gt; library attempts to pull them all together so I went with that.&lt;/p&gt;
&lt;p&gt;Property based testing looks quite interesting and I plan to look into it.  For
my intcode I added a bunch of &lt;code&gt;assert F(X) == Y&lt;/code&gt; style tests to ensure the
operations perform as expected in the mainline cases.&lt;/p&gt;
&lt;p&gt;With &lt;a href=&#34;https://hackage.haskell.org/package/tasty&#34;&gt;tasty&lt;/a&gt; you create a &amp;ldquo;test tree&amp;rdquo;.  I added all the examples from
explanations of the intcode features from each of the days that introduces
them.  The output looks quite good in the terminal.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack test
...
intcode&amp;gt; test (suite: intcode-test)

Tests
  Unit tests
    Test progressing the program by one instruction
      tests for op codes 1 &amp;amp; 2
        Day 2 example 1 step 1:                              OK
        Day 2 example 1 step 2:                              OK
        Day 2 example 1 step 3 - finish:                     OK
        Day 2 example 1 - try step finished prog:            OK
      Some testing of Opcodes 5 &amp;amp; 6
        op code 6 - test 1:                                  OK
      test 203 op code
        simple case:                                         OK
    Test runnning the program til it stops
      Test examples from day 2 of AOC
        Day 2 example 2 - (1 + 1 = 2):                       OK
        Day 2 example 3 (3 * 2 = 6):                         OK
        Day 2 example 4 (99 * 99 = 9801):                    OK
        Day 2 example 5:                                     OK
      Test examples from day 5 of AOC
        Day 5 example 1 - echo:                              OK
        Day 5 example 2 - immediate mode:                    OK
        Day 5 example 3 - input equal to 8? yes:             OK
        Day 5 example 3 - input equal to 8? no:              OK
        ... (etc)
      Test examples from day 9 of AOC
        Day 9 example 1 - copy of self:                      OK
        Day 9 example 2 - output 16 digit number:            OK
        ... (etc)

All 33 tests passed (0.01s)

intcode&amp;gt; Test suite intcode-test passed
Completed 2 action(s).
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;using-the-intcode-computer&#34;&gt;Using the Intcode Computer&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://adventofcode.com/2019/day/7&#34;&gt;Day 7&lt;/a&gt; asks you to create a series of intcode computers, each running an
&amp;ldquo;amplifier program&amp;rdquo; provided, where the output of one becomes the input of the
next.&lt;/p&gt;
&lt;p&gt;The first part of the problem requires you to run these in series to get an
output at the end.  &lt;em&gt;Taking the ascii diagrams from the &lt;a href=&#34;https://adventofcode.com/2019/day/7&#34;&gt;day 7&lt;/a&gt; problem
description:&lt;/em&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    O-------O  O-------O  O-------O  O-------O  O-------O
0 -&amp;gt;| Amp A |-&amp;gt;| Amp B |-&amp;gt;| Amp C |-&amp;gt;| Amp D |-&amp;gt;| Amp E |-&amp;gt; (to thrusters)
    O-------O  O-------O  O-------O  O-------O  O-------O
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A simple fold over a list of intcodes sufficed here.  I was happy for each
intcode state to be thrown away as the calculation moved to the next.  No need
for the State Monad yet!&lt;/p&gt;
&lt;p&gt;The second half of the problem then asks you to run the intcode computers, the
&amp;ldquo;amplifiers&amp;rdquo;, in a loop, until they exit.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      O-------O  O-------O  O-------O  O-------O  O-------O
0 -+-&amp;gt;| Amp A |-&amp;gt;| Amp B |-&amp;gt;| Amp C |-&amp;gt;| Amp D |-&amp;gt;| Amp E |-.
   |  O-------O  O-------O  O-------O  O-------O  O-------O |
   |                                                        |
   &#39;--------------------------------------------------------+
                                                            |
                                                            v
                                                     (to thrusters)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Now we care about keeping the intcode state around, and we have an output we
want to take from the stateful computation, we have a good reason to use the
State Monad.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Intcode (
  &lt;span style=&#34;color:#66d9ef&#34;&gt;Status&lt;/span&gt;,
  &lt;span style=&#34;color:#66d9ef&#34;&gt;Program&lt;/span&gt;
)

&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Amps&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Amps&lt;/span&gt; {
  ampsOf&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;Program&lt;/span&gt;],
  activeAmp&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
} &lt;span style=&#34;color:#66d9ef&#34;&gt;deriving&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;Show&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;runAmpsLoop&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;State&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Amps&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Maybe&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;runAmpsLoop&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  out &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; runActiveAmpOutput&amp;#39;
  amps &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; get
  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; (atFinalAmp amps, activeAmpStatus amps) &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt;
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Crashed&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; return &lt;span style=&#34;color:#66d9ef&#34;&gt;Nothing&lt;/span&gt;
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Running&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; return &lt;span style=&#34;color:#66d9ef&#34;&gt;Nothing&lt;/span&gt;
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Terminated&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; return (&lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; out)
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Terminated&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
      modify nextAmp
      modify (activeAmpAppendInput out)
      runAmpsLoop
    (&lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;AwaitInput&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
      modify nextAmp
      modify (activeAmpAppendInput out)
      runAmpsLoop

&lt;span style=&#34;color:#75715e&#34;&gt;--&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;-- The types of the functions called above,&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;-- in order of appearence.&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;--&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;runActiveAmpOutput&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;State&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Amps&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;runActiveAmpOutput&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Amps&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Amps&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;atFinalAmp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Amps&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Bool&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;activeAmpStatus&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Amps&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;ProgState&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;nextAmp&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Amps&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Amps&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;activeAmpAppendInput&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Amps&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Amps&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Following the same pattern applied when I tried wrapping the intcode in a State
Monad &lt;a href=&#34;#introducing-the-state-monad&#34;&gt;above&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;runActiveAmpOutput&lt;/code&gt; evolves the state and provides an output, our &lt;code&gt;s -&amp;gt; (a, s)&lt;/code&gt;;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;runActiveAmpOutput&#39;&lt;/code&gt; wraps that in the State Monad with &lt;code&gt;state&lt;/code&gt;; and&lt;/li&gt;
&lt;li&gt;&lt;code&gt;runAmpsLoop&lt;/code&gt;:
&lt;ul&gt;
&lt;li&gt;runs the current amplifier (intcode program),&lt;/li&gt;
&lt;li&gt;gets the new overall state with &lt;code&gt;get&lt;/code&gt;, and&lt;/li&gt;
&lt;li&gt;only if we&amp;rsquo;ve just run the final amplifier in the loop, and it has &lt;code&gt;Terminated&lt;/code&gt;,
return the output.&lt;/li&gt;
&lt;li&gt;Otherwise, if we haven&amp;rsquo;t crashed, use &lt;code&gt;modify&lt;/code&gt; to edit the overall state by
moving to the next amplifier in the loop, &lt;code&gt;nextAmp&lt;/code&gt;, and passing the output
from the last amplifier to new one, &lt;code&gt;activeAmpAppendInput&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I also defined a function &lt;code&gt;newAmps&lt;/code&gt; which, given an intcode program and a list
of &amp;ldquo;phases&amp;rdquo; (tuning parameters for the amplifiers), produces the initial &lt;code&gt;Amps&lt;/code&gt;
state.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;newAmps&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Amps&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I could then find the output of running the amplifiers in a loop with the
expression:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;evalState&lt;/span&gt; runAmpsLoop &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; newAmps intCode phases
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The problem itself asks you to find the combination of phases that gives the
greatest output once the amplifier loop has ran its course.  This could be
found by selecting the permutation of phases that the above expression evaluates
to the greatest value.&lt;/p&gt;
&lt;h2 id=&#34;introducing-monad-transformers&#34;&gt;Introducing Monad Transformers&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://adventofcode.com/2019/day/13&#34;&gt;Day 13&lt;/a&gt; has a fun problem.  You&amp;rsquo;re given an intcode program that outputs
the data (triplets of: x coordinate, y coordinate, and a &amp;ldquo;tile id&amp;rdquo; that determines
which character exists at that position) for the display of a game where you
destroy all the bricks with a ball that you keep in play with a paddle you move
side to side.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;re asked to write a program that will finish the game by destroying all the
bricks.&lt;/p&gt;
&lt;p&gt;I had a solution that would start with a state like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;Z|||||||||||||||||||||||||||||||||||||||||||&amp;quot;
&amp;quot; | # # ## #### ##  #  #### #####    #####  |&amp;quot;
&amp;quot; | ####    #   #   # #    ## # #   ##   #  |&amp;quot;
&amp;quot; | # ## ## # ## ## ###  ######  # ##### #  |&amp;quot;
&amp;quot; | #  # ## ####    ##### # ######  ######  |&amp;quot;
&amp;quot; | ##  ##### # # #  ## # # ### ## ### ## # |&amp;quot;
&amp;quot; |  #### ##  #  # ## #  #   ## # ###### #  |&amp;quot;
&amp;quot; |  ## #######  #### # ## # #   ## #  #### |&amp;quot;
&amp;quot; | # # ## #### ##  #  #### #####    #####  |&amp;quot;
&amp;quot; | # ##### #   ##    ### ####    # ####  # |&amp;quot;
&amp;quot; |  ## #  #   #    #   # #  ## # # #  ###  |&amp;quot;
&amp;quot; | ## ## # # # ##  #    ## ###    ##  #### |&amp;quot;
&amp;quot; | ###     ######   ## ##  ## ### ##       |&amp;quot;
&amp;quot; |    # ## ##   ##  ## ### #         ## ## |&amp;quot;
&amp;quot; | ## ##  #  # ### # ## #   ##    ### # ## |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                         o               |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                          =              |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and would whirr away for a short while until it was finished and my &lt;code&gt;main&lt;/code&gt;
could print the game state:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;Z|||||||||||||||||||||||||||||||||||||||||||&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                   o     |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                   =     |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot;your score: 13581&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To achieve this I followed the same pattern as I did &lt;a href=&#34;#using-the-intcode-computer&#34;&gt;in the day 7
solution&lt;/a&gt; we saw in the last section:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define the state,&lt;/li&gt;
&lt;li&gt;Wrap that in the State Monad, and&lt;/li&gt;
&lt;li&gt;Define a recursive function to keep running the intcode
computer and evolving the state until done.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Intcode &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; IC
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Data.HashMap.Strict &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; HM

&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Game&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Game&lt;/span&gt; {
  gameProg &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IC&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Program&lt;/span&gt;,
  gameDisplay &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Displ&lt;/span&gt;
} &lt;span style=&#34;color:#66d9ef&#34;&gt;deriving&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;Show&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Displ&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;HM&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;HashMap&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Tile&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Tid&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Tile&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Tid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Empty&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Wall&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Block&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Paddle&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Ball&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;BadTid&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Score&lt;/span&gt;{theScore&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;deriving&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;Show&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Eq&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This time &lt;code&gt;Game&lt;/code&gt; is the state, containing an intcode program and a
&lt;a href=&#34;https://hackage.haskell.org/package/unordered-containers-0.2.10.0/docs/Data-HashMap-Strict.html&#34;&gt;HashMap&lt;/a&gt; to record the &amp;ldquo;tiles&amp;rdquo; in the display, keyed by their
coordinates.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;LiveData&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;LiveData&lt;/span&gt; {
  &lt;span style=&#34;color:#75715e&#34;&gt;-- x-coordinate of the ball - xb&lt;/span&gt;
  xb&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;,
  &lt;span style=&#34;color:#75715e&#34;&gt;-- x-coordinate of the paddle - xp&lt;/span&gt;
  xp&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;,
  &lt;span style=&#34;color:#75715e&#34;&gt;-- Game score - sc&lt;/span&gt;
  sc&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
} &lt;span style=&#34;color:#66d9ef&#34;&gt;deriving&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;Show&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;stepGame&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Game&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;LiveData&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Game&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;stepGame&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;State&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Game&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;LiveData&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;stepGame&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; stepGame&amp;#39;

&lt;span style=&#34;color:#a6e22e&#34;&gt;playGame&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;State&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Game&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;playGame&lt;/span&gt; inp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  liveData &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; stepGame inp
  game &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; get
  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IC&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;progState (gameProg game) &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;IC&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;AwaitInput&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; playGame [joystick (xb liveData) (xp liveData)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; return &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; sc liveData

&lt;span style=&#34;color:#a6e22e&#34;&gt;joystick&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;LiveData&lt;/code&gt; is the data we pass on from step to step: the x coordinates of the
ball and paddle and the running score.  The intcode program given can take &lt;code&gt;1&lt;/code&gt;,
&lt;code&gt;-1&lt;/code&gt;, or &lt;code&gt;0&lt;/code&gt; as an input to move the paddle right, left, or nowhere. &lt;code&gt;joystick&lt;/code&gt;
returns &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;-1&lt;/code&gt;, or &lt;code&gt;0&lt;/code&gt; depending on whether the ball is ahead, behind, or in
line with the paddle.&lt;/p&gt;
&lt;p&gt;This was all well and good, and I could complete the problem by giving my end
score, but I wanted to watch my program as it took out all the bricks.&lt;/p&gt;
&lt;p&gt;Basically I wanted to be able to call &lt;code&gt;print&lt;/code&gt; inside the &lt;code&gt;playGame&lt;/code&gt; function.
I had a function that would turn the HashMap display into a 2D grid of characters:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;gridDisplay&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Displ&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [[&lt;span style=&#34;color:#66d9ef&#34;&gt;Char&lt;/span&gt;]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;, and could print a game&amp;rsquo;s display to screen with an expressions like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;mapM&lt;/span&gt; print &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; gridDisplay displ
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;that maps &lt;code&gt;print&lt;/code&gt; across a &lt;code&gt;[[Char]]&lt;/code&gt; (i.e. &lt;code&gt;[String]&lt;/code&gt;) to display the
grid in &lt;code&gt;stdout&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;To be able to perform an IO action within &lt;code&gt;playGame&lt;/code&gt; we need to be able
to include a line of code that returns the IO Monad inside our State Monad.&lt;/p&gt;
&lt;p&gt;To achieve &amp;ldquo;Monads inside Monads&amp;rdquo; we use &lt;a href=&#34;https://wiki.haskell.org/Monad_Transformers&#34;&gt;monad transformers&lt;/a&gt;,
and for the State Monad we can use the &lt;a href=&#34;https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-State-Lazy.html#t:StateT&#34;&gt;&lt;code&gt;StateT&lt;/code&gt;&lt;/a&gt; monad transformer.&lt;/p&gt;
&lt;p&gt;Editing the &lt;code&gt;playGame&lt;/code&gt; function in my solution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Control.Monad.State.Lazy (&lt;span style=&#34;color:#a6e22e&#34;&gt;state&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;StateT&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Control.Monad.IO.Class (&lt;span style=&#34;color:#a6e22e&#34;&gt;liftIO&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; System.Console.ANSI (&lt;span style=&#34;color:#a6e22e&#34;&gt;cursorUp&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;playGame&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;StateT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Game&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;playGame&lt;/span&gt; inp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  liveData &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; stepGame inp
  game &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; get

  &lt;span style=&#34;color:#75715e&#34;&gt;--&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;-- Display the game state in a grid to stdout&lt;/span&gt;
  &lt;span style=&#34;color:#75715e&#34;&gt;--&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; grid &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; gridDisplay &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; gameDisplay game
  &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; liftIO &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; mapM print grid
  liftIO &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; print &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; (&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;Your score: &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; show (sc liveData))
  liftIO &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; cursorUp &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; (length grid) &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;

  &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IC&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;progState (gameProg game) &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;IC&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;AwaitInput&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; playGame [joystick (xb liveData) (xp liveData)]
    &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; return &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; sc liveData

&lt;span style=&#34;color:#a6e22e&#34;&gt;stepGame&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;StateT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Game&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;LiveData&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;stepGame&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; state &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; stepGame&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As &lt;code&gt;State&lt;/code&gt; is only a type alias for &lt;code&gt;StateT&lt;/code&gt; applied to the &lt;a href=&#34;https://hackage.haskell.org/package/base-4.11.0.0/docs/Data-Functor-Identity.html#t:Identity&#34;&gt;Identity Monad&lt;/a&gt;, I&amp;rsquo;ve really
changed the type of &lt;code&gt;playGame&lt;/code&gt; from:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;playGame&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;StateT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Game&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Identity&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;playGame&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;StateT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Game&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;to provide a non-trivial &amp;ldquo;inner monad&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The other key ingredients here are: &lt;code&gt;liftIO&lt;/code&gt;, which allows us to perform
actions within the inner IO Monad; and &lt;code&gt;cursorUp&lt;/code&gt;, to move the stdout cursor up
so we refresh the screen rather than printing a new grid below.&lt;/p&gt;
&lt;p&gt;While I got a monad transformer to work for me in this instance, I need to go
and spend a bit more time to understand how they work in general, hence the
reasonable brief explanation here.&lt;/p&gt;
&lt;p&gt;The result of this is that I could sit and watch my program destroy all the
bricks! 🎉&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;Z|||||||||||||||||||||||||||||||||||||||||||&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; | ####    #   #   # #    #  # #   ##   #  |&amp;quot;
&amp;quot; | # ## ## # ## ## ###  ##   #  # ##### #  |&amp;quot;
&amp;quot; | #  # ## ###     ##### #    ###  ######  |&amp;quot;
&amp;quot; | ##  ##### #   #  ## # # #   #  ### ## # |&amp;quot;
&amp;quot; |  #### ##  #    ## #  #         ##### #  |&amp;quot;
&amp;quot; |  ## #######     # # ##          #  #### |&amp;quot;
&amp;quot; | # # ## ####        ###   #       #####  |&amp;quot;
&amp;quot; | # ##### #         ### # #         ##    |&amp;quot;
&amp;quot; |  ## #  #   #        # #  #         ###  |&amp;quot;
&amp;quot; | ## ## # # # #        ## ###         #   |&amp;quot;
&amp;quot; | ###     ######       #  ## #            |&amp;quot;
&amp;quot; |    # #  ##            #                 |&amp;quot;
&amp;quot; | ## ##     # #      #     ##             |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                      o  |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                     =   |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot;Your score: 3939&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;&amp;quot;Z|||||||||||||||||||||||||||||||||||||||||||&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; | ##                               #   #  |&amp;quot;
&amp;quot; | # #       ##                    #### #  |&amp;quot;
&amp;quot; | #  # #    #                # #  ######  |&amp;quot;
&amp;quot; | ##  ##    #                 #  ### ## # |&amp;quot;
&amp;quot; |  #### ##       #                 ### #  |&amp;quot;
&amp;quot; |  ## #             # #              #### |&amp;quot;
&amp;quot; | # #      #         ###             ###  |&amp;quot;
&amp;quot; | # #               ### #         o ##    |&amp;quot;
&amp;quot; |  #                  # #            # #  |&amp;quot;
&amp;quot; | #                    ## ###             |&amp;quot;
&amp;quot; | ##                   #  ##              |&amp;quot;
&amp;quot; |                       #                 |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot; |                                  =      |&amp;quot;
&amp;quot; |                                         |&amp;quot;
&amp;quot;Your score: 9021&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It does get a bit boring watch it spend ages trying to get
the last few bricks.&lt;/p&gt;
&lt;h2 id=&#34;making-a-monad&#34;&gt;Making a Monad&lt;/h2&gt;
&lt;p&gt;In my intcode computer, there was lots of opportunity for various
operations to fail if the intcode was bugged or an input was bad.
I was modelling these with &lt;a href=&#34;http://hackage.haskell.org/package/base-4.12.0.0/docs/Data-Maybe.html&#34;&gt;&lt;code&gt;Maybe&lt;/code&gt;&lt;/a&gt;, matching on &lt;code&gt;Nothing&lt;/code&gt;, and
setting the program status to the &lt;code&gt;Crashed&lt;/code&gt; variant of &lt;code&gt;Status&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I was doing this &lt;em&gt;a lot&lt;/em&gt;, essentially writing the same 3 lines of code
over and over.  This indicated to me that there was an abstraction
to be made&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3 id=&#34;failing-functions-being-generic-over-monadfail&#34;&gt;Failing Functions being Generic over MonadFail&lt;/h3&gt;
&lt;p&gt;The general case of this is where we have a type
that can represent failure, and if an operation fails we want
to return that type representing failure.&lt;/p&gt;
&lt;p&gt;As an example, say we want to return a list where an empty list
represents failure.  In this simple example a negative input
results in failure.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;maybePos&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Maybe&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;maybePos&lt;/span&gt; x
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Nothing&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; otherwise &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; x

&lt;span style=&#34;color:#a6e22e&#34;&gt;thing&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;]
&lt;span style=&#34;color:#a6e22e&#34;&gt;thing&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; maybePos x &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;Nothing&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;[]&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; posX &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [posX]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;thing&lt;/code&gt; has to match on the &lt;code&gt;Maybe Int&lt;/code&gt; given by &lt;code&gt;maybePos&lt;/code&gt; and
return either the &lt;code&gt;Int&lt;/code&gt; in a list or an empty list.&lt;/p&gt;
&lt;p&gt;I found myself repeating this patten:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model the operation that can fail with a function that returns &lt;code&gt;Maybe&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;Match on the &lt;code&gt;Nothing&lt;/code&gt; and return my failure type.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I was doing a lot of manually converting one type&amp;rsquo;s failure representation
to another type&amp;rsquo;s failure representation.  This seemed to me like there was
something I could use to do this automatically, as I was expressing the same
thing over and over again.&lt;/p&gt;
&lt;p&gt;In the example above, both &lt;code&gt;Maybe&lt;/code&gt; and &lt;code&gt;List&lt;/code&gt; are monads.  I&amp;rsquo;m converting
from one monad&amp;rsquo;s failure representation to another.  After a bit of looking
around I found the &lt;a href=&#34;http://hackage.haskell.org/package/base-4.12.0.0/docs/Control-Monad-Fail.html&#34;&gt;&lt;code&gt;MonadFail&lt;/code&gt; typeclass&lt;/a&gt;.  As &lt;code&gt;Maybe&lt;/code&gt; and &lt;code&gt;List&lt;/code&gt;
both are instances of &lt;code&gt;MonadFail&lt;/code&gt; we can redefine &lt;code&gt;maybePos&lt;/code&gt; to be generic
over &lt;code&gt;MonadFail&lt;/code&gt; and cut out the conversion between failure representations.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;maybePosM&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;MonadFail&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;maybePosM&lt;/span&gt; x
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fail &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;woops&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; otherwise &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; return x

&lt;span style=&#34;color:#a6e22e&#34;&gt;thing&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;]
&lt;span style=&#34;color:#a6e22e&#34;&gt;thing&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; maybePosM

&lt;span style=&#34;color:#a6e22e&#34;&gt;posIntoMaybe&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Maybe&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;posIntoMaybe&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; maybePosM

&lt;span style=&#34;color:#a6e22e&#34;&gt;posIntoIO&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IO&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;posIntoIO&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; maybePosM
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This pattern showed a lot of promise, and I wanted to see if I could employ
it in my intcode computer code.&lt;/p&gt;
&lt;h3 id=&#34;refactoring-the-intcode-computer&#34;&gt;Refactoring the Intcode Computer&lt;/h3&gt;
&lt;p&gt;Recall the &lt;code&gt;Program&lt;/code&gt; type I&amp;rsquo;ve been using to model an intcode computer
thus far:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Program&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Program&lt;/span&gt; {
  input&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;],
  intCode&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;],
  status&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Status&lt;/span&gt;,
  &lt;span style=&#34;color:#75715e&#34;&gt;-- ip: Instruction Pointer&lt;/span&gt;
  ip&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;,
  &lt;span style=&#34;color:#75715e&#34;&gt;-- rb: Relative Base&lt;/span&gt;
  rb&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;,
  output&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;]
} &lt;span style=&#34;color:#66d9ef&#34;&gt;deriving&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;Show&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Eq&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Status&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Running&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AwaitInput&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Terminated&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Crashed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;deriving&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;Show&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Eq&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We think about where failure is represented in this type: in the &lt;code&gt;Crashed&lt;/code&gt;
variant of the sum type &lt;code&gt;Status&lt;/code&gt; under the status field.  You could say that
&amp;ldquo;sense of failure&amp;rdquo; is buried deep within this type.  If we want to handle
failure with Monads, we want to encode failure in a &amp;ldquo;container&amp;rdquo; type.&lt;/p&gt;
&lt;p&gt;I chose to refactor this by making what was &lt;code&gt;Status&lt;/code&gt; into a type that
had variants that could contain an intcode computer. The data from the &lt;code&gt;Program&lt;/code&gt;
type above, then got split into:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prog&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Running&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AwaitInput&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Crashed&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;deriving&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;Show&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Eq&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt; {
  input&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;],
  code&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;],
  &lt;span style=&#34;color:#75715e&#34;&gt;-- ip: Instruction Pointer&lt;/span&gt;
  ip&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;,
  &lt;span style=&#34;color:#75715e&#34;&gt;-- rb: Relative Base&lt;/span&gt;
  rb&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;,
  output&lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt;]
} &lt;span style=&#34;color:#66d9ef&#34;&gt;deriving&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;Show&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;Eq&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With &lt;code&gt;Prog&lt;/code&gt; being given implementations of &lt;code&gt;Monad&lt;/code&gt; and &lt;code&gt;MonadFail&lt;/code&gt; typeclasses:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Monad&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prog&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
  return &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Running&lt;/span&gt;
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;Crashed&lt;/span&gt; e) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Crashed&lt;/span&gt; e)
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt; prog) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k prog
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;Running&lt;/span&gt; prog) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k prog
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;AwaitInput&lt;/span&gt; prog) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&amp;gt;=&lt;/span&gt; k &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; k prog

&lt;span style=&#34;color:#66d9ef&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MonadFail&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prog&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
  fail &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Crashed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As the definition of the &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Control-Monad.html#t:Monad&#34;&gt;monad typeclass&lt;/a&gt; has the typeclass constraint:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Applicative&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Monad&lt;/span&gt; m &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;and &lt;code&gt;Applicative&lt;/code&gt; in turn has a similar constraint for &lt;code&gt;Functor&lt;/code&gt;, I needed to also
make &lt;code&gt;Prog&lt;/code&gt; an instance of both the &lt;code&gt;Applicative&lt;/code&gt; and &lt;code&gt;Functor&lt;/code&gt; typeclasses:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Functor&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prog&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
  fmap &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Crashed&lt;/span&gt; e) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Crashed&lt;/span&gt; e
  fmap f (&lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt; a) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;  &lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt; (f a)
  fmap f (&lt;span style=&#34;color:#66d9ef&#34;&gt;Running&lt;/span&gt; a) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Running&lt;/span&gt; (f a)
  fmap f (&lt;span style=&#34;color:#66d9ef&#34;&gt;AwaitInput&lt;/span&gt; a) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;AwaitInput&lt;/span&gt; (f a)

&lt;span style=&#34;color:#66d9ef&#34;&gt;instance&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Applicative&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prog&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
  pure &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Running&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;Crashed&lt;/span&gt; e) &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Crashed&lt;/span&gt; e
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;End&lt;/span&gt; f) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; prog &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fmap f prog
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;Running&lt;/span&gt; f) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; prog &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fmap f prog
  (&lt;span style=&#34;color:#66d9ef&#34;&gt;AwaitInput&lt;/span&gt; f) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;*&amp;gt;&lt;/span&gt; prog &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fmap f prog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So what was previously represented by &lt;code&gt;Program&lt;/code&gt;, is now represented by &lt;code&gt;Prog Intcode&lt;/code&gt;,
where &lt;code&gt;Prog&lt;/code&gt; is a monad that can represent a program being in a number of states, or
crashed and &lt;code&gt;Intcode&lt;/code&gt; is the data relevant to an intcode program specifically.  The
abstraction here is to separate the raw number crunching of the intcode computer from
our interpretation of the overall &amp;ldquo;status&amp;rdquo; of the program.&lt;/p&gt;
&lt;p&gt;Having made this monad, I refactored all the operations on the intcode which could fail
to return a type generic across &lt;code&gt;MonadFail&lt;/code&gt;, rather than returning &lt;code&gt;Maybe&lt;/code&gt;.  E.g. my
function to safely lookup an index in a list and return &lt;code&gt;0&lt;/code&gt; if the index is beyond
the end of the list, &lt;code&gt;(!!!)&lt;/code&gt; went from:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!!!&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Integral&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [a] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Maybe&lt;/span&gt; a
&lt;span style=&#34;color:#66d9ef&#34;&gt;infixl&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!!!&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;xs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!!!&lt;/span&gt; i
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Nothing&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; length xs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; otherwise &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; xs &lt;span style=&#34;color:#f92672&#34;&gt;!!&lt;/span&gt; i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;!!!&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Integral&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;MonadFail&lt;/span&gt; m &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [a] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Int&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; m a
&lt;span style=&#34;color:#66d9ef&#34;&gt;infixl&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;9&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!!!&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;xs&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;!!!&lt;/span&gt; i
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fail &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;index &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; show i &lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; less that zero&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; length xs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; return &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; otherwise &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; return &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; xs &lt;span style=&#34;color:#f92672&#34;&gt;!!&lt;/span&gt; i
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I was then able to strip out all of the &lt;code&gt;case&lt;/code&gt; statements that were matching
&lt;code&gt;Maybe&lt;/code&gt; and returning a &amp;ldquo;crashed&amp;rdquo; program for &lt;code&gt;Nothing&lt;/code&gt; and use &lt;code&gt;do&lt;/code&gt; notation.&lt;/p&gt;
&lt;p&gt;The implementation of the old &lt;code&gt;runStep&lt;/code&gt; function, that moved the program on by
running a single instruction, called down through layers of functions to select
the right operation, try to perform it, matching on the &lt;code&gt;Maybe&lt;/code&gt; returned and
evolving the intcode state if the operation was successful.  Now this logic
is condensed with the tedious boilerplate removed.  The start of the equivalent
function in the refactored implementation looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;runInstruction&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Prog&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Intcode&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;runInstruction&lt;/span&gt; ic &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
   opcodes &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; currentOpCode ic
   &lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; opcodes &lt;span style=&#34;color:#66d9ef&#34;&gt;of&lt;/span&gt;
      (&lt;span style=&#34;color:#66d9ef&#34;&gt;One&lt;/span&gt;, m1, m2, m3) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
        newIc &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; op1 m1 m2 m3 (ip ic) (code ic)
        return &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; moveIp &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; updateCode newIc &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; ic
   &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;currentOpCode&lt;/code&gt; &amp;amp; &lt;code&gt;op1&lt;/code&gt; both return a type generic over &lt;code&gt;MonadFail&lt;/code&gt;, so in the
case of failure will cause this function to bail with the &lt;code&gt;Crashed&lt;/code&gt; variant of
&lt;code&gt;Prog&lt;/code&gt;.  There is one of these 3 line blocks for each of the different instructions
the intcode can have, and that&amp;rsquo;s it.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not sure how &amp;ldquo;idiomatic&amp;rdquo; using &lt;code&gt;MonadFail&lt;/code&gt; in this way is, it&amp;rsquo;s just
something I spotted that I could do. I see that the &lt;a href=&#34;http://hackage.haskell.org/package/listsafe-0.1.0.1/docs/Data-List-Safe.html&#34;&gt;&lt;code&gt;Data.List.Safe&lt;/code&gt;&lt;/a&gt;
uses &lt;code&gt;MonadThrow&lt;/code&gt; to represent failure, and looking around there seems
other ways of representing and dealing with errors, the &lt;a href=&#34;http://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-Except.html#t:ExceptT&#34;&gt;&lt;code&gt;ExceptT&lt;/code&gt;&lt;/a&gt;
monad transformer among them.&lt;/p&gt;
&lt;h1 id=&#34;other-things-that-came-up&#34;&gt;Other Things That Came Up&lt;/h1&gt;
&lt;h2 id=&#34;recursion&#34;&gt;Recursion&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&#34;https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell/&#34;&gt;my last post&lt;/a&gt; I said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I’m not sure why, but Haskell make recursion feel like a natural way to
solve problems. I use recursion in other languages, but it always feels
like I’ve done something a bit clever.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I think I know why now:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Functional purity allows you to recurse with confidence.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It comes down to: how much information you have to hold in your head while
following the code.&lt;/p&gt;
&lt;p&gt;In procedural languages, where methods have side effects, or at least are
not guaranteed not to, you need to keep in mind all the state that
can be affect when following a method.  When a method recurses,
you then have to consider all the state that the method can affect on
that recursion. You can&amp;rsquo;t treat each recursion symmetrically, because each
recursion adds to the number of things you need to consider.&lt;/p&gt;
&lt;p&gt;With functions&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, you only need to consider their inputs.
And importantly you only need to consider their inputs as data, not as
&amp;ldquo;either representing data or a place to put data&amp;rdquo;&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;.  When a function
recurses, you can leave all context that wasn&amp;rsquo;t passed directly to the
function behind when reasoning through the recursion. You can
descend into the recursion carrying with you only what you
carried into the last one.&lt;/p&gt;
&lt;p&gt;Also as functions return the same output given the same input, you
generally only need to reason through the recursion once.&lt;/p&gt;
&lt;p&gt;By this same reasoning, I&amp;rsquo;d argue that a fold is simpler&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; than
a for loop that iterates over a collection (for languages that support
both and you have the choice).&lt;/p&gt;
&lt;p&gt;When reasoning through a fold you only need to consider two values:
the accumulator; and the item taken from the collection.  It&amp;rsquo;s almost
like being in a bubble, where only these two values matter.&lt;/p&gt;
&lt;p&gt;In a for loop however, you&amp;rsquo;re exposed to the context outside the loop.
You can&amp;rsquo;t forget about any variables in scope, as you might change them
while looping.  You also have control flow to consider.  You might hit
a &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; on a particular loop which means you then have
to skip over the code blow it that you would have otherwise reasoned
through (a &lt;code&gt;goto&lt;/code&gt; in sheep&amp;rsquo;s clothing).  Like with recursion in procedural
languages the number of things you need to consider grows as you iterate.
With functional purity that number of things to consider stays steady.&lt;/p&gt;
&lt;h2 id=&#34;compiler-warnings&#34;&gt;Compiler Warnings&lt;/h2&gt;
&lt;p&gt;I turned on a bunch of compiler warnings, as per the advise of &lt;a href=&#34;https://lexi-lambda.github.io/blog/2018/02/10/an-opinionated-guide-to-haskell-in-2018/&#34;&gt;this
article&lt;/a&gt;, by adding this to my &lt;code&gt;~/.stack/config.yaml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;ghc-options&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;&amp;#34;$locals&amp;#34;: &lt;/span&gt;-Wall -Wcompat -Wincomplete-record-updates -Wincomplete-uni-patterns -Wredundant-constraints
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I had initially thought that I wanted to use Haskell as &amp;ldquo;out of the box&amp;rdquo;
as possible, and not &amp;ldquo;depend on&amp;rdquo; extra lints to tell me what to do, but
then remembered that&amp;rsquo;s a terrible argument.&lt;/p&gt;
&lt;p&gt;In reality, when people employ extra linting and static analysis they
don&amp;rsquo;t become dependent on it, they learn from it and get better at
writing better code first time, and continue to write better code when
the linting is turned off.&lt;/p&gt;
&lt;p&gt;When you work in a language with a strong type system and have a compiler
that kicks your ass when you get it wrong, you become better at writing
correct code first time in all languages.&lt;/p&gt;
&lt;p&gt;So I turned the compiler warnings on.  It did make ghci a bit spammy.
I&amp;rsquo;ll see if there&amp;rsquo;s a nice way to turn the warnings off for ghci.&lt;/p&gt;
&lt;h2 id=&#34;breaking-functions-into-lots-of-pieces&#34;&gt;Breaking Functions Into Lots of Pieces&lt;/h2&gt;
&lt;p&gt;In a few of the Advent of Code problems, especially when I was eager to
get the problem done and move on, I found myself falling into a pattern
of: knowing the data I want; thinking procedurally about all the steps
between that and the data I have; writing a function for each of these
steps; and stringing them together to get the answer.&lt;/p&gt;
&lt;p&gt;This gets me to the answer, but the result is a load of free floating
functions non of which make any real sense on their own.  The code ends
up being a bit of a mess, especially when those constituent steps are
not used anywhere else.&lt;/p&gt;
&lt;p&gt;Part of this can come down to whether either of the data I have or the
data I want are actually good representations of the problem.  When data
is a good natural fit to a problem you tend not to need to do so many
complex transformations of that data.  But I think it&amp;rsquo;s fair to expect
times when you need to describe the transformation of some data that&amp;rsquo;s
more complex than could be described in a one line function.&lt;/p&gt;
&lt;p&gt;I started using the &lt;code&gt;where&lt;/code&gt; keyword more often, and that appears to
have dealt with this problem I was having.  With &lt;code&gt;where&lt;/code&gt; you can break
down a calculation into parts without exposing those parts as free
floating functions.&lt;/p&gt;
&lt;p&gt;E.g:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; map &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; bar baz
  &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    bar &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
    baz &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This keeps the readers attention in the block of text where the function
is defined, rather than having to jump around a file, or even into different
files.&lt;/p&gt;
&lt;h2 id=&#34;modules--namespacing&#34;&gt;Modules &amp;amp; Namespacing&lt;/h2&gt;
&lt;p&gt;In &lt;a href=&#34;https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell/&#34;&gt;my last post&lt;/a&gt; I talked about: not knowing how to find out
what package to install to get a certain library; and not being totally
comfortable with the namespacing when modules are imported and suffering
from &amp;ldquo;where did that function come from?&amp;rdquo; syndrome.&lt;/p&gt;
&lt;p&gt;The first of these was me just being dumb as it turns out the
package containing a module is written in the top left hand corner
of the module documentation&amp;rsquo;s web page.  Spot &lt;code&gt;mtl-&lt;/code&gt; in &lt;a href=&#34;https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-State-Lazy.html&#34;&gt;the
docs for &lt;code&gt;Control.Monad.State.Lazy&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On the second of these: I&amp;rsquo;ve got reasonably comfortable with either
doing a qualified import to preserve namespacing, or being explicit
about which functions I&amp;rsquo;m importing if I&amp;rsquo;m importing them into the
module&amp;rsquo;s namespace.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Foo.Bar &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; FB
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Baz
  ( &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;
  , &lt;span style=&#34;color:#a6e22e&#34;&gt;fooBar&lt;/span&gt;
  , &lt;span style=&#34;color:#a6e22e&#34;&gt;fooBarBaz&lt;/span&gt;
  )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I&amp;rsquo;ve found using a combination of these: qualified import and
explicitly listing the functions is a bit over the top.&lt;/p&gt;
&lt;p&gt;I also practiced a pattern of having a module which renames
functions from another module when the names of functions and
types didn&amp;rsquo;t make as much sense in the context I was using them,
or were just down right silly names in the first place.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Sensible
  ( &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;
  , &lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;
  , &lt;span style=&#34;color:#66d9ef&#34;&gt;Baz&lt;/span&gt; (&lt;span style=&#34;color:#f92672&#34;&gt;..&lt;/span&gt;)
  , &lt;span style=&#34;color:#66d9ef&#34;&gt;Silly&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;okName&lt;/span&gt;
  )

&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Very.Silly.Named.Module &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; Silly

&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Silly&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;longFooName
&lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Silly&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;otherBarName

&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Baz&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Silly&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;BazBaz&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using a combination of qualified imports and explicitly naming
functions I&amp;rsquo;m importing into the module&amp;rsquo;s namespace, I&amp;rsquo;ve found
I can completely prevent the &amp;ldquo;where did that function come from&amp;rdquo;
syndrome.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell/&#34;&gt;my last post&lt;/a&gt; I made a lot of comparisons between how Rust
does things and how I was finding things are done in Haskell.
I made a general point that Rust is more explicit.  This is an example
of where Haskell can be more explicit.  In Rust, a lot of functionality
is provided via traits.  If a type implements a trait, you can call
the methods from that trait on that type by importing the trait.  The
methods themselves don&amp;rsquo;t need to be explicitly imported.  The result is
that you can read some code that deals with a type you know (or at least
know where to find the docs for), that then calls a method on that type
that doesn&amp;rsquo;t appear in the type&amp;rsquo;s documentation.  You&amp;rsquo;re left wondering
&amp;ldquo;where did that method come from?&amp;quot;.  This is the part where I&amp;rsquo;d use
a &amp;ldquo;go to definition&amp;rdquo;.  Without that you&amp;rsquo;d need to search through the
traits that are imported in scope as any one of them might have been
implemented for the type and try to find the method.  I try to avoid
this problem in Rust by keeping imports of traits as tightly scoped
with the code that uses them as I can so it&amp;rsquo;s as obvious as possible
where the method came from.  This is probably one of the rare examples
where Rust is not &lt;a href=&#34;https://tarquin-the-brave.github.io/blog/posts/ide-read-code/&#34;&gt;readable as text&lt;/a&gt;, where for the most part
it is pretty good at being.&lt;/p&gt;
&lt;h1 id=&#34;what-next&#34;&gt;What Next?&lt;/h1&gt;
&lt;p&gt;As I said last time, I reckon I could press on and do the rest of the problems
with the tools I know.  But I&amp;rsquo;m keen to level up my Haskell and not just grind
out solutions.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m keen to read more into monad transformers and property based testing.&lt;/p&gt;
&lt;p&gt;I then want to loop back around and improve the performance of my solutions:
looking into strictness and more efficient data structures.  I also want to
make types fit the data better: where they could be more generic making them
more generic and where they&amp;rsquo;re too generic, and possible values of the type
don&amp;rsquo;t represent possible values of data the type represents, choose, or define,
another type that&amp;rsquo;s better suited.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;As with &lt;a href=&#34;https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell/&#34;&gt;Part 1&lt;/a&gt;, all my solutions are &lt;a href=&#34;https://github.com/tarquin-the-brave/aoc-19-haskell&#34;&gt;mastered on Github&lt;/a&gt;, but
are likely to have been refactored somewhat since this post was written.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell-3/&#34;&gt;&lt;strong&gt;Re-learning Haskell with Advent of Code - Part 3&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;I wrote &lt;a href=&#34;https://tarquin-the-brave.github.io/blog/posts/dry-not-a-goal/&#34;&gt;a blog post recently&lt;/a&gt; about how removing repetition in code
isn&amp;rsquo;t the be all and end all, but is a good indicator that some abstractions
are needed. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;I&amp;rsquo;m careful to not call something a function if it isn&amp;rsquo;t a pure function.
The ship sailed a bit on that one as many languages call their inpure methods
&amp;ldquo;functions&amp;rdquo;, but I find the distinction useful, not least to help context
switch when moving between procedural and functional frames of mind. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-6BsiVyC1kM&#34;&gt;A great talk by Rich Hickey&lt;/a&gt; &amp;ldquo;The Value of Values&amp;rdquo; talks
about PLOP &amp;ldquo;Place Oriented Programming&amp;rdquo;. &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=oytL881p-nQ&#34;&gt;Another great talk by Rich Hickey&lt;/a&gt; &amp;ldquo;Simple Made Easy&amp;rdquo;
talks about what simplicity is and how we can think objectively about it
rather than it being a stand in for what people are most familiar with. &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
     </item>
   
     <item>
       <title>DRY Shouldn&#39;t be a Goal in Itself</title>
       <link>https://tarquin-the-brave.github.io/blog/posts/dry-not-a-goal/</link>
       <pubDate>Sat, 18 Apr 2020 10:40:01 +0100</pubDate>
       
       <guid>https://tarquin-the-brave.github.io/blog/posts/dry-not-a-goal/</guid>
       <description>&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;&gt;DRY&lt;/a&gt;, &amp;ldquo;Don&amp;rsquo;t Repeat Yourself&amp;rdquo;, is often described as a &amp;ldquo;principle&amp;rdquo; of
software engineering.  I looked up what &amp;ldquo;principle&amp;rdquo; is defined to mean and
Google says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a fundamental truth or proposition that serves as the foundation
for a system of belief or behaviour or for a chain of reasoning.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Maybe in this case that&amp;rsquo;s a bit strong.  I&amp;rsquo;d think in the case of a software
principle we&amp;rsquo;re talking more about an idea of how things should be, or a
guide&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; to decision making.&lt;/p&gt;
&lt;p&gt;But anyway.  I find quite often, when seeing discussion about software, DRY
ends up being front and centre, the main focus of what someone wants to
achieve.  People argue for DRY &amp;ldquo;at any cost&amp;rdquo;.  Is it really worth eliminating
every ounce of repetition if the result is completely unreadable and
unmaintainable code?  An answer to that could take us down the route of &amp;ldquo;DRY
done right&amp;rdquo;, &amp;ldquo;DRY done wrong&amp;rdquo;, and I&amp;rsquo;m sure there will be endless articles out
there that are titled as such.  But I find that whenever you see discussion
around &amp;ldquo;principle X done right&amp;rdquo;, &amp;ldquo;principle X done wrong&amp;rdquo;, that serves as an
indicator that there&amp;rsquo;s something quite leaky about the principle. ⛲&lt;/p&gt;
&lt;p&gt;I think it&amp;rsquo;s better to think of DRY as an indicator that abstractions are good,
rather than something to shoot for in of itself.&lt;/p&gt;
&lt;p&gt;Like in Economics, &amp;ldquo;full employment&amp;rdquo; can be a sign that an economy is generally
healthy, but can&amp;rsquo;t be a goal above all else.  We could employ everyone in the
postal service: we&amp;rsquo;d have full employment, but no food.  I only did Economics
up to GCSE, so maybe there&amp;rsquo;s more to the story than that, but you get the
picture.&lt;/p&gt;
&lt;p&gt;As stupid as this comparison might be, I see this happening in software.  DRY
seems to be an obsession for some developers, and then once achieved: &amp;ldquo;the
answer&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;I wonder why this is.  Perhaps because it&amp;rsquo;s easy, visible, and safe.  No-one
disagrees in general that less repetition is better, so unless they know the
specifics of what you&amp;rsquo;re talking about they&amp;rsquo;re not going to disagree with you.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve seen the pursuit of DRY in absolute leave a trail of destruction in its
wake.  I prefer to think of it as an indicator, or early warning signal for my
abstractions.  If I see a fair amount of repetition in my code, I question if
my abstractions are quite right.  If I seem to be able to express quite a lot
with very little code, and not a huge number of functions and modules, I see it
as good sign that the abstractions are about right.&lt;/p&gt;
&lt;p&gt;I could take verbose and repetitive code, and chop it up into loads of
functions and squirrel them away in modules &amp;ldquo;utils_1&amp;rdquo;, &amp;ldquo;utils_2&amp;rdquo;, &amp;amp;
&amp;ldquo;utils_3&amp;rdquo;, and I would have &amp;ldquo;achieved DRY&amp;rdquo;.  But the code would be more all
over the place than when I started and I wouldn&amp;rsquo;t have addressed the underlying
cause of the problem: that the abstractions were just wrong.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dry can be a sign of good abstractions, but not a goal in itself.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So work on your abstractions, and the repetition will fall away as you get them
right.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;As Captain Barbossa says: &amp;ldquo;The code is more what you&amp;rsquo;d
call guidelines than actual rules&amp;rdquo;. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
     </item>
   
     <item>
       <title>Re-Learning Haskell with Advent of Code - Part 1</title>
       <link>https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell/</link>
       <pubDate>Sun, 29 Mar 2020 20:40:05 +0000</pubDate>
       
       <guid>https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell/</guid>
       <description>&lt;p&gt;A few years ago I learned myself a Haskell for greater good from a book &amp;ldquo;Learn
you a Haskell for greater good&amp;rdquo;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; and the first few chapters of another book
&amp;ldquo;Haskell from first principles&amp;rdquo;&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;It was fun to learn.  I didn&amp;rsquo;t go onto use Haskell to build any real
applications, beyond coding up some exercises and mini programs to learn
things.&lt;/p&gt;
&lt;p&gt;I believe I got a lot from it.  At the very least it&amp;rsquo;s joyful to solve problems
in Haskell.  When I started writing Rust a year later I liked the strong type
system and the features inspired by functional languages: maps, folds, etc.  It
gave me an appreciation of the benefits of immutability and pure functions.  I
believe that&amp;rsquo;s fed into improving how I build things in other languages.&lt;/p&gt;
&lt;p&gt;A colleague told me about how they did Advent of Code&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; to learn Rust and a
wider group of colleagues have decided to do a couple of exercises every week,
to learn a variety of languages, and meet fortnightly to discuss approaches.  I
saw this as a good opportunity to &amp;ldquo;pick up Haskell again&amp;rdquo;.  So I did.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;This post, along with following parts, will be my log of my experiences and
the things I&amp;rsquo;m learning while going through this exercise. It&amp;rsquo;ll be littered
with wild theories, opinions, inefficient uses of code, hopefully some good
learnings, and sometimes things that are just plain wrong.  I&amp;rsquo;m keen to hear
any thoughts people have or anything they can add or ask in comments.  So don&amp;rsquo;t
be afraid to drop a comment or three!&lt;/em&gt;&lt;/p&gt;
&lt;h1 id=&#34;week-1&#34;&gt;Week 1&lt;/h1&gt;
&lt;h2 id=&#34;build-tooling&#34;&gt;Build Tooling&lt;/h2&gt;
&lt;p&gt;First thing&amp;rsquo;s first.  Build tooling.  I didn&amp;rsquo;t really bother with this the last
time around.  I spent most of the time playing in GHCi, the interactive Haskell
terminal, and importing most of the Haskell modules I wrote into that, rather
than compiling and running an executable.&lt;/p&gt;
&lt;p&gt;Over the last few years I&amp;rsquo;ve learned: first thing to do after cloning a
codebase: build it! And if you can&amp;rsquo;t rebuilt at the touch of a button, do the
work immediately to make sure you can.  I&amp;rsquo;ve spent time faffing on with linking
issues with C++ applications.  I&amp;rsquo;ve spent time faffing on with Python&amp;rsquo;s
dependency management, or lack thereof&lt;sup id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;.  It&amp;rsquo;s not time well spent.  It&amp;rsquo;s
time lost.  I&amp;rsquo;ve been writing Rust at work for about a year and a half.  Rust
has &lt;a href=&#34;https://doc.rust-lang.org/cargo/&#34;&gt;cargo&lt;/a&gt;.  Cargo is phenomenal.  It&amp;rsquo;s a great bit of tooling.  I&amp;rsquo;ll
not lie to you: when facing technical decisions, especially around tooling, I
quite often find myself asking &amp;ldquo;WWCD?&amp;quot;, &amp;ldquo;What Would Cargo Do?&amp;quot;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m picking up a language, having build tooling that&amp;rsquo;s rock solid, and
available at the touch of a button is paramount.  So before writing a line of
code, or even reading the first day&amp;rsquo;s challenge, I went looking for build
tooling.&lt;/p&gt;
&lt;p&gt;I did a bit of googling with phrases like &amp;ldquo;Haskell toolchain&amp;rdquo;, &amp;ldquo;Haskell build
tools comparison&amp;rdquo;, and found various resources ranging from blog posts to
official documentation.  I found &lt;a href=&#34;https://lexi-lambda.github.io/blog/2018/02/10/an-opinionated-guide-to-haskell-in-2018/&#34;&gt;this post&lt;/a&gt; quite
informative.  It purports to be &amp;ldquo;An opinionated guide&amp;rdquo;.  That&amp;rsquo;s good.
Developers having opinions is good.  Especially when you consider the
alternative: &lt;em&gt;not having thoughts&lt;/em&gt;.  It&amp;rsquo;s a long document.  I didn&amp;rsquo;t read
nearly half of it.  But funnily enough the first section in this &amp;ldquo;guide to
Haskell&amp;rdquo;, was on build tooling.  It touched on three options of cabal-install,
stack, and nix, and proceeded to do fairly good job of selling stack.  Combined
with a friend telling me that &amp;ldquo;stack is the closest thing to cargo that Haskell
has got&amp;rdquo;, I was sold on stack, at least for the meantime.  Nix is on my bucket
list, just not today.&lt;/p&gt;
&lt;p&gt;So I found and bookmarked the &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;official documentation&lt;/a&gt; and ran
&lt;code&gt;stack new day1&lt;/code&gt; to create a project for the problems in &amp;ldquo;day 1&amp;rdquo; of the Advent
of Code.&lt;/p&gt;
&lt;h2 id=&#34;retracing-the-first-steps&#34;&gt;Retracing the first steps&lt;/h2&gt;
&lt;p&gt;The problems on &lt;a href=&#34;https://adventofcode.com/2019/day/1&#34;&gt;day 1&lt;/a&gt; involved summing the result of applying a
function to list of integers, and then do the same with a different function.
The halves of this exercise are almost identical except for the function to
apply to each element of the list before summing the results.  This sounds like
an opportunity for function currying.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;stack new&lt;/code&gt; sets up a &lt;code&gt;src/Lib.hs&lt;/code&gt; and a &lt;code&gt;app/Main.hs&lt;/code&gt;.  While not having
read up on the conventional use of these files, my guess is that &lt;code&gt;Lib.hs&lt;/code&gt; is
for any functionality that might become a library, keeping things as generic as
possible, and &lt;code&gt;Main.hs&lt;/code&gt; is for code specific to this application: where to read
the data from, error handling, etc.  Although, especially for earlier problems,
this separation will be somewhat artificial.  I&amp;rsquo;m not going to get too worried
about what&amp;rsquo;s in what file, but use it to get used to exporting and importing.&lt;/p&gt;
&lt;p&gt;I ended up with a &lt;code&gt;Lib.hs&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Lib
    ( &lt;span style=&#34;color:#a6e22e&#34;&gt;tot_1&lt;/span&gt;
    , &lt;span style=&#34;color:#a6e22e&#34;&gt;tot_2&lt;/span&gt;
    ) &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Integral&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; a
&lt;span style=&#34;color:#a6e22e&#34;&gt;f&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; x `div` &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;tot_1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Integral&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [a] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; a
&lt;span style=&#34;color:#a6e22e&#34;&gt;tot_1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tot f

&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Integral&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; a
&lt;span style=&#34;color:#a6e22e&#34;&gt;g&lt;/span&gt; x
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; f x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f x &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; g(f x)
  &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; otherwise &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;

&lt;span style=&#34;color:#a6e22e&#34;&gt;tot_2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Integral&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [a] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; a
&lt;span style=&#34;color:#a6e22e&#34;&gt;tot_2&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tot g

&lt;span style=&#34;color:#a6e22e&#34;&gt;tot&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Integral&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; a) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [a] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; a
&lt;span style=&#34;color:#a6e22e&#34;&gt;tot&lt;/span&gt; f &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; sum &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; fmap f
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;, and a &lt;code&gt;Main.hs&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;module&lt;/span&gt; Main &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Lib
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Data.List

&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;IO&lt;/span&gt; ()
&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  contents &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; readFile &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;inputs.txt&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; inputs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fmap read &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; lines &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; contents
  print &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Lib&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tot_1 &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; inputs
  print &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Lib&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tot_2 &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; inputs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;, having saved the inputs Advent of Code gave me to &lt;code&gt;inputs.txt&lt;/code&gt; (each person
gets given their own problem input).&lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;tot&lt;/code&gt; takes a function and applies it to each element of a list
and sums the results.  To fulfil each half of the problem I then only needed to
define the two functions to pass to &lt;code&gt;tot&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This &lt;a href=&#34;https://adventofcode.com/2019/day/1&#34;&gt;day 1 problem&lt;/a&gt; gave a quick revision of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;modules,&lt;/li&gt;
&lt;li&gt;do notation,&lt;/li&gt;
&lt;li&gt;functions composition (with &lt;code&gt;.&lt;/code&gt; &amp;amp; &lt;code&gt;$&lt;/code&gt;),&lt;/li&gt;
&lt;li&gt;function currying, and&lt;/li&gt;
&lt;li&gt;recursion.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Recursion ends up featuring heavily in my solutions to the first few days. I&amp;rsquo;m
not sure why, but Haskell make recursion feel like a natural way to solve
problems.  I use recursion in other languages, but it always feels like I&amp;rsquo;ve
done something a bit clever.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://adventofcode.com/2019/day/2&#34;&gt;Day 2&lt;/a&gt; asks you to write a basic Intcode computer which is then
extended and used in all odd day problems from day 5 onwards.  I decided to
come back to this and went on to problems from days &lt;a href=&#34;https://adventofcode.com/2019/day/3&#34;&gt;3&lt;/a&gt;, &lt;a href=&#34;https://adventofcode.com/2019/day/4&#34;&gt;4&lt;/a&gt;,
&lt;a href=&#34;https://adventofcode.com/2019/day/6&#34;&gt;6&lt;/a&gt;, and &lt;a href=&#34;https://adventofcode.com/2019/day/8&#34;&gt;8&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://adventofcode.com/2019/day/3&#34;&gt;Day 3&lt;/a&gt; involved drawing lines on a grid and working out where they
cross, my solution involved reminding myself of how to make use of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Defining my own types: type constructors, sum types, record syntax,&lt;/li&gt;
&lt;li&gt;Generating lists from infinite lists,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;filter&lt;/code&gt;,&lt;/li&gt;
&lt;li&gt;&lt;code&gt;foldl&lt;/code&gt;, and&lt;/li&gt;
&lt;li&gt;Using lists as applicative functors,&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;without too much hassle.  The solution wasn&amp;rsquo;t very efficient, but
it worked.&lt;/p&gt;
&lt;h2 id=&#34;fun-with-folds&#34;&gt;Fun With Folds&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://adventofcode.com/2019/day/4&#34;&gt;Day 4&lt;/a&gt; introduced a simple problem of: work out the number of integers
between two numbers that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have two adjacent digits that are the same, and&lt;/li&gt;
&lt;li&gt;Who&amp;rsquo;s digits never decrease.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In my solution I used function currying again. A function took a
function that applies a rule between two characters as an argument, and folded
over the digits in the numbers with &lt;code&gt;foldl&lt;/code&gt; to apply the rules.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ruleX&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Char&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Bool&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In two respects, &lt;code&gt;foldl&lt;/code&gt; was an awkward fit:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I didn&amp;rsquo;t care about the initial value,&lt;/li&gt;
&lt;li&gt;The rules can be confirmed as being broken or obeyed without having to iterate
through every element.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;no-initial-value&#34;&gt;No Initial Value&lt;/h3&gt;
&lt;p&gt;The first of these points is equivalent to saying that I don&amp;rsquo;t care about applying
this fold to an empty list.  Using &lt;code&gt;foldl&lt;/code&gt;, each time I applied a rule to the
string, I had to provide an initial character that wouldn&amp;rsquo;t cause the rule to
fail in any case.  While I &amp;ldquo;got away with it&amp;rdquo; for this problem, I should find
an alternative pattern to use here to avoid a reasonably crass source of error.&lt;/p&gt;
&lt;p&gt;Funnily enough, I had this exact same problem when doing some work in Rust in
the week, and found &lt;a href=&#34;https://docs.rs/itertools/0.9.0/itertools/trait.Itertools.html#method.fold1&#34;&gt;&lt;code&gt;fold1&lt;/code&gt;&lt;/a&gt; from the &lt;a href=&#34;https://docs.rs/itertools/0.9.0/itertools/&#34;&gt;itertools
crate&lt;/a&gt; with type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;fold1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;F&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(self, f: &lt;span style=&#34;color:#a6e22e&#34;&gt;F&lt;/span&gt;) -&amp;gt; Option&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;Self::Item&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;where&lt;/span&gt;
    F: FnMut(Self::Item, Self::Item) -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Self&lt;/span&gt;::Item,
    Self: Sized,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If an empty list has passed in,you get a &lt;code&gt;None&lt;/code&gt;&lt;sup id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; back.&lt;/p&gt;
&lt;p&gt;Given how much Rust has borrowed from Haskell I was confident this will exist
in Haskell too.&lt;/p&gt;
&lt;p&gt;I found &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Prelude.html#v:foldl1&#34;&gt;&lt;code&gt;foldl1&lt;/code&gt;&lt;/a&gt; in Prelude.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;foldl1&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Foldable&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; a) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It does a fold without needing an initial value but doesn&amp;rsquo;t handle empty lists.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack ghci
...
*Main Lib&amp;gt; :t foldl1
foldl1 :: Foldable t =&amp;gt; (a -&amp;gt; a -&amp;gt; a) -&amp;gt; t a -&amp;gt; a
*Main Lib&amp;gt; foldl1 (+) [1,2,3]
6
*Main Lib&amp;gt; foldl1 (+) []
*** Exception: Prelude.foldl1: empty list
*Main Lib&amp;gt; :q
$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I tried searching in &lt;a href=&#34;https://hoogle.haskell.org/&#34;&gt;Hoogle&lt;/a&gt; for a type like the &lt;code&gt;fold1&lt;/code&gt; from Rust:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;foldable&lt;/span&gt; t &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; a) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; t a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Maybe&lt;/span&gt; a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/safe-0.3.18/docs/Safe-Foldable.html#v:foldl1May&#34;&gt;&lt;code&gt;foldl1May&lt;/code&gt;&lt;/a&gt; looks to be what I want.  I&amp;rsquo;ll keep the &lt;code&gt;safe&lt;/code&gt; package
in mind when doing further problems.  Coming from Rust I don&amp;rsquo;t have much of a
taste for these exceptions.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ stack ghci
...
*Main Lib&amp;gt; :m + Safe.Foldable
*Main Lib Safe.Foldable&amp;gt; :t foldl1May
foldl1May :: Foldable t =&amp;gt; (a -&amp;gt; a -&amp;gt; a) -&amp;gt; t a -&amp;gt; Maybe a
*Main Lib Safe.Foldable&amp;gt; foldl1May (+) []
Nothing
*Main Lib Safe.Foldable&amp;gt; foldl1May (+) [1,2,3]
Just 6
*Main Lib Safe.Foldable&amp;gt; :q
$
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;It&amp;rsquo;s good to know the nomenclature of:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Safe&amp;rdquo; means: &amp;ldquo;won&amp;rsquo;t throw an exception&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;bailing-early-from-a-fold&#34;&gt;Bailing Early from a Fold&lt;/h3&gt;
&lt;p&gt;The second of these points, where we know the rule is either met or broken
before we&amp;rsquo;ve finished iterating over the digits of the number, basically
means that we&amp;rsquo;d like to quit iterating once we have a solid answer.&lt;/p&gt;
&lt;p&gt;In procedural code performing a &amp;ldquo;for loop&amp;rdquo;, a &amp;ldquo;break&amp;rdquo; statement would do
this job.&lt;/p&gt;
&lt;p&gt;The way I approached this was to wrap the accumulator in a &lt;code&gt;Maybe&lt;/code&gt; and have
the fold function &amp;ldquo;pass through&amp;rdquo; when the accumulator is &lt;code&gt;Nothing&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;foldFunction&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Maybe&lt;/span&gt; a) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Maybe&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Maybe&lt;/span&gt; a
&lt;span style=&#34;color:#a6e22e&#34;&gt;foldFunction&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Nothing&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Nothing&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;foldFunction&lt;/span&gt; f (&lt;span style=&#34;color:#66d9ef&#34;&gt;Just&lt;/span&gt; acc) x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f acc x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So as soon as &lt;code&gt;f&lt;/code&gt; produces a &lt;code&gt;Nothing&lt;/code&gt;, the fold will produce &lt;code&gt;Nothing&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I used &lt;code&gt;Maybe&lt;/code&gt; because I didn&amp;rsquo;t care about the data being accumulated, I only
cared whether the fold got to the end of the list.  If I cared about the data
in an &amp;ldquo;early exit&amp;rdquo; of the fold I could have used &lt;code&gt;Either&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;foldFunction&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Either&lt;/span&gt; a b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Either&lt;/span&gt; a b &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; c &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Either&lt;/span&gt; a b
&lt;span style=&#34;color:#a6e22e&#34;&gt;foldFunction&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Left&lt;/span&gt; x &lt;span style=&#34;color:#66d9ef&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Left&lt;/span&gt; x
&lt;span style=&#34;color:#a6e22e&#34;&gt;foldFunction&amp;#39;&lt;/span&gt; f (&lt;span style=&#34;color:#66d9ef&#34;&gt;Right&lt;/span&gt; acc) x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; f acc x
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I was hoping the compiler would optimise out passing through &lt;code&gt;Nothing&lt;/code&gt; and bail
as soon as the accumulator becomes &lt;code&gt;Nothing&lt;/code&gt;. Then this pattern could be used
to fold over an infinite list&amp;hellip; sadly not.  Say we want to quit with &lt;code&gt;Nothing&lt;/code&gt;
as soon as an element is found greater than &lt;code&gt;10&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*Main Lib&amp;gt; :t foldFunction
foldFunction :: (a -&amp;gt; b -&amp;gt; Maybe a) -&amp;gt; Maybe a -&amp;gt; b -&amp;gt; Maybe a
*Main Lib&amp;gt; foldl (foldFunction (\_ x-&amp;gt; if x &amp;gt; 10 then Nothing else Just x)) (Just 0) [0..10]
Just 10
*Main Lib&amp;gt; foldl (foldFunction (\_ x-&amp;gt; if x &amp;gt; 10 then Nothing else Just x)) (Just 0) [0..11]
Nothing
*Main Lib&amp;gt; foldl (foldFunction (\_ x-&amp;gt; if x &amp;gt; 10 then Nothing else Just x)) (Just 0) [0..]
^CInterrupted.
*Main Lib&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;UPDATE: I&amp;rsquo;ve been pointed at &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Control-Monad.html#v:foldM&#34;&gt;&lt;code&gt;foldM&lt;/code&gt;&lt;/a&gt; from &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Control-Monad.html&#34;&gt;&lt;code&gt;Control.Monad&lt;/code&gt;&lt;/a&gt;.
The above can be written as:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*Main Lib&amp;gt; :m + Control.Monad
*Main Lib Control.Monad&amp;gt; :t foldM
foldM :: (Foldable t, Monad m) =&amp;gt; (b -&amp;gt; a -&amp;gt; m b) -&amp;gt; b -&amp;gt; t a -&amp;gt; m b
*Main Lib Control.Monad&amp;gt; foldM (\_ x -&amp;gt; if x &amp;gt; 10 then Nothing else Just x) 0 [0..10]
Just 10
*Main Lib Control.Monad&amp;gt; foldM (\_ x -&amp;gt; if x &amp;gt; 10 then Nothing else Just x) 0 [0..11]
Nothing
*Main Lib Control.Monad&amp;gt; foldM (\_ x -&amp;gt; if x &amp;gt; 10 then Nothing else Just x) 0 [0..]
Nothing
*Main Lib Control.Monad&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Interestingly &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Control-Monad.html#v:foldM&#34;&gt;&lt;code&gt;foldM&lt;/code&gt;&lt;/a&gt; has this &amp;ldquo;early exit&amp;rdquo;, as you can see it returned
&lt;code&gt;Nothing&lt;/code&gt; when ran on the infinite list &lt;code&gt;[0..]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In my case, I wasn&amp;rsquo;t actually bothered about the accumulator value whether the
fold bailed early or not.  In that case I could have used &lt;a href=&#34;https://hackage.haskell.org/package/base-4.12.0.0/docs/Control-Monad.html#v:foldM_&#34;&gt;&lt;code&gt;foldM_&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;*Main Lib Control.Monad&amp;gt; foldM_ (\_ x -&amp;gt; if x &amp;gt; 10 then Nothing else Just x) 0 [0..10]
Just ()
*Main Lib Control.Monad&amp;gt; foldM_ (\_ x -&amp;gt; if x &amp;gt; 10 then Nothing else Just x) 0 [0..11]
Nothing
*Main Lib Control.Monad&amp;gt; foldM_ (\_ x -&amp;gt; if x &amp;gt; 10 then Nothing else Just x) 0 [0..]
Nothing
*Main Lib Control.Monad&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Looking at our &lt;code&gt;foldFunction&lt;/code&gt; above, it&amp;rsquo;s actually a reimplementation of &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt;
from the &lt;a href=&#34;http://hackage.haskell.org/package/base-4.12.0.0/docs/src/GHC.Base.html#line-854&#34;&gt;implementation of the Monad typeclass for Maybe&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s interesting that &lt;code&gt;foldM&lt;/code&gt; was able to do this &amp;ldquo;early exit&amp;rdquo; but &lt;code&gt;foldl&lt;/code&gt;
wasn&amp;rsquo;t.  I&amp;rsquo;ll have to look at the source code and see if I can work out why.&lt;/p&gt;
&lt;p&gt;Having a fold that can bail is a powerful pattern when combined with infinite
lists.  I&amp;rsquo;ll remember this one.&lt;/p&gt;
&lt;h2 id=&#34;trees&#34;&gt;Trees&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://adventofcode.com/2019/day/6&#34;&gt;Day 6&lt;/a&gt; was all about tree structures.&lt;/p&gt;
&lt;p&gt;The problem is presented as: &amp;ldquo;you&amp;rsquo;re given a bunch of data on which planetary bodies
orbit which&amp;rdquo;, with an implication of there being an orbiter and orbitee.  In Physics
this would be the model for when one body is much more massive than the other.
We think of the Moon orbiting the Earth, when really they&amp;rsquo;re a binary pair orbiting
a common centre of mass.  You&amp;rsquo;re then asked to count the total number of direct and
indirect orbits (orbiting something via orbiting something that&amp;rsquo;s orbiting it).
This problem was going to be about finding the data
structure that best describes the overall system and using it.&lt;/p&gt;
&lt;p&gt;My first thought was &amp;ldquo;Tree or DAG&lt;sup id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;?&amp;quot;.  A generic Graph could be ruled out as:
C orbiting B, orbiting A, orbiting C, is nonsense. Try and draw it on a piece of
paper.  To decide &amp;ldquo;Tree or DAG&amp;rdquo; I though about if a &amp;ldquo;diamond shape&amp;rdquo; made sense.
I.e. D orbiting C &amp;amp; B, which are both orbiting A.  Trying to draw this on a piece
of paper showed that a &amp;ldquo;diamond shape&amp;rdquo; wouldn&amp;rsquo;t work in general, as in the model,
a body can&amp;rsquo;t orbit two other bodies. Tree it is!&lt;/p&gt;
&lt;p&gt;Any number of bodies can be orbiting a body, so we want a tree where a node can
point to any number of subtrees.  &lt;a href=&#34;https://hackage.haskell.org/package/containers-0.6.2.1/docs/Data-Tree.html&#34;&gt;&lt;code&gt;Data.Tree&lt;/code&gt;&lt;/a&gt; fits the bill.&lt;/p&gt;
&lt;p&gt;The input data was a file listing all the orbits.  So for B &amp;amp; C orbiting A, and D
orbiting C the input data would look like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A)B
A)C
C)D
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;)&lt;/code&gt; means &amp;ldquo;is orbited by&amp;rdquo; so:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A is orbited by B.  A is orbited by C. C is orbited by D.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the nomenclature of this problem, D is &amp;ldquo;indirectly orbiting&amp;rdquo; A.  A could be the Sun,
B could be Venus, C could be the Earth, D would then be the Moon.&lt;/p&gt;
&lt;p&gt;From the giant input I was given, I didn&amp;rsquo;t know whether there was going to be more
than one &amp;ldquo;root&amp;rdquo;/&amp;ldquo;orbital centre&amp;rdquo;, so I&amp;rsquo;d need to use a &lt;a href=&#34;https://hackage.haskell.org/package/containers-0.6.2.1/docs/Data-Tree.html#t:Forest&#34;&gt;forest&lt;/a&gt;, which in
&lt;code&gt;Data.Tree&lt;/code&gt; is just a type alias for a list of trees.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Forest&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;Tree&lt;/span&gt; a]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In my solution I was able to put the input data into a forest with
&lt;a href=&#34;https://hackage.haskell.org/package/containers-0.6.2.1/docs/Data-Tree.html#v:unfoldForest&#34;&gt;&lt;code&gt;unfoldForest&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;unfoldForest&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (b &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; (a, [b])) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [b] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Forest&lt;/span&gt; a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;b&lt;/code&gt; is the type of the &amp;ldquo;seed values&amp;rdquo;.  A &amp;ldquo;seed value&amp;rdquo; is a value from which a node
can be generated.  To build the &lt;code&gt;Forest&lt;/code&gt;: &lt;code&gt;unfoldForest&lt;/code&gt; (and similarly &lt;code&gt;unfoldTree&lt;/code&gt;),
take a function that takes a seed value and produces the node data and a list of
seed values for all subtrees from the node. &lt;code&gt;unfoldForest&lt;/code&gt; then takes a list of seed
values for the roots of the trees in the forest, whereas &lt;code&gt;unfoldTree&lt;/code&gt; take a single
seed value.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d split the input data into a list of tuples of &lt;code&gt;String&lt;/code&gt;s where the first element
of the tuple was the orbitee and the second was the orbiter.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;parseOrbit&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case, both types &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; in &lt;code&gt;unfoldForest&lt;/code&gt; will find the concrete
type of &lt;code&gt;String&lt;/code&gt;.  Both the seed value and the node data will just be the name
of the body given in the data.&lt;/p&gt;
&lt;p&gt;First I needed to find what the initial seed values, the roots, were in the data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- Which bodies do not orbit anything?&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;roots&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Eq&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [(a,a)] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [a]
&lt;span style=&#34;color:#a6e22e&#34;&gt;roots&lt;/span&gt; orbits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [x &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; (x, y) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; orbits, notElem x &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; fmap snd &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; orbits]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then, given the orbit data, I was able to describe the &amp;ldquo;unfold function&amp;rdquo;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;-- Given the orbit data, what orbits a given body?&lt;/span&gt;
&lt;span style=&#34;color:#a6e22e&#34;&gt;forestBuilder&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Eq&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; [(a,a)] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; (a,[a])
&lt;span style=&#34;color:#a6e22e&#34;&gt;forestBuilder&lt;/span&gt; orbits body &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (body, [snd orbit &lt;span style=&#34;color:#f92672&#34;&gt;|&lt;/span&gt; orbit &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; orbits, body &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; fst orbit])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;forestBuilder orbits&lt;/code&gt; would give our &amp;ldquo;unfold function&amp;rdquo;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;orbits&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; [(&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;)]

&lt;span style=&#34;color:#a6e22e&#34;&gt;unfoldFunction&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;, [&lt;span style=&#34;color:#66d9ef&#34;&gt;String&lt;/span&gt;])
&lt;span style=&#34;color:#a6e22e&#34;&gt;unfoldFunction&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; forestBuilder orbits
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Stringing that together, we can load the input data into a forest:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt;
  contents &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; fmap lines &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; readFile &lt;span style=&#34;color:#f92672&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;input.txt&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; orbits &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; fmap parseOrbit contents
  &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; myForest &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; unfoldForest (forestBuilder orbits) (roots orbits)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now the data is loaded into a &lt;code&gt;Forest&lt;/code&gt;, I want to walk through the forest and
count how many steps from the root each node is.  Summing all those will give
us the number of direct and indirect orbits.&lt;/p&gt;
&lt;p&gt;I was hoping to, symmetrically, use &lt;a href=&#34;https://hackage.haskell.org/package/containers-0.6.2.1/docs/Data-Tree.html#g:3&#34;&gt;&lt;code&gt;foldTree&lt;/code&gt;&lt;/a&gt; to get the answer.&lt;/p&gt;
&lt;p&gt;I couldn&amp;rsquo;t see how to do it with &lt;code&gt;foldTree&lt;/code&gt;.  I had &lt;code&gt;Tree String&lt;/code&gt; where the
string data was wholly uninteresting when counting the number of orbits
as I wanted to sum the depths of each node. The type signature of
&lt;code&gt;foldTree&lt;/code&gt; appears to want a function that uses the node values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;foldTree&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; (a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [b] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Tree&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I ended up splitting the &lt;code&gt;Tree&lt;/code&gt; into its &amp;ldquo;levels&amp;rdquo; with &lt;a href=&#34;https://hackage.haskell.org/package/containers-0.6.2.1/docs/Data-Tree.html#v:levels&#34;&gt;&lt;code&gt;levels&lt;/code&gt;&lt;/a&gt;
and then folding over that.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;levels&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Tree&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [[a]]

&lt;span style=&#34;color:#a6e22e&#34;&gt;sumDepthsTree&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Integral&lt;/span&gt; b &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Tree&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; b
&lt;span style=&#34;color:#a6e22e&#34;&gt;sumDepthsTree&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; snd &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; foldl foldFunc (&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;) &lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt; levels

&lt;span style=&#34;color:#a6e22e&#34;&gt;foldFunc&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;::&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;Integral&lt;/span&gt; a &lt;span style=&#34;color:#f92672&#34;&gt;=&amp;gt;&lt;/span&gt; (a,a) &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; [b] &lt;span style=&#34;color:#f92672&#34;&gt;-&amp;gt;&lt;/span&gt; (a,a)
&lt;span style=&#34;color:#a6e22e&#34;&gt;foldFunc&lt;/span&gt; (depth, acc) x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (depth &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, acc &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; depth &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; genericLength x)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I used a tuple accumulator to record the depth (i.e. the index within &lt;code&gt;levels mytree&lt;/code&gt; and the accumulating sum of the depths).&lt;/p&gt;
&lt;p&gt;That was enough to give me the answer to the first part of &lt;a href=&#34;https://adventofcode.com/2019/day/6&#34;&gt;Day 6&lt;/a&gt;.  In
writing this I&amp;rsquo;ve just realised there&amp;rsquo;s a second half to the problem that I
missed before which looks like it&amp;rsquo;s asking you to calculate how many steps it
takes to get from one tree node to another.  I&amp;rsquo;ll come back to this at some
point and add to my solution.&lt;/p&gt;
&lt;h2 id=&#34;no-editor-integration-yet&#34;&gt;No Editor Integration Yet&lt;/h2&gt;
&lt;p&gt;Interestingly, I didn&amp;rsquo;t setup any editor integration for Haskell in this first
week.&lt;/p&gt;
&lt;p&gt;While my applications are only being split between &lt;code&gt;src/Lib.hs&lt;/code&gt; &amp;amp;
&lt;code&gt;app/Main.hs&lt;/code&gt;, and I can search on &lt;a href=&#34;https://hoogle.haskell.org/&#34;&gt;Hoogle&lt;/a&gt;, I&amp;rsquo;ve not felt like I need
it.&lt;/p&gt;
&lt;p&gt;The syntax is fairly minimal, so I haven&amp;rsquo;t needed an editor to write code for
me, and it is readable as text.  NeoVim gives me Haskell syntax highlighting
out of the box and I&amp;rsquo;m yet to need any of the IDE level functionality.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve blogged before about how &lt;a href=&#34;https://tarquin-the-brave.github.io/blog/posts/ide-read-code/&#34;&gt;you shouldn&amp;rsquo;t need an IDE to read
code&lt;/a&gt; as code should be &amp;ldquo;readable as text&amp;rdquo;, and I&amp;rsquo;m pleased that
Haskell is living up to that.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll keep rolling with syntax highlighting and nothing else for now.  If I need
to get some better integration I&amp;rsquo;ll look at installing a Haskell language
server&lt;sup id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt; and hooking NeoVim&amp;rsquo;s &lt;a href=&#34;https://github.com/autozimu/LanguageClient-neovim&#34;&gt;language server
client&lt;/a&gt; to it.&lt;/p&gt;
&lt;h2 id=&#34;packaging-and-modules&#34;&gt;Packaging and Modules&lt;/h2&gt;
&lt;p&gt;The simplest way to import functions from a module is to do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Lib
&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Data.Sequence
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This pulls in the functions exported by those modules into the current
namespace.&lt;/p&gt;
&lt;p&gt;Importing like this makes code harder to &amp;ldquo;read as text&amp;rdquo; as when you see a
function, where it&amp;rsquo;s come from is not explicit in code.  You&amp;rsquo;d have to look
through what each module you import exports to find the function you&amp;rsquo;re using.&lt;/p&gt;
&lt;p&gt;This can be fixed by importing only specific functions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; Lib (&lt;span style=&#34;color:#a6e22e&#34;&gt;someFunc&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now only the &lt;code&gt;someFunc&lt;/code&gt; function will be imported from &lt;code&gt;Lib&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Collisions between functions imported from different libraries and Prelude can
be resolved with qualified imports:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; quailfied &lt;span style=&#34;color:#66d9ef&#34;&gt;Lib&lt;/span&gt; as &lt;span style=&#34;color:#66d9ef&#34;&gt;L&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Then every function from &lt;code&gt;Lib&lt;/code&gt; is callable as &lt;code&gt;L.someFunc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;These can be combined to do qualified imports and be explicit about the
functions imported:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-haskell&#34; data-lang=&#34;haskell&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;qualified&lt;/span&gt; Lib &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; L (someFunc)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;, again resulting in &lt;code&gt;someFunc&lt;/code&gt; being callable as &lt;code&gt;L.someFunc&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In order to keep my code as explicit as possible, and thus as &amp;ldquo;readable as
code&amp;rdquo; as possible, I&amp;rsquo;m going to use this as a convention from now on.  I&amp;rsquo;ll
also try to read some open source Haskell to see if the wider community has a
convention on this.&lt;/p&gt;
&lt;p&gt;This may end up being laborious.  In Rust, importing is &lt;em&gt;explicit&lt;/em&gt; in this way,
but a large amount of functionality is held in methods implemented on
structures and in traits.  You only have to import the &lt;code&gt;struct&lt;/code&gt; or &lt;code&gt;trait&lt;/code&gt; to
get the methods. In Haskell, as everything is a function, I&amp;rsquo;ll need to import
each function explicitly.&lt;/p&gt;
&lt;p&gt;If I end up giving up on this as a convention I&amp;rsquo;ll look into integrating a
Haskell language server&lt;sup id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;7&lt;/a&gt;&lt;/sup&gt; into my editor to give me the &amp;ldquo;go to definition&amp;rdquo;
and all those goodies.&lt;/p&gt;
&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Doing some of the first few &lt;a href=&#34;https://adventofcode.com/&#34;&gt;Advent of Code&lt;/a&gt; problems was good for
revising and refining some of the basics.  I reckon I could churn through all
of the problems using the basic tools I know how to use: list manipulation,
recursion, functors, applicative functors, etc.  But, I want to go away and do
some wider reading before continuing so I can really level up my Haskell.&lt;/p&gt;
&lt;p&gt;My general feelings about Haskell thus far, learning it for the second time:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I&amp;rsquo;m enjoying the purity and clean syntax.&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;m enjoying using the word &amp;ldquo;function&amp;rdquo; without feeling a little guilty.&lt;/li&gt;
&lt;li&gt;Compared to Rust, Haskell is more implicit.  It appears there&amp;rsquo;s ways of being
totally explicit about things and I&amp;rsquo;ll look to do that.  Maybe with a bit
more experience I&amp;rsquo;ll relax a little bit.&lt;/li&gt;
&lt;li&gt;I haven&amp;rsquo;t fully learned how the packaging works yet, I&amp;rsquo;ll feel more
comfortable when I have.  One thing I don&amp;rsquo;t know is how you find out what
&amp;ldquo;package&amp;rdquo; a module is found in.&lt;/li&gt;
&lt;li&gt;It seems to be the way to search for &amp;ldquo;I need a thing that does this&amp;rdquo; is to
know what type signature you&amp;rsquo;re looking for is, and type that into the search
bar on &lt;a href=&#34;https://hoogle.haskell.org/&#34;&gt;Hoogle&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;There seems to be a lot of different ways to do the same thing, and I&amp;rsquo;m not
sure yet where to find advice on what good approaches are.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;ll go do some reading, then come back to these problems.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://tarquin-the-brave.github.io/blog/posts/re-learning-haskell-2/&#34;&gt;&lt;strong&gt;Re-learning Haskell with Advent Of Code - Part 2&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Learn you a Haskell for greater good. &lt;a href=&#34;http://learnyouahaskell.com/chapters&#34;&gt;http://learnyouahaskell.com/chapters&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Haskell from first principles. &lt;a href=&#34;https://haskellbook.com/&#34;&gt;https://haskellbook.com/&lt;/a&gt; &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Advent of code provided a coding challenge on each day of December. &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:4&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://python-poetry.org/&#34;&gt;Poetry&lt;/a&gt; does quite a good job of Python dependency management.
It&amp;rsquo;s not totally watertight, but it&amp;rsquo;s a huge improvement on &lt;a href=&#34;https://pypi.org/project/pip/&#34;&gt;pip&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://pipenv-fork.readthedocs.io/en/latest/&#34;&gt;Pipenv&lt;/a&gt;
to which my derision is directed.  And Poetry has a very pretty website. &lt;a href=&#34;#fnref:4&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:5&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;Rust&amp;rsquo;s &lt;code&gt;Option&amp;lt;T&amp;gt;&lt;/code&gt; (with variants &lt;code&gt;Some&amp;lt;T&amp;gt;&lt;/code&gt; &amp;amp; &lt;code&gt;None&lt;/code&gt;) enum is equivalent to Haskell&amp;rsquo;s &lt;code&gt;Maybe T&lt;/code&gt;
with &lt;code&gt;Just T&lt;/code&gt; and &lt;code&gt;Nothing&lt;/code&gt;. &lt;a href=&#34;#fnref:5&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:6&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;DAG: Direct Acyclic Graph: &lt;a href=&#34;https://en.wikipedia.org/wiki/Directed_acyclic_graph&#34;&gt;https://en.wikipedia.org/wiki/Directed_acyclic_graph&lt;/a&gt; &lt;a href=&#34;#fnref:6&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:7&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;I&amp;rsquo;ve found &lt;a href=&#34;https://github.com/haskell/haskell-language-server&#34;&gt;Haskell language server&lt;/a&gt;, but as the README says, it&amp;rsquo;s in &amp;ldquo;early stages&amp;rdquo;. &lt;a href=&#34;#fnref:7&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
     </item>
   
     <item>
       <title>Itertools - A Force for Good?</title>
       <link>https://tarquin-the-brave.github.io/blog/posts/iterttools/</link>
       <pubDate>Sat, 28 Mar 2020 12:52:30 +0000</pubDate>
       
       <guid>https://tarquin-the-brave.github.io/blog/posts/iterttools/</guid>
       <description>&lt;p&gt;Itertools are a way of bringing along a bunch of list manipulating goodies from
functional languages into procedural languages.  I&amp;rsquo;ve encountered it as a
&lt;a href=&#34;https://docs.python.org/3.8/library/itertools.html&#34;&gt;Python library&lt;/a&gt; and a &lt;a href=&#34;https://docs.rs/itertools/0.9.0/itertools/trait.Itertools.html&#34;&gt;Rust crate&lt;/a&gt;.  A quick bit
of google&amp;rsquo;ing shows some evidence of this existing in other languages.&lt;/p&gt;
&lt;p&gt;I used to write Python a lot.  Now I write mostly Rust.  I used to err on the
side of not using &lt;code&gt;itertools&lt;/code&gt; in Python.  I&amp;rsquo;m more than happy to read or write
Rust code using &lt;code&gt;itertools&lt;/code&gt;.  The reasons why are about audience buy in, how
effectively are you communicating an idea, and ultimately what effect does it
have on people&amp;rsquo;s ability to reason about your code.&lt;/p&gt;
&lt;p&gt;For a Rust developer, coming across the &lt;a href=&#34;https://docs.rs/itertools/0.9.0/itertools/trait.Itertools.html&#34;&gt;Itertools crate&lt;/a&gt; doesn&amp;rsquo;t
require a big leap of understanding. The &lt;code&gt;Itertools&lt;/code&gt; trait is merely an
extension to the &lt;a href=&#34;https://doc.rust-lang.org/std/iter/trait.Iterator.html&#34;&gt;&lt;code&gt;Iterator&lt;/code&gt; trait&lt;/a&gt; from the standard library which
has methods for the likes of &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;fold&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;chain&lt;/code&gt;, etc.  These
concepts from functional languages are already first class citizens in Rust.
You don&amp;rsquo;t need the reader to cross that conceptual bridge of &amp;ldquo;what&amp;rsquo;s wrong with
a for loop?&amp;quot;, they&amp;rsquo;re already across with you.  Rust is explicit about how
values are passed to functions (by reference/by value, mutably/immutably), and
imposes borrowing rules.  This means you can iterate with confidence.  Also,
Rust is strongly typed and has fantastic documentation as a core tenet of the
language.  This mean that even if there are some concepts introduced that you
don&amp;rsquo;t quite understand, or you don&amp;rsquo;t quite follow an example of a method from
the documentation: you can trust the type, and the compiler will tell you if
you&amp;rsquo;ve misunderstood.  If you&amp;rsquo;re reading code, and your not all that familiar
with the concept behind a method, you can can still reason about how data is
being manipulated by reading the type declaration of the function.&lt;/p&gt;
&lt;p&gt;In Python, on the other hand, using &lt;a href=&#34;https://docs.python.org/3.8/library/itertools.html&#34;&gt;&lt;code&gt;itertools&lt;/code&gt;&lt;/a&gt; and
&lt;a href=&#34;https://docs.python.org/3/library/functools.html&#34;&gt;&lt;code&gt;functools&lt;/code&gt;&lt;/a&gt; introduces functional concepts&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, which are a
whole new dimension to the language. The nature of the language (duck-typed,
implicit about how values are passed, and runtime evaluated) doesn&amp;rsquo;t give the
same safety net and leg up to those not already very familiar with the concepts
at play and the pitfalls of their implementation in Python.  It&amp;rsquo;ll depend a
little on what the particular community who you share a codebase with are like,
but there&amp;rsquo;s likely to be a reasonable proportion of Python developers who don&amp;rsquo;t
necessarily know what you&amp;rsquo;ve done.  For them: you&amp;rsquo;ve taken something that could
have been expressed in a few lines, and tucked it away behind a word they
haven&amp;rsquo;t seen before.  And then when they do learn what that method is doing,
it&amp;rsquo;s not like they can abstract over that forever more.&lt;/p&gt;
&lt;p&gt;Functional languages can have all this wonderful functionality abstracted away
into single words (&lt;code&gt;fold&lt;/code&gt;, &lt;code&gt;intercalate&lt;/code&gt;, &amp;hellip;) because data is immutable and
functions don&amp;rsquo;t have side effects.  Once you&amp;rsquo;ve learned how a particular
function works, you can let it do its thing.  Maybe you pop back to glance at
the type signature (if it has one) from time to time, but mostly you know: it
does a thing, you can abstract over it with confidence.&lt;/p&gt;
&lt;p&gt;Rust does quite a special thing of allowing mutation, but provide a mechanism
where that mutation is explicit and the type system provides enough confidence
that you can make abstractions safely.&lt;/p&gt;
&lt;p&gt;An example that a friend sent me recently, which isn&amp;rsquo;t specifically about
&lt;code&gt;itertools&lt;/code&gt; or &lt;code&gt;functools&lt;/code&gt; but is an example of where these lower level details
that are hidden from the syntax really can catch you out.  Lambda
functions create anonymous functions in-line, and are equivalent to
defining a function elsewhere and calling it.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ python3
Python 3.6.9 (default, Nov  7 2019, 10:44:02)
[GCC 8.3.0] on linux
Type &amp;quot;help&amp;quot;, &amp;quot;copyright&amp;quot;, &amp;quot;credits&amp;quot; or &amp;quot;license&amp;quot; for more information.
&amp;gt;&amp;gt;&amp;gt; x = 4
&amp;gt;&amp;gt;&amp;gt; x
4
&amp;gt;&amp;gt;&amp;gt; x = lambda: 4
&amp;gt;&amp;gt;&amp;gt; x
&amp;lt;function &amp;lt;lambda&amp;gt; at 0x7f6b8665abf8&amp;gt;
&amp;gt;&amp;gt;&amp;gt; x()
4
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Assign an anonymous function to &lt;code&gt;x&lt;/code&gt; and then call it.  Happy with that.  Last
week, a friend of mine sent me this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;[x() &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; [&lt;span style=&#34;color:#66d9ef&#34;&gt;lambda&lt;/span&gt;: i &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)]]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let&amp;rsquo;s see what that does:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; [x() for x in [lambda: i for i in range(0,3)]]
[2, 2, 2]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Wat?  Let&amp;rsquo;s try building up to that:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; [i for i in range(0,3)]
[0, 1, 2]
&amp;gt;&amp;gt;&amp;gt; [x for x in [i for i in range(0,3)]]
[0, 1, 2]
&amp;gt;&amp;gt;&amp;gt; [x for x in [lambda: i for i in range(0,3)]]
[&amp;lt;function &amp;lt;listcomp&amp;gt;.&amp;lt;lambda&amp;gt; at 0x7f6b8665ad90&amp;gt;, &amp;lt;function &amp;lt;listcomp&amp;gt;.&amp;lt;lambda&amp;gt; at 0x7f6b8665ae18&amp;gt;, &amp;lt;function &amp;lt;listcomp&amp;gt;.&amp;lt;lambda&amp;gt; at 0x7f6b8665aea0&amp;gt;]
&amp;gt;&amp;gt;&amp;gt; [x() for x in [lambda: i for i in range(0,3)]]
[2, 2, 2]
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Wat?&lt;/p&gt;
&lt;p&gt;When I worked in Python a lot I would see this sort of thing happen all the
time.  Either you couldn&amp;rsquo;t understand why your code wasn&amp;rsquo;t doing the simple
thing you were expressing, or worse, committed code was silently doing the
wrong thing causing an error at the opposite end of the application.  To figure
out what&amp;rsquo;s going on you have to context switch out of the &amp;ldquo;higher level&amp;rdquo; world
you&amp;rsquo;ve been happily reading and writing code in, remind yourself about how each
thing works behind the scenes and attempt to reason it through.&lt;/p&gt;
&lt;p&gt;This is why I think Python is a bit self defeating.  To be great at Python, to
read Python and understand what it&amp;rsquo;s really doing, to write Python that works
and is performant, you need an understanding of what&amp;rsquo;s going on behind the
scenes. But the whole point of Python is that it&amp;rsquo;s a higher level language.
The main beauty of it for me, is that someone who doesn&amp;rsquo;t know any programming
languages can read it and have a decent guess at what&amp;rsquo;s going on.  It&amp;rsquo;s code in
plain English.  But to get good you need to learn about what&amp;rsquo;s going on behind
the scenes.  Python isn&amp;rsquo;t going to teach you those things.  You&amp;rsquo;d need to learn
those things in another, supposedly &amp;ldquo;lower level&amp;rdquo;, language and bring those
learnings back into your Python.&lt;/p&gt;
&lt;p&gt;Because you have to keep these lower level details in your mind when working
with Python, with mutability and how values are passed being implicit, you
can&amp;rsquo;t abstract with confidence.  These functional goodies from &lt;code&gt;itertools&lt;/code&gt; and
&lt;code&gt;functools&lt;/code&gt; lose their power and run the risk of becoming more &amp;ldquo;complexity
hiding&amp;rdquo; than good abstractions.&lt;/p&gt;
&lt;p&gt;Were I to go back to writing Python regularly I would probably look to make use
of &lt;code&gt;itertools&lt;/code&gt; &amp;amp; &lt;code&gt;functools&lt;/code&gt; as I reckon I&amp;rsquo;d probably write more bugs if I were
to write it out in loops manually.  But I&amp;rsquo;d only do it with buy in from
everyone I was working on that Python project with, and I&amp;rsquo;d keep some notes
around about what the methods I&amp;rsquo;m using are doing under the covers for the time
when I inevitably trip up.&lt;/p&gt;
&lt;p&gt;So are &amp;ldquo;Itertools&amp;rdquo; a force for good in the world.  Yes, provided the language
can provide the guarantees that make the abstractions safe and powerful.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;A &lt;a href=&#34;https://skerritt.blog/learn-functional-python-in-10-minutes/&#34;&gt;blog post&lt;/a&gt; that gives a quick run through of using
functional concepts in Python.  It&amp;rsquo;s much more approachable
than the &lt;a href=&#34;https://docs.python.org/3/howto/functional.html&#34;&gt;official docs&lt;/a&gt; I like how the author presents
it as &amp;ldquo;here are some things you &lt;em&gt;can&lt;/em&gt; do, I&amp;rsquo;m not saying you
&lt;em&gt;should&lt;/em&gt; use any of them&amp;rdquo;.  And they cover how functional
patterns are considered &amp;ldquo;not Pythonic&amp;rdquo; by some&amp;hellip; Not that
someone waving a magic word like &lt;em&gt;Pythonic&lt;/em&gt; in your face should
ever stop you from doing anything. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
     </item>
   
     <item>
       <title>Rust - Converting between file formats - JSON, YAML, &amp; TOML</title>
       <link>https://tarquin-the-brave.github.io/blog/posts/rust-serde/</link>
       <pubDate>Thu, 26 Mar 2020 21:00:00 +0000</pubDate>
       
       <guid>https://tarquin-the-brave.github.io/blog/posts/rust-serde/</guid>
       <description>&lt;p&gt;Rust&amp;rsquo;s &lt;a href=&#34;https://crates.io/crates/serde&#34;&gt;&lt;code&gt;serde&lt;/code&gt; library&lt;/a&gt; is a generic serialize-deserialize framework
that has been implemented for &lt;a href=&#34;https://docs.serde.rs/serde/#data-formats&#34;&gt;many file formats&lt;/a&gt;.  It&amp;rsquo;s an incredibly
powerful framework and well worth giving &lt;a href=&#34;https://docs.serde.rs/serde/&#34;&gt;the documentation&lt;/a&gt; a read.&lt;/p&gt;
&lt;p&gt;It can deserialize a file format into a strongly typed rust data structure, so
that the data in code has no affiliation to the data format it was read from,
then can be serialized into another file format.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#![&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;allow(unused_variables)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;use&lt;/span&gt; serde_derive::{Deserialize, Serialize};

&lt;span style=&#34;color:#75715e&#34;&gt;#[&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;derive(Serialize, Deserialize, Debug, Clone, PartialEq)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#[&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;serde(rename_all = &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;camelCase&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;, deny_unknown_fields)&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;MyData&lt;/span&gt; {
    field_one: &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;,
    field_two: String,
    field_three: &lt;span style=&#34;color:#66d9ef&#34;&gt;bool&lt;/span&gt;,
    some_data: &lt;span style=&#34;color:#a6e22e&#34;&gt;std&lt;/span&gt;::collections::HashMap&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;String, &lt;span style=&#34;color:#66d9ef&#34;&gt;usize&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;,
}

&lt;span style=&#34;color:#66d9ef&#34;&gt;fn&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() -&amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;anyhow&lt;/span&gt;::Result&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;()&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; {
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; my_data_yaml &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;
        fieldOne: &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
        fieldTwo: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lorem&amp;#34;&lt;/span&gt;
        fieldThree: &lt;span style=&#34;color:#a6e22e&#34;&gt;true&lt;/span&gt;
        someData:
            &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            y: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
            z: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; my_data_toml &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;
        fieldOne &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
        fieldTwo &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lorem&amp;#34;&lt;/span&gt;
        fieldThree &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;true&lt;/span&gt;

        [someData]
        x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
        z &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; my_data_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;
        {
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fieldOne&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;,
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fieldTwo&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lorem&amp;#34;&lt;/span&gt;,
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fieldThree&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#a6e22e&#34;&gt;true&lt;/span&gt;,
          &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;someData&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;y&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;,
            &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;z&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
          }
        }
        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; deserialized_yaml &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; serde_yaml::from_str::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;MyData&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(my_data_yaml);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; deserialized_toml &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; toml::from_str::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;MyData&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(my_data_toml);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; deserialized_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; serde_json::from_str::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;MyData&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(my_data_json);

    assert&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(deserialized_yaml.is_ok());
    assert&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(deserialized_toml.is_ok());
    assert&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(deserialized_json.is_ok());

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; deserialized_toml_copy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; deserialized_toml.clone();

    assert_eq&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(deserialized_yaml&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;, deserialized_toml&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;);
    assert_eq&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(deserialized_toml_copy&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;, deserialized_json&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;);

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; my_data_yaml_missing_field &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;
        fieldOne: &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
        fieldTwo: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lorem&amp;#34;&lt;/span&gt;
        someData:
            &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            y: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
            z: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; my_data_yaml_extra_field &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;
        fieldOne: &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;
        fieldTwo: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;lorem&amp;#34;&lt;/span&gt;
        fieldThree: &lt;span style=&#34;color:#a6e22e&#34;&gt;true&lt;/span&gt;
        someData:
            &lt;span style=&#34;color:#a6e22e&#34;&gt;x&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            y: &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;
            z: &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;
        out_of_schema_data: &lt;span style=&#34;color:#ae81ff&#34;&gt;42&lt;/span&gt;
        &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;;

    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; data_missing_field &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; serde_yaml::from_str::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;MyData&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(my_data_yaml_missing_field);
    &lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; data_extra_field &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; serde_yaml::from_str::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;MyData&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(my_data_yaml_extra_field);

    assert&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(data_missing_field.is_err());
    &lt;span style=&#34;color:#75715e&#34;&gt;// Because MyData is decorated with `deny_unknown_fields`, adding extra fields
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;// will cause parsing to fail.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    assert&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(data_extra_field.is_err());

    Ok(())
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can also read data into a type that can represent any data in a particular
format, if you don&amp;rsquo;t want to or can&amp;rsquo;t strongly define the contents:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; yaml_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; serde_yaml::from_str::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;serde_yaml::Value&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(my_data_yaml)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; toml_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; toml::from_str::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;toml::Value&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(my_data_toml)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; json_data &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; serde_json::from_str::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;serde_json::Value&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(my_data_json)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Recently I&amp;rsquo;ve found that it&amp;rsquo;s even able to deserialize a type that&amp;rsquo;s supposed
to represent one format straight into another, and conversely can serialize a
type for a certain format into another.  For JSON, YAML, and TOML formats there
are the types &lt;a href=&#34;https://docs.serde.rs/serde_json/enum.Value.html&#34;&gt;&lt;code&gt;serde_json::Value&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://docs.rs/serde_yaml/0.8.11/serde_yaml/enum.Value.html&#34;&gt;&lt;code&gt;serde_yaml::Value&lt;/code&gt;&lt;/a&gt;, and
&lt;a href=&#34;https://docs.rs/toml/0.5.6/toml/value/enum.Value.html&#34;&gt;&lt;code&gt;toml::Value&lt;/code&gt;&lt;/a&gt; which represent any data in their respective formats and
can used to deserialize data when we can&amp;rsquo;t or don&amp;rsquo;t want to define the precise
structure of the data.  It turns out you can read a file format straight into
one of these other types.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; toml_from_yaml &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; serde_yaml::from_str::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;toml::Value&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(my_data_yaml)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;It might be that this conversion fails and the data is not readable into the
other format&amp;rsquo;s &lt;code&gt;Value&lt;/code&gt;, and you&amp;rsquo;ll get a &lt;code&gt;Err&lt;/code&gt;. E.g:
&lt;a href=&#34;https://docs.rs/serde_yaml/0.8.11/src/serde_yaml/mapping.rs.html#10-12&#34;&gt;&lt;code&gt;serde_yaml::Mapping&lt;/code&gt;&lt;/a&gt; allows keys of any variant of &lt;a href=&#34;https://docs.rs/serde_yaml/0.8.11/serde_yaml/enum.Value.html&#34;&gt;&lt;code&gt;Value&lt;/code&gt;&lt;/a&gt;,
however &lt;a href=&#34;https://docs.serde.rs/serde_json/map/struct.Map.html&#34;&gt;&lt;code&gt;serde_json:🗺:Map&lt;/code&gt;&lt;/a&gt; is only implemented with &lt;code&gt;String&lt;/code&gt; as a key
type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; some_yaml &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; r&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;
    [&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;6&lt;/span&gt;]: &lt;span style=&#34;color:#a6e22e&#34;&gt;true&lt;/span&gt;
    &lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;#&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; try_yaml &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; serde_yaml::from_str::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;serde_yaml::Value&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(some_yaml);
&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; try_json &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; serde_yaml::from_str::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;serde_json::Value&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(some_yaml);

assert&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(try_yaml.is_ok());
assert&lt;span style=&#34;color:#f92672&#34;&gt;!&lt;/span&gt;(try_json.is_err());
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This actually has real practical implication.  JSON, for example, is far less
human friendly than either YAML or TOML.  There are libraries, packed with
useful functionality that intend to receive data in a certain format.  Serde&amp;rsquo;s
design decouples this.  &lt;a href=&#34;https://json-schema.org/&#34;&gt;JSON Schema&lt;/a&gt; is an example.  It&amp;rsquo;s a richly
featured schema implementation.  But usually you have to write your schemas in
JSON. &lt;a href=&#34;https://jsonschema.net/home&#34;&gt;JSON Schema Tool&lt;/a&gt; is an online tool that will generate a inferred
schema from some example JSON.  Using the example given when you visit the
page: this JSON:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;checked&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dimensions&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;height&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
    },
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A green door&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;12.5&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt;: [
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;home&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;green&amp;#34;&lt;/span&gt;
    ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;, generates this schema:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$schema&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://json-schema.org/draft-07/schema&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://example.com/root.json&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The Root Schema&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The root schema is the schema that comprises the entire JSON document.&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: {},
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;required&amp;#34;&lt;/span&gt;: [
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;checked&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;dimensions&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt;,
        &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt;
    ],
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;checked&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#/properties/checked&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;boolean&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The Checked Schema&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;An explanation about the purpose of this instance.&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;examples&amp;#34;&lt;/span&gt;: [
                &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
            ]
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;dimensions&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#/properties/dimensions&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;object&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The Dimensions Schema&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;An explanation about the purpose of this instance.&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: {},
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;examples&amp;#34;&lt;/span&gt;: [
                {
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;height&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10.0&lt;/span&gt;,
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5.0&lt;/span&gt;
                }
            ],
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;required&amp;#34;&lt;/span&gt;: [
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;height&amp;#34;&lt;/span&gt;
            ],
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;properties&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;width&amp;#34;&lt;/span&gt;: {
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#/properties/dimensions/properties/width&amp;#34;&lt;/span&gt;,
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;integer&amp;#34;&lt;/span&gt;,
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The Width Schema&amp;#34;&lt;/span&gt;,
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;An explanation about the purpose of this instance.&amp;#34;&lt;/span&gt;,
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;examples&amp;#34;&lt;/span&gt;: [
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
                    ]
                },
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;height&amp;#34;&lt;/span&gt;: {
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#/properties/dimensions/properties/height&amp;#34;&lt;/span&gt;,
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;integer&amp;#34;&lt;/span&gt;,
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The Height Schema&amp;#34;&lt;/span&gt;,
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;An explanation about the purpose of this instance.&amp;#34;&lt;/span&gt;,
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
                    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;examples&amp;#34;&lt;/span&gt;: [
                        &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
                    ]
                }
            }
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;id&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#/properties/id&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;integer&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The Id Schema&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;An explanation about the purpose of this instance.&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;examples&amp;#34;&lt;/span&gt;: [
                &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
            ]
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#/properties/name&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The Name Schema&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;An explanation about the purpose of this instance.&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;examples&amp;#34;&lt;/span&gt;: [
                &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;A green door&amp;#34;&lt;/span&gt;
            ]
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;price&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#/properties/price&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;number&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The Price Schema&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;An explanation about the purpose of this instance.&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;examples&amp;#34;&lt;/span&gt;: [
                &lt;span style=&#34;color:#ae81ff&#34;&gt;12.5&lt;/span&gt;
            ]
        },
        &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;tags&amp;#34;&lt;/span&gt;: {
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#/properties/tags&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;array&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The Tags Schema&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;An explanation about the purpose of this instance.&amp;#34;&lt;/span&gt;,
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: [],
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;examples&amp;#34;&lt;/span&gt;: [
                [
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;home&amp;#34;&lt;/span&gt;,
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;green&amp;#34;&lt;/span&gt;
                ]
            ],
            &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;items&amp;#34;&lt;/span&gt;: {
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;$id&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;#/properties/tags/items&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;type&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;title&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;The Items Schema&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;An explanation about the purpose of this instance.&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;default&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;,
                &lt;span style=&#34;color:#f92672&#34;&gt;&amp;#34;examples&amp;#34;&lt;/span&gt;: [
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;home&amp;#34;&lt;/span&gt;,
                    &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;green&amp;#34;&lt;/span&gt;
                ]
            }
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You could imagine that you might want to expand that schema even further with
defauts, examples and other rules constraining the values of some fields.&lt;/p&gt;
&lt;p&gt;Rust has a library &lt;a href=&#34;https://docs.rs/schemars/0.7.0/schemars/&#34;&gt;&lt;code&gt;schemars&lt;/code&gt;&lt;/a&gt; that implements JSON Schema. While the
documentation goes through examples of &lt;a href=&#34;https://docs.rs/schemars/0.7.0/schemars/#serde-compatibility&#34;&gt;defining schemas in code&lt;/a&gt;, and
serializing with &lt;code&gt;serde_json&lt;/code&gt;, you can read a &lt;a href=&#34;https://docs.rs/schemars/0.7.0/schemars/schema/struct.SchemaObject.html&#34;&gt;&lt;code&gt;SchemaObject&lt;/code&gt;&lt;/a&gt; straight
from YAML, or TOML.  So your application can leverage the functionality of the
&lt;code&gt;SchemaObject&lt;/code&gt; and the &lt;code&gt;schemars&lt;/code&gt; library while getting users write schemas in
a more human readable form.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; json_schema &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; serde_json::from_str::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;schemars::schema::RootSchema&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;std::fs::read_to_string(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example.schema.json&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;,
)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;

&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; json_schema_from_yaml &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; serde_yaml::from_str::&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;schemars::schema::RootSchema&lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt;(
    &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;std::fs::read_to_string(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;example.schema.yaml&amp;#34;&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;,
)&lt;span style=&#34;color:#f92672&#34;&gt;?&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The same JSON Schema from above is much more readable when written in YAML:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;$schema&lt;/span&gt;: http://json-schema.org/draft&lt;span style=&#34;color:#ae81ff&#34;&gt;-07&lt;/span&gt;/schema
&lt;span style=&#34;color:#66d9ef&#34;&gt;$id&lt;/span&gt;: http://example.com/root.json
&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt;: object
&lt;span style=&#34;color:#66d9ef&#34;&gt;title&lt;/span&gt;: The Root Schema
&lt;span style=&#34;color:#66d9ef&#34;&gt;description&lt;/span&gt;: The root schema is the schema that comprises the entire JSON document.
&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;: {}
&lt;span style=&#34;color:#66d9ef&#34;&gt;required&lt;/span&gt;:
  - checked
  - dimensions
  - id
  - name
  - price
  - tags
&lt;span style=&#34;color:#66d9ef&#34;&gt;properties&lt;/span&gt;:
  &lt;span style=&#34;color:#66d9ef&#34;&gt;checked&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;$id&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#/properties/checked&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt;: boolean
    &lt;span style=&#34;color:#66d9ef&#34;&gt;title&lt;/span&gt;: The Checked Schema
    &lt;span style=&#34;color:#66d9ef&#34;&gt;description&lt;/span&gt;: An explanation about the purpose of this instance.
    &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;examples&lt;/span&gt;:
      - &lt;span style=&#34;color:#66d9ef&#34;&gt;false&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;dimensions&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;$id&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#/properties/dimensions&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt;: object
    &lt;span style=&#34;color:#66d9ef&#34;&gt;title&lt;/span&gt;: The Dimensions Schema
    &lt;span style=&#34;color:#66d9ef&#34;&gt;description&lt;/span&gt;: An explanation about the purpose of this instance.
    &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;: {}
    &lt;span style=&#34;color:#66d9ef&#34;&gt;examples&lt;/span&gt;:
      - &lt;span style=&#34;color:#66d9ef&#34;&gt;height&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;width&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;required&lt;/span&gt;:
      - width
      - height
    &lt;span style=&#34;color:#66d9ef&#34;&gt;properties&lt;/span&gt;:
      &lt;span style=&#34;color:#66d9ef&#34;&gt;width&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;$id&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#/properties/dimensions/properties/width&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt;: integer
        &lt;span style=&#34;color:#66d9ef&#34;&gt;title&lt;/span&gt;: The Width Schema
        &lt;span style=&#34;color:#66d9ef&#34;&gt;description&lt;/span&gt;: An explanation about the purpose of this instance.
        &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;examples&lt;/span&gt;:
          - &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;height&lt;/span&gt;:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;$id&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#/properties/dimensions/properties/height&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt;: integer
        &lt;span style=&#34;color:#66d9ef&#34;&gt;title&lt;/span&gt;: The Height Schema
        &lt;span style=&#34;color:#66d9ef&#34;&gt;description&lt;/span&gt;: An explanation about the purpose of this instance.
        &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;examples&lt;/span&gt;:
          - &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;id&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;$id&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#/properties/id&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt;: integer
    &lt;span style=&#34;color:#66d9ef&#34;&gt;title&lt;/span&gt;: The Id Schema
    &lt;span style=&#34;color:#66d9ef&#34;&gt;description&lt;/span&gt;: An explanation about the purpose of this instance.
    &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;examples&lt;/span&gt;:
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;name&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;$id&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#/properties/name&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt;: string
    &lt;span style=&#34;color:#66d9ef&#34;&gt;title&lt;/span&gt;: The Name Schema
    &lt;span style=&#34;color:#66d9ef&#34;&gt;description&lt;/span&gt;: An explanation about the purpose of this instance.
    &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;examples&lt;/span&gt;:
      - A green door
  &lt;span style=&#34;color:#66d9ef&#34;&gt;price&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;$id&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#/properties/price&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt;: number
    &lt;span style=&#34;color:#66d9ef&#34;&gt;title&lt;/span&gt;: The Price Schema
    &lt;span style=&#34;color:#66d9ef&#34;&gt;description&lt;/span&gt;: An explanation about the purpose of this instance.
    &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;examples&lt;/span&gt;:
      - &lt;span style=&#34;color:#ae81ff&#34;&gt;12.5&lt;/span&gt;
  &lt;span style=&#34;color:#66d9ef&#34;&gt;tags&lt;/span&gt;:
    &lt;span style=&#34;color:#66d9ef&#34;&gt;$id&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#/properties/tags&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt;: array
    &lt;span style=&#34;color:#66d9ef&#34;&gt;title&lt;/span&gt;: The Tags Schema
    &lt;span style=&#34;color:#66d9ef&#34;&gt;description&lt;/span&gt;: An explanation about the purpose of this instance.
    &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;: []
    &lt;span style=&#34;color:#66d9ef&#34;&gt;examples&lt;/span&gt;:
      - - home
        - green
    &lt;span style=&#34;color:#66d9ef&#34;&gt;items&lt;/span&gt;:
      &lt;span style=&#34;color:#66d9ef&#34;&gt;$id&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;#/properties/tags/items&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt;: string
      &lt;span style=&#34;color:#66d9ef&#34;&gt;title&lt;/span&gt;: The Items Schema
      &lt;span style=&#34;color:#66d9ef&#34;&gt;description&lt;/span&gt;: An explanation about the purpose of this instance.
      &lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
      &lt;span style=&#34;color:#66d9ef&#34;&gt;examples&lt;/span&gt;:
        - home
        - green
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;I learned that &lt;a href=&#34;https://crates.io/crates/serde&#34;&gt;serde&lt;/a&gt; could do this cross-format parsing by reading the
source code of the &lt;a href=&#34;https://github.com/yoshihitoh/refmt&#34;&gt;refmt&lt;/a&gt; project.&lt;/p&gt;
&lt;p&gt;Examples from this post are &lt;a href=&#34;https://github.com/tarquin-the-brave/serde-cross-format&#34;&gt;mastered in github&lt;/a&gt;.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Language Servers Are Cool</title>
       <link>https://tarquin-the-brave.github.io/blog/posts/language-servers-are-cool/</link>
       <pubDate>Sun, 01 Mar 2020 14:56:43 +0000</pubDate>
       
       <guid>https://tarquin-the-brave.github.io/blog/posts/language-servers-are-cool/</guid>
       <description>&lt;p&gt;In slight contrast to my previous post where I espoused the
virtue of code being text and not  relying on developer tooling
to interact with it: language servers are cool.&lt;/p&gt;
&lt;p&gt;They decouple the back end of gaining semantic understanding
of code in a particular language from the editor implementation.
A &lt;a href=&#34;https://langserver.org/&#34;&gt;language server for each language&lt;/a&gt; can be
written, and the editor only needs to integrate the &lt;a href=&#34;https://microsoft.github.io/language-server-protocol/&#34;&gt;language
server protocol&lt;/a&gt; once, to get a host of IDE style features
for each language.&lt;/p&gt;
&lt;p&gt;This is the sort of solution we need to get rid of editor lock
in, and allow text editors to compete to be the best at editing
text.  With language servers, adding language support for an
editor is cheap. Hopefully now developers will start choosing
text editors on the grounds of how good they are at editing text,
rather than the shopping list of languages they support.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve used &lt;a href=&#34;https://rls.booyaa.wtf/#neovim&#34;&gt;rls&lt;/a&gt; for rust, and &lt;a href=&#34;https://github.com/autozimu/LanguageClient-neovim/wiki/Clangd&#34;&gt;clangd&lt;/a&gt; for C++ with the
&lt;a href=&#34;https://github.com/autozimu/LanguageClient-neovim/&#34;&gt;languageClient-neovim&lt;/a&gt; for neovim. I&amp;rsquo;ve been the envy of
colleagues who use Vim-like editors for the impressive language
support, and the envy of colleagues who use IDEs for the superior
text editing&amp;hellip; Not really.  They don&amp;rsquo;t see why I can&amp;rsquo;t just
install their IDE and be done with it. Anyway,language servers
are a great bit of technology.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>You Shouldn&#39;t Need an IDE to Read Code</title>
       <link>https://tarquin-the-brave.github.io/blog/posts/ide-read-code/</link>
       <pubDate>Sat, 29 Feb 2020 22:30:09 +0000</pubDate>
       
       <guid>https://tarquin-the-brave.github.io/blog/posts/ide-read-code/</guid>
       <description>&lt;p&gt;This is important.&lt;/p&gt;
&lt;p&gt;Code is &lt;em&gt;read&lt;/em&gt; far more often than it&amp;rsquo;s &lt;em&gt;written&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Primarily, it&amp;rsquo;s read through a web GUI.&lt;/p&gt;
&lt;p&gt;You want to read the source code of a library you&amp;rsquo;re using.  Say it&amp;rsquo;s in
Github, you&amp;rsquo;re going to start looking at it through the Github GUI. If you want
to take a deeper look, you might clone the repo and open it in you&amp;rsquo;re editor,
but the vast majority of library code you read will be through a GUI.&lt;/p&gt;
&lt;p&gt;The default medium for reading the changes in a pull request is through a GUI.
Sure, you can pull the branch and open the code up in your editor. When I&amp;rsquo;m
reviewing big changes I do just that. But I shouldn&amp;rsquo;t be required to.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve reviewed code before where I&amp;rsquo;ve made a comment along the line of &amp;ldquo;this
line of code doesn&amp;rsquo;t explain what it&amp;rsquo;s doing&amp;rdquo;, where I&amp;rsquo;ve suggested type
hinting, or renaming things to reflect what&amp;rsquo;s happening, or refactoring the
aggregations that data flows between each line of code so it would make more
sense in the context of the function.  Frustratingly, my comments have received
responses that essentially say: &amp;ldquo;if you were using my editor, it makes perfect
sense&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;My recent concrete example is reviewing code in rust. Rust lets you optionally
type hint in various places, e.g. to specify variable &lt;code&gt;x&lt;/code&gt; as type
&lt;code&gt;SpecificType&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-rust&#34; data-lang=&#34;rust&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;let&lt;/span&gt; x: &lt;span style=&#34;color:#a6e22e&#34;&gt;SpecificType&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; get_a_value();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;There are times where usually optional type declarations are necessary for
compilation because the compiler can&amp;rsquo;t infer the types in your code, but for
the most part, these type hints are optional and can be used by the writer of
the code to check their work or by the reader of the code to understand what&amp;rsquo;s
happening at a type level.&lt;/p&gt;
&lt;p&gt;In rust, types matter. When you&amp;rsquo;re writing and reviewing rust code, you&amp;rsquo;re
thinking about types.  I recently suggested adding some type hinting to some
rust code to make it more readable. I was told, in response, that the type
hinting was unnecessary, and if I was only using the same editor&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; I could
hover my mouse over the line of code and see the information I need.&lt;/p&gt;
&lt;p&gt;I take issue with both of these statements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Yes, the code will compile without the type hinting, but code is not there to
satiate compilers, it&amp;rsquo;s there to communicate ideas between people. And,&lt;/li&gt;
&lt;li&gt;What if I don&amp;rsquo;t? Am I required a specific editor with a specific setup in
order to read your code? A community of developers being locked into specific
tooling is not good.  Even if I was using the same editor setup that gives me
all the IDE features, the web GUI I&amp;rsquo;m likely to review code through doesn&amp;rsquo;t.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Editor lock-in is a problem.  I&amp;rsquo;ve not developed in Java, but I&amp;rsquo;ve been told
it&amp;rsquo;s very difficult to use without an IDE setup for it.&lt;/p&gt;
&lt;p&gt;Everyone has their dev environment setup in a way that suits them. Code is
there to communicate ideas between developers. Requiring someone installing a
bunch of tooling to be able to read your code is mad.&lt;/p&gt;
&lt;p&gt;Maybe I&amp;rsquo;m biased. I use Vim (neovim). I use some IDE like plugins, but mostly
treat code as text, because that&amp;rsquo;s what it is. And Vim is the best text editor
I&amp;rsquo;ve ever used. Setting up the developer features that IDEs give you out of the
box is possible, but takes time to set up and tune.  So I tend not to have much
in the way of these features, especially for languages that I don&amp;rsquo;t write in
every day.  So maybe I&amp;rsquo;m just trying to avoid the self imposed faff of setting
up my editor so I can read code in the same way someone else does.&lt;/p&gt;
&lt;p&gt;But I don&amp;rsquo;t think so. We don&amp;rsquo;t predominantly read code through editors. We want
to avoid entangling simple tasks like reading code with a load of extra
requirements.  These developer tools are useful, but we shouldn&amp;rsquo;t become
reliant on them.  Code is text.  It should only require a vanilla text editor
to write, and only require something that can render text to read.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;VSCode appears to be the senior editor for rust.  I don&amp;rsquo;t have a problem
with this.  By the looks of it, it&amp;rsquo;s a fine GUI based editor and everyone
I know who uses it loves it.  It seems its struck a great balance between
having great functionality out of the box, while being easily tuneable and
feel sharp. If I hadn&amp;rsquo;t drank the Vim coolaid, I imagine I&amp;rsquo;d be using it. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
     </item>
   
     <item>
       <title>Testing Microservices with Mockserver</title>
       <link>https://tarquin-the-brave.github.io/blog/posts/mockserver-dc/</link>
       <pubDate>Tue, 25 Feb 2020 10:07:46 +0000</pubDate>
       
       <guid>https://tarquin-the-brave.github.io/blog/posts/mockserver-dc/</guid>
       <description>&lt;p&gt;&lt;a href=&#34;http://www.mock-server.com/&#34;&gt;Mockserver&lt;/a&gt; is a great piece of tooling that takes a huge amount
of heavy lifting away from testing microservices.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s no need to mock out downstream dependencies or client APIs.  There&amp;rsquo;s no
need to write complex test code to synchronously handle the mechanics of
requests going back and forward while also trying to embody some comprehensible
declaration of the designed behaviour.  It does about as much of the mechanics
of testing for you as it&amp;rsquo;s possible for it to do.&lt;/p&gt;
&lt;p&gt;In all honesty, it was my favourite piece of technology I came across in 2019.&lt;/p&gt;
&lt;p&gt;In this post I&amp;rsquo;ll walk through a patten I&amp;rsquo;ve used a few times to quickly get
rather effective testing of a microservice that drives its API.&lt;/p&gt;
&lt;h1 id=&#34;test-setup&#34;&gt;Test Setup&lt;/h1&gt;
&lt;p&gt;The test deployment has three elements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Your microservice,&lt;/li&gt;
&lt;li&gt;A test driver containing/running your test code, and&lt;/li&gt;
&lt;li&gt;A &lt;a href=&#34;http://www.mock-server.com/&#34;&gt;mockserver&lt;/a&gt; instance.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;rsquo;ve used &lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;docker-compose&lt;/a&gt; to run the containers and manage the routing
between them, but any container runtime&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; would do the job.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://mermaid-js.github.io/mermaid-live-editor/#/edit/eyJjb2RlIjoiZ3JhcGggQlRcbnN1YmdyYXBoIGRvY2tlci1jb21wb3NlXG50ZXN0LXJ1bm5lci0tPnxcInRlc3QtcnVubmVycHJvZ3JhbXMgbW9ja3NlcnZlclwifG1vY2tzZXJ2ZXJcbm1vY2tzZXJ2ZXItLS18XCJtb2Nrc2VydmVyIG1vY2tzIG91dCB0aGUgbWljcm9zZXJ2aWNlIGRlcGVuZGVuY2llcyBhbmQgcmVjb3JkcyBtZXNzYWdlc1wifGEobWljcm9zZXJ2aWNlKVxudGVzdC1ydW5uZXItLT58XCJ0ZXN0LXJ1bm5lciBraWNrcyBtaWNyb3NlcnZpY2UgQVBJIHRvIHN0YXJ0IHRlc3RcInxhKG1pY3Jvc2VydmljZSlcbmVuZFxuXHRcdCIsIm1lcm1haWQiOnsidGhlbWUiOiJkZWZhdWx0In0sInVwZGF0ZUVkaXRvciI6ZmFsc2V9&#34;&gt;&lt;img src=&#34;https://mermaid.ink/img/eyJjb2RlIjoiZ3JhcGggQlRcbnN1YmdyYXBoIGRvY2tlci1jb21wb3NlXG50ZXN0LXJ1bm5lci0tPnxcInRlc3QtcnVubmVycHJvZ3JhbXMgbW9ja3NlcnZlclwifG1vY2tzZXJ2ZXJcbm1vY2tzZXJ2ZXItLS18XCJtb2Nrc2VydmVyIG1vY2tzIG91dCB0aGUgbWljcm9zZXJ2aWNlIGRlcGVuZGVuY2llcyBhbmQgcmVjb3JkcyBtZXNzYWdlc1wifGEobWljcm9zZXJ2aWNlKVxudGVzdC1ydW5uZXItLT58XCJ0ZXN0LXJ1bm5lciBraWNrcyBtaWNyb3NlcnZpY2UgQVBJIHRvIHN0YXJ0IHRlc3RcInxhKG1pY3Jvc2VydmljZSlcbmVuZFxuXHRcdCIsIm1lcm1haWQiOnsidGhlbWUiOiJkZWZhdWx0In0sInVwZGF0ZUVkaXRvciI6ZmFsc2V9&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;mockserver&#34;&gt;Mockserver&lt;/h2&gt;
&lt;p&gt;The key element here is &lt;a href=&#34;http://www.mock-server.com/&#34;&gt;mockserver&lt;/a&gt;. It looks after the mechanics
of mocking out the dependencies of a service.  It&amp;rsquo;s controlled by your test
code over its API. You tell it what messages to expect an how to respond to
them ahead of time. It records what messages have come and gone during the
test.  Your tests can send a request to verify the expectations have been met
or partially met.&lt;/p&gt;
&lt;p&gt;The result is that each test case ends up looking like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A bunch of requests to &lt;a href=&#34;http://www.mock-server.com/&#34;&gt;mockserver&lt;/a&gt;, via the client you&amp;rsquo;ve
chosen, or generated from the &lt;a href=&#34;https://app.swaggerhub.com/apis/jamesdbloom/mock-server-openapi/5.0.x&#34;&gt;openAPI spec&lt;/a&gt;, to establish the
requests that you expect to see and how to respond to each,&lt;/li&gt;
&lt;li&gt;A call to an endpoint on your microservice&amp;rsquo;s API, and&lt;/li&gt;
&lt;li&gt;A call to &lt;a href=&#34;http://www.mock-server.com/&#34;&gt;mockserver&lt;/a&gt; to verify that the expected messages were
received.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mockserver takes away the need to define in the test code all the mechanics
around what messages should be where, when. You define what to expect upfront,
&lt;a href=&#34;http://www.mock-server.com/&#34;&gt;mockserver&lt;/a&gt; records if there&amp;rsquo;s anything the matter with the
messages, and at the end, you can ask it whether the expectations were met.&lt;/p&gt;
&lt;h2 id=&#34;the-test-runner&#34;&gt;The Test Runner&lt;/h2&gt;
&lt;p&gt;We run the test code in its own container to make it easy to control the
environment and to make networking easier when we introduce
&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;docker-compose&lt;/a&gt; to manage the setup.&lt;/p&gt;
&lt;p&gt;We define a &lt;code&gt;Dockerfile&lt;/code&gt; for our test runner that builds a container with the
test code and its dependencies. docker-compose can then rebuild the test
container and run the tests in one &lt;a href=&#34;#running-the-tests&#34;&gt;command&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A result of using &lt;a href=&#34;http://www.mock-server.com/&#34;&gt;mockserver&lt;/a&gt;, and this test setup, is that the
test code is fairly minimal and there&amp;rsquo;s no real &amp;ldquo;test framework&amp;rdquo; required.
Once you have a &lt;a href=&#34;http://www.mock-server.com/&#34;&gt;mockserver&lt;/a&gt; client library&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, and a client
library for your microservice (or decide that defining the requests to kick off
a test on the fly) there&amp;rsquo;s not much more to the tests.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ve written the code for this test runner in Python using &lt;a href=&#34;https://docs.pytest.org/en/latest/&#34;&gt;pytest&lt;/a&gt;.
It worked quite well.  But, as the test code only makes a series of requests,
it&amp;rsquo;s not important.&lt;/p&gt;
&lt;h2 id=&#34;your-microservice&#34;&gt;Your Microservice&lt;/h2&gt;
&lt;p&gt;Configure your microservice with &lt;a href=&#34;http://www.mock-server.com/&#34;&gt;mockserver&lt;/a&gt; as the target for all
downstream traffic.&lt;/p&gt;
&lt;p&gt;The URL of &lt;a href=&#34;http://www.mock-server.com/&#34;&gt;mockserver&lt;/a&gt; corresponds to the service name and the
port it exposes, defined in the &lt;a href=&#34;#docker-compose-example&#34;&gt;docker-compose file&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;docker-compose-example&#34;&gt;Docker Compose Example&lt;/h1&gt;
&lt;p&gt;We have a docker-compose file: &lt;code&gt;docker-compose.yml&lt;/code&gt;&lt;/p&gt;
&lt;script type=&#34;application/javascript&#34; src=&#34;https://gist.github.com/tarquin-the-brave/7a2d813015d049fbe40e3723b0795be4.js?file=docker-compose.yml&#34;&gt;&lt;/script&gt;

&lt;p&gt;In this example, under &lt;code&gt;services:&lt;/code&gt; there&amp;rsquo;s an entry for each of the containers
in this setup.&lt;/p&gt;
&lt;p&gt;Docker compose will route the containers together by giving them a domain name
for the name under &lt;code&gt;services:&lt;/code&gt;, e.g. the microservice can route to the
&lt;a href=&#34;http://www.mock-server.com/&#34;&gt;mockserver&lt;/a&gt; by sending requests to the domain name &lt;code&gt;mockdeps&lt;/code&gt;. The
test runner routes to the microservice by sending requests to the domain name
&lt;code&gt;microservice&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;the-test-runner-1&#34;&gt;The Test Runner&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;test:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In our example the &lt;code&gt;Dockerfile&lt;/code&gt; defining the test runner container is found
under directory &lt;code&gt;fv/&lt;/code&gt;, along with the test code and everything else needed to
build the test runner.&lt;/p&gt;
&lt;p&gt;We define the command to run the tests and allow for arguments to the test
command with &lt;code&gt;${TEST_ARGS}&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;your-microservice-1&#34;&gt;Your Microservice&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;microservice:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;For this example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We allow the image to test to be configured by a variable, defaulting to
&lt;code&gt;x:latest&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;We set the &lt;code&gt;LOG_LEVEL&lt;/code&gt; environment variable in the microservice container.&lt;/li&gt;
&lt;li&gt;We mount in a config file with necessary config, listing the downstream
dependencies that we&amp;rsquo;re mocking out with &lt;a href=&#34;http://www.mock-server.com/&#34;&gt;mockserver&lt;/a&gt; as being at
&lt;code&gt;mockdeps:12345&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we wanted to automate rebuilding the microservice for testing, we could
define a &lt;code&gt;Dockerfile&lt;/code&gt; for the microservice that can build it from source,
perhaps using the &lt;a href=&#34;https://docs.docker.com/develop/develop-images/multistage-build/&#34;&gt;multistage builder pattern&lt;/a&gt;, and include and entry
like the one for &lt;a href=&#34;#the-test-runner-2&#34;&gt;the test runner&lt;/a&gt; rather than specifying a
tag for an already built image.&lt;/p&gt;
&lt;h2 id=&#34;mockserver-1&#34;&gt;Mockserver&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;mockdeps:&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;http://www.mock-server.com/&#34;&gt;mockserver&lt;/a&gt; entry exposes a port and passes that as an
argument to &lt;a href=&#34;http://www.mock-server.com/&#34;&gt;mockserver&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can copy this section verbatim, updating the &lt;a href=&#34;https://hub.docker.com/r/jamesdbloom/mockserver/tags&#34;&gt;mockserver version&lt;/a&gt;.&lt;/p&gt;
&lt;h1 id=&#34;running-the-tests&#34;&gt;Running The Tests&lt;/h1&gt;
&lt;p&gt;With this setup, and our microservice container built (and tagged as &lt;code&gt;x:test&lt;/code&gt;),
we can spin up the microservice and the mockserver with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ IMAGE&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;x:test&amp;#34;&lt;/span&gt; docker-compose up -d mockdeps microservice
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To run the tests:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ docker-compose up --build test
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;--build&lt;/code&gt; parameter ensures &lt;a href=&#34;#the-test-runner&#34;&gt;the test runner&lt;/a&gt; is rebuilt,
so if we&amp;rsquo;ve edited our test code, the new test code will be run.&lt;/p&gt;
&lt;p&gt;To pass arguments to our command that runs the tests, e.g. to only run a
specific test:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ TEST_ARGS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;-t specific_test_1&amp;#34;&lt;/span&gt; docker-compose up --build test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Perhaps we&amp;rsquo;ve forgotten the CLI of the tool that runs our tests:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ TEST_ARGS&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;--help&amp;#34;&lt;/span&gt; docker-compose up --build test
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To tear down the whole test setup:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ docker-compose down
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;
&lt;p&gt;So it&amp;rsquo;s as simple as that.  Don&amp;rsquo;t write complicated request handling test code,
and code that painstakingly mocks out all downstream dependencies, let
&lt;a href=&#34;http://www.mock-server.com/&#34;&gt;mockserver&lt;/a&gt; do that heavy lifting for you. Using
&lt;a href=&#34;https://docs.docker.com/compose/&#34;&gt;docker-compose&lt;/a&gt; you can rebuild your tests (and perhaps also your
microservice) and run the tests with a couple of commands.  Iterate fast and
test your microservice by driving its API.  At the end of the day, it&amp;rsquo;s the API
that matters.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;You could do this in &lt;a href=&#34;https://kubernetes.io/&#34;&gt;kubernetes&lt;/a&gt;. There are
miniature kubernetes implementations that you can install on your dev machine
or run in CI: &lt;a href=&#34;https://github.com/kubernetes/minikube&#34;&gt;minikube&lt;/a&gt;,
&lt;a href=&#34;https://k3s.io/&#34;&gt;k3s&lt;/a&gt;, &lt;a href=&#34;https://microk8s.io/&#34;&gt;microk8s&lt;/a&gt;. You could put the
&lt;a href=&#34;#test-setup&#34;&gt;elements&lt;/a&gt; in
&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/&#34;&gt;Pods&lt;/a&gt; or
&lt;a href=&#34;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/&#34;&gt;Deployments&lt;/a&gt;
and route them to each other via
&lt;a href=&#34;https://kubernetes.io/docs/concepts/services-networking/service/&#34;&gt;Services&lt;/a&gt;.
None of the test code would have to change. To me that seemed more effort
than writing a short docker-compose file for this small setup.  Mockserver
published &lt;a href=&#34;http://www.mock-server.com/where/kubernetes.html&#34;&gt;a helm chart&lt;/a&gt;
which could be useful.  Mockserver could be used in a larger test setup on a
persistent kubernetes cluster. &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;There&amp;rsquo;s plenty of client libraries out there for mockserver.  &lt;a href=&#34;https://pypi.org/search/?q=mockserver&#34;&gt;Python has
a few&lt;/a&gt;, I used a couple and they
didn&amp;rsquo;t actually work, so I had to patch them.  I&amp;rsquo;d recommending generating
you&amp;rsquo;re own from mockserver&amp;rsquo;s &lt;a href=&#34;https://app.swaggerhub.com/apis/jamesdbloom/mock-server-openapi/5.0.x&#34;&gt;openAPI
spec&lt;/a&gt;
using &lt;a href=&#34;https://github.com/OpenAPITools/openapi-generator&#34;&gt;openAPI Generator&lt;/a&gt;. &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
     </item>
   
 </channel>
</rss>
